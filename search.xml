<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>奇妙恩典</title>
      <link href="/2019/12/11/%E5%BF%83%E8%AE%B0/20191211%E5%BF%83%E8%AE%B0/"/>
      <url>/2019/12/11/%E5%BF%83%E8%AE%B0/20191211%E5%BF%83%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　距离上次记录考科三，已经过了近半个月。主要原因是上次科三挂了一次，然后10天后才能预约考试。昨天刚考完科三，过了。很奇妙。<br>　　上次科三挂了，具体情况是这样。周一（11.25）早上6点多起床，然后打车60元到驾校，7:30左右去模拟6号线，然后快11点回到驾校。这么长时间的一个原因是车上4人，有一人模拟8号线，中途车没油了，然后下雨，天气特别冷，瑟瑟发抖。然后等了好长时间。早上模拟出错的地方就是转弯一档时间过长，导致扣十分。另外从模拟车的教练口中依稀记得靠边停车应该留10公分，路口实线踩一次刹车，上车后需要1分钟内打火。11点多进入考场。等到1点多钟考试，比预期的时间更长。当时都有点困了。然后考1号线，第一个。第一次机会，紧张，打火后脚一直踩着离合和刹车，左脚一直抖个不停，完成灯光模拟，没走100米提示上传成绩，不知道是啥原因失败。考试结束后才知道，由于公交站踩刹车过早，导致判断说未减速，失败。第二次，因前面已经紧张，灯光模拟扣了5分（远光灯打成远近交替，唯一扣5分的，其他直接扣100分），之后谨慎，路口，车站等多踩刹车。加了三次5档，只剩最后一个靠边停车。当拉起手刹是，上传成绩，考试不合格85分。等待10天，再次约考。<br>　　昨天考试，早晨5点10分起床，整晚睡的不怎么好，5:30左右到驾校，直接去模拟8号线，天空黑呜呜一片，雾气弥漫。模拟顺利，6点40左右回到驾校。存包准备排队采指纹。存包时投入一元，竟然显示投币0元，当时大脑闪过去找服务人员理论，大脑又快速想了想，还是算了，有什么证据能证明我投币了，另外和别人理论半天有啥用，安静心情，换一个柜子投币，存包。排队准备采指纹近考场。指纹采集后，等待。所以人都采完之后过了一会，开始近待考区，排在17领取随机数，打印时间07:03:58或07:03:59或其他，反正是07:03，然后一直看着屏幕显示陆续有好多人进来，差不多40多人，后面有进来一些人。差不多70人待考时。快八点钟，然后开始根据报号上车。差不多十几辆车。剩20多个人待考。我依旧待考。然后有进来人，待考人差不多有40多人。时间在过去，内心在紧张，不断祷告，安静自己的心。除去一切骄傲，紧张。一直有感觉似乎要等待着什么，要准备着心态去面对什么，是两次机会，第一次机会没了，还是要第一个考。待考区不断有人进入考试。人数不断减少差不多剩16个左右。这之前一直看着显示器，心理默祷。心很平稳，知道快到自己了。随后自己编号出现了，第三个考，上车看了一下线路7，懵了。然后还在想是不是每个人的线路不一样，随后又有人说7号线，坏了。这下清楚，大家都是7号线。自己从来没跑过这条线，咋办，不断求告神的帮助。安静自己的心。自己不是第三个，既然自己认为自己技术可以，那剩下了就只需要记路线了。接下来，有发生尴尬的事情，第一个也没跑过这条线，然后两下挂了。小伙很失落，说师傅我不上车了，我自己回驾校。安全员说不行，必须一起回去，刚好，仪器上传数据比较慢，安全员说要不我开回去看看啥情况，正好这个时间我问其他人那是公交站，线路如何，大脑有一点印象。但还是不够清楚。有小伙还说现在给你说也没用，我坚决说不一定，因为我知道考试不是靠自己，乃是考万军之耶和华。人的考虑的，所做的都是有不足，智者千虑必有一失。靠着自己不行，但靠着万军之耶和华方能成事。接下来一方面去认真记线路，一方面安静心，除去紧张，除去抱怨。既然自己没跑过，那就当平时训练一下。静静地看着别人，顺便问问身旁的小伙，他也很好，告诉我那块是学校，那块加5档，直行，等等。第二个小伙快到终点时因对面来车，在人行横道掉头，导致停车压斑马线时间长一次机会没了，第二次有因变道忘关转向灯。挂了。整个线路没有完整跑下来。还有两项，超车和靠边停车。自己已经把前面的公交站和人行横道等记得很清楚。接下来就是慢下心来小心操作，靠主得胜。一路慢慢开，遇见公交站踩，人行横道踩。中途误操作挂错档位，迅速停车，调整心态，过学校加5档，直行ok，接下来就是要超车了，过红绿灯，本来在慢车道，因对面有车停在路边（慢车道），只能变道快车道，然后停下来，准备再次回到慢车道，此时系统提醒，驶离快车道，迅速驶离快车道。然后完成超车操作，后面不只在何处掉头。然后就想不管如何先到快车道再说，然后慢慢行驶。此时系统报前面掉头，然后看到路口，一切明白了。刚强壮胆去行。掉头，前行等待靠边停车指令，缓慢进入，停车，然后又调整一下靠边位置，空挡手刹，准备解安全带时，想起好像还要熄火，迅速踩下离合，刹车熄火。解安全带，看反光镜，下车，等待成绩结果，过了一段时间显示成绩合格。顺利过关。</p><div align="center"><p><img src="/img/xj/2019121101.png" alt="我走过的7号线"></p></div><p>　　一切并没有结束，幸福来的太突然，就会想是不是真的过了，再想到底是怎么过的，一句话神的恩典和祝福。接下来我还在默默祈祷，为帮助我的小伙子。因为后面是他考试，操作很流畅。然而再公交车站突然熄火，导致一次机会没了，原因是档位与速度问题，发动机熄火各扣10分，重头来。我心里默默祷告神，你帮助他，他虽然不认识你，但是你借着他帮助了你孩子，求你也帮助他。第二次前面公交车顺利通过，然后在中途加5档，因速度未到5档扣10分，我不停的默祷，求神帮助，后面顺利完成。90分通过考试。<br>　　整个考试，真的是神的恩典和祝福。没有神的帮助，自己什么也做不了。在神做工的同时，也在考验我们对他的信心。让我们不仅经历他，而且是我们成功。耐心等候，预备道路，不断寻求。祂没有一下子去让我面临7号线，而是熬炼人心。没有一下子告诉我完整路线，而是让我去继续不断寻求他。让我明天是祂帮助我，而不是人帮助，是祂借着人，祂掌管一切。真的感谢主，不仅经历你的大能，而且让你孩子能为你作那美好见证。慢慢的明白第一次考科三，是有神的旨意在，祂是为了让孩子更加经历祂的信实和大能。　　</p><div align="center"><p><img src="/img/xj/2019121102.png" alt="7号线简图"></p></div>        <div id="aplayer-XRCNKrjs" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"random","music":[{"title":"你是荣耀的君王","author":"David","url":"/audio/你是荣耀的君王 - David.mp3","pic":"","lrc":"/audio/你是荣耀的君王 - David.lrc"}]};  options.element = document.getElementById("aplayer-XRCNKrjs");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
      
      <categories>
          
          <category> 心记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>谢耳朵猜想</title>
      <link href="/2019/11/22/%E5%BF%83%E8%AE%B0/20191122%E5%8F%91%E7%8E%B0/"/>
      <url>/2019/11/22/%E5%BF%83%E8%AE%B0/20191122%E5%8F%91%E7%8E%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　<a href="https://huanqiukexue.com/a/qianyan/tianwen__wuli/2019/0508/28246.html" target="_blank" rel="noopener">《谢耳朵猜想被证明：No.73最美丽》</a><br>　　《生活大爆炸》中谢耳朵对<code>73</code>数字情有独钟，并且认为这个素数是<code>最优美的</code>;其原因是<code>73</code>是第21个素数，并且<code>7*3=21</code>；不止如此，他还发现素数<code>37</code>是第12个素数。基于谢耳朵特别喜欢<code>73</code>，其穿也印有73；</p><div align="center"><p><img src="/img/xj/2019112201.png" alt="谢尔顿身穿印有“73”的上衣"></p></div><p><code>73</code>的特征有两方面：</p><blockquote><p>73是第21个素数，且 7*3 = 21<br>其镜像对称37刚好是第12个素数。 73（21）《==》（21）37</p></blockquote><p>　　为什么谢耳朵喜欢73而不是37，其原因是3*7=21 而不是12。<br>　　最近有数学家在论文中正式提出“谢耳朵猜想”，并尝试在寻找类似的素数。并将满足该条件的素数，成为希尔顿素数。详细内容:<a href="https://huanqiukexue.com/a/qianyan/tianwen__wuli/2019/0508/28246.html" target="_blank" rel="noopener">《环球科技》</a></p>        <div id="aplayer-MvpfsmjM" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"random","music":[{"title":"The Big Bang Theory Theme","author":"Barenaked Ladies","url":"/audio/The Big Bang Theory Theme - Barenaked Ladies.mp3","pic":"/audio/The Big Bang Theory.jpg","lrc":"/audio/The Big Bang Theory Theme - Barenaked Ladies.lrc"}]};  options.element = document.getElementById("aplayer-MvpfsmjM");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script><p>随想：看到这篇文章时，突然想我，作为程序猿的自己，密码的设计是不是也得有个特殊的数字。反正我的密码和名字有关。</p>]]></content>
      
      <categories>
          
          <category> 心记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前路迷茫，心存希望</title>
      <link href="/2019/11/21/%E5%BF%83%E8%AE%B0/20191121%E5%BF%83%E8%AE%B0/"/>
      <url>/2019/11/21/%E5%BF%83%E8%AE%B0/20191121%E5%BF%83%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　看到标题，比较清晰，看似清晰，实则模糊。<code>前路迷茫，心存希望</code>，其实应该还有下一句<code>不知所措，浑浑噩噩</code>。其实后半句也不一定是这样的。仿佛自己告诉自己心有余而力不足。何力不足，却又不是，而是太懒。</p><p>　　为什么会出现上面这句话，最近的稍微静了下来，人一静就开始思考，一思考就有压力。前不久读了篇文章。35岁的老员工，被优化，走前是公司小主管。长达120天的求职，缺不知所措。一个大厂没收。小企业对他评头论脚。 看到这个消息，顺便看了评论，有人说，自己能力不行，还嫌弃别人对自己挑剔。也有人同情说，不久自己也会到该年龄，对其怜悯。不管恶语还是同情，值得思考，35岁确实比较尴尬的年龄。或许能力或许环境，等等因素。但终归现实如此。而自己该如何做呢？应该扣心自问。<br>　　毕业4年，辗转3家，除去校招，两次经历面试。一个感觉<code>广而不精，非他所需</code>。知道的很多，却没有几样很深，企业不想培养。为什么会出现此现状，恶性循环，廉价劳动力。不通用。没时间挖深。有时大企业的确好，管理培等等。身边都是牛人，随处可学。没有这样环境怎么办。个人规划又当如何。<br>　　专攻方向<code>算法</code>，<code>Linux</code>，<code>Python</code>。<br>　　<code>算法</code>:leetcode。从头来，锻炼思维。<br>　　<code>Linux</code>:往下沉，更深入。<br>　　<code>Python</code>:跟上技术发展，多思维模式。</p><div align="center"><p><img src="/img/xj/2019112101.jpg" alt="前路迷茫，心存希望"></p></div>        <div id="aplayer-lleIGfKh" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"random","music":[{"title":"海阔天空","author":"beyond","url":"/audio/海阔天空 - BEYOND.mp3","pic":"/audio/beyond.jpg","lrc":"/audio/海阔天空 - BEYOND.lrc"}]};  options.element = document.getElementById("aplayer-lleIGfKh");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
      
      <categories>
          
          <category> 心记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>shell脚本</title>
      <link href="/2019/11/21/%E7%AC%94%E8%AE%B0/10%20shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/11/21/%E7%AC%94%E8%AE%B0/10%20shell%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>shell脚本中切换目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!<span class="comment">#/bin/bash/</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">cd</span> ./../</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//可执行权限</span><br><span class="line">$ chmod a+x 1.sh</span><br><span class="line">//执行脚本</span><br><span class="line">$ ./1.sh</span><br><span class="line">$</span><br><span class="line">//查看当前位置</span><br><span class="line">$ <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>之后会发现第二个<code>pwd</code>和第一个<code>pwd</code>，不一样，且第二个明显已经回到上一级目录，但是当前的目录还是没有改变。这种完全没有达到我们想要的目的，该怎么办呢。具体如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ./1.sh</span><br><span class="line">$</span><br><span class="line">$</span><br><span class="line">$ <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>通过使用<code>source</code>，发现当前位置已发生改变。</p><div align="center"><p><img src="/img/note_10/01.jpg" alt="切换目录脚本"></p></div>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>无聊</title>
      <link href="/2019/11/15/%E5%BF%83%E8%AE%B0/20191115%E5%BF%83%E8%AE%B0/"/>
      <url>/2019/11/15/%E5%BF%83%E8%AE%B0/20191115%E5%BF%83%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　距离上一次更新博客，快四个多月了，这段时间发生了很多事情。大部分都是开心😊的事情，所以中间也有一些麻烦和闹心。但都挺好不管是过程还是结果。都挺愉快。这段时间主要是考科二，结婚，转正。10月4号结婚，结婚前由于我和我老婆两个人把很多事情想的比较简单，导致发生了一些沟通不当导致的不愉快，最后还是顺顺利利，感谢主，感谢弟兄姐妹，还有父母，家人，亲戚，邻里。他们都帮了很多忙。双方父母的操劳，亲戚的忙前忙后。太辛苦他们了。有时真的感觉自己有些不太懂事。不愿意去做，去说。也许这是人需要的一些成长。不擅长人际关系，但往往你在这个生活圈内，你需要去和别人沟通，说话等等。整个婚礼挺完美，一直担心天气等等，感谢主，接完老婆，不久后才下的雨。热热闹闹，非常愉快开心。  可能有一点点小的遗憾就是，我两人没有婚假，导致整个十一紧张而忙碌的度过。没能好好陪她出去旅游，没有一个蜜月旅游。在此应该记录下来，一定要带她出去玩玩。<br>　　驾照，距上一次科二失利后，不久又考了一次，顺利通过，十一前科三也学了很久，由于结婚前太多事，就没去考，一直拖到11月才考试练了几次。打算下下周一，顺利通过，求主帮助。不希望在这个事情浪费太多时间和精力。<br>　　工作，三个月的适应期已经结束，已经成为正式员工，入职快四个月了，也是上次博客更新时间。这四个月工作不算忙碌，没有太多事情。不太忙碌，感觉有些安逸。这一周突然有很强力的学习欲望。或自我约束，觉得自己不应该这样，应该自我充实一下，练练算法，沉沉底。好好做个学习计划，让自己的脑子动一动。每天进步一点点，循序渐进。前几天看到哥分享一盘文章”给大脑挂个外置硬盘”，既做笔记。记录每天都干了啥。人的遗忘性比较强，它对事情只会记录最触及的一点。一件事情，它只会记录一小段，剩下的就需要外部记录。当回放时大脑却会迅速想起很多细节，很神奇。由于以上的自我刺激和约束。所以又重新开始内心的记录。这次尝试在手机上做心记，因为这样可以随时随地，立刻去写。但是还是不清楚是否便捷方便。就看这篇文章能够发出去不，嘿嘿。最后来一首最近听的比较顺耳的歌曲”你的酒馆对我打了烊”。</p>        <div id="aplayer-lhapxdBc" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"random","music":[{"title":"你的酒馆对我打了烊","author":"陈雪凝","url":"/audio/你的酒馆对我打了烊_陈雪凝.mp3","pic":"/audio/陈雪凝.png","lrc":"/audio/你的酒馆对我打了烊_陈雪凝.lrc"}]};  options.element = document.getElementById("aplayer-lhapxdBc");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
      
      <categories>
          
          <category> 心记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>等待</title>
      <link href="/2019/07/21/%E5%BF%83%E8%AE%B0/20190721%E5%BF%83%E8%AE%B0/"/>
      <url>/2019/07/21/%E5%BF%83%E8%AE%B0/20190721%E5%BF%83%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　上周，一直在等待之前面试结果，原以为会有自己想去的公司，没想到没任何消息，上周没怎么刷简历，没想到周四学完车之后有两家约面试，然后这周也不想刷简历，周一刚好通知，上周六的面试通过。说是下周三入职，需要走流程，周三发offer。这周就相对比较轻松，休息休息，周五体个检，办张卡。等候入职。周天，丈母娘生日，吃顿了顿烤肉，好久没在外面吃饭了，挺香，滋润，舒坦。</p><div align="center"><p><img src="/img/xj/2019072101.png" alt="美食"></p></div><p></p><p>　　当你放下面子赚钱的时候，说明你已经懂事了。当你用钱赚回面子的时候，说明你已经成功了。当你用面子可以赚钱的时候，说明你已经是人物了。当你还停留在那里喝酒、吹牛，啥也不懂还装懂，只爱所谓的面子的时候，说明你这辈子也就这样了。</p>        <div id="aplayer-lnyobUFl" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"random","music":[{"title":"农夫渔夫","author":"大乔小乔","url":"/audio/农夫渔夫-大乔小乔.mp3","pic":"/audio/大乔小乔.png","lrc":"/audio/农夫渔夫-大乔小乔.txt"},{"title":"等待戈多","author":"林力尧","url":"/audio/等待戈多-林力尧.mp3","pic":"/audio/林力尧.png","lrc":"/audio/等待戈多-林力尧.txt"}]};  options.element = document.getElementById("aplayer-lnyobUFl");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
      
      <categories>
          
          <category> 心记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>求职</title>
      <link href="/2019/07/14/%E5%BF%83%E8%AE%B0/20190714%E5%BF%83%E8%AE%B0/"/>
      <url>/2019/07/14/%E5%BF%83%E8%AE%B0/20190714%E5%BF%83%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　周一面试了一下想去的这家公司，总体聊的还行，聊下来感觉，就是自己工作这几年一直没有把技术挖深，技术广而不深，知道很多，什么都会一点。但是往深挖一点，就不太行了。可能是之前的工作有关，一直做的比较偏应用，还有自己的原因导致没有去深挖。最近的几次面试觉得，自己两个方向发展：mcu、linux。mcu这块的需要学习的东西，熟悉一些系统，还有一些无线模块（蓝牙，zigbee）。linux这块多了，内存管理，内存分配，系统调用等等。这家面试感觉挺好，hr聊的过程中，有些表达太过了。过于表现自己想来。晚上和老婆聊天，本想说说面试上的一些事情，想听听建议，却闹的情绪不好。她最近也比较累。刚进新的公司，工作比较忙，下班比较晚，没能去陪她，还惹她不开心。哎，心疼。<br>　　周二面试，聊下来的感觉就是需要的技术偏向于mcu，个人之前接触的太少，而且接触的都是比较low的芯片，目前很少用，算职位不匹配没事。下午刷了刷简历，感觉没啥好公司，烦躁。刷视频，堕落。周三想着看看书，静静心。早上起来却刷了刷视频。然后把博客重新整理的一下，新增了音乐和视频的内容。<br>　　一个人需要追求的品质生活到底是什么？最重要的其实在与一个人对生活的态度，你既要有接受最好的一切的能力，也要有面对最坏的坦然心态。<br>　　周三堕落一天，晚上吃完饭，心情不是特别好，然后就是出门瞎溜达，散散心，减减肉。烦躁不安，周四要考科目二，过于紧张不安，工作也没着落，心情不爽。</p><div align="center"><p><img src="/img/xj/2019071401.png" alt="散步散心"></p></div><p></p><p>　　周四考科目二，一晚上没怎么睡好，很紧张😓，一大早去练了练车，10点结束一直到下午2点半才考试，然后挂了，第一次，倒车入库，直接懵逼，后面无任何心理走完全程，自我感觉良好。第二次，坡道后遛。倒车入库ok，感觉良好，然后过于骄傲，坡道直接后遛。归根结底，就是车不好。下午回家，接到面试通知，周六面试，因周六学车，然后约的2点半面试。<br>　　周五醒的很早，然后无意间刷到《明日之子》，有些收益，每个人都去进行一次面试表演，与面试官的交流，有的话多，有的紧张，该说的和不该说的，都去说。让自己感觉之前的面试就有些话痨，太过于暴露自己，应该三思二后行。下午两点多，突然说是有面试，不到两小时的地铁，冒雨去面试，坐汽车仪表盘，算是跨行业，需要学的东西比较多。技术和hr面试还行。<br>　　周六面试，技术面感觉一般，面试官打断自我介绍，纠结无关紧要的东西，然后还在玩手机。hr面试聊了很多。一周下来，工作没有着落，车也没过，但是心理有些释放。一年的难处一天当，不必为明天担忧，你无法去决定明天会发生什么，也无妨预料，何必给自己那么大的压力。</p>        <div id="aplayer-jomnhrbL" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"random","music":[{"title":"凡事都有神的美意","author":"属天音乐事工","url":"/audio/凡事都有神的美意-属天音乐事工.mp3","pic":"/audio/属天音乐事工.png","lrc":"/audio/凡事都有神的美意-属天音乐事工.lrc"}]};  options.element = document.getElementById("aplayer-jomnhrbL");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
      
      <categories>
          
          <category> 心记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>失业调整</title>
      <link href="/2019/07/07/%E5%BF%83%E8%AE%B0/20190707%E5%BF%83%E8%AE%B0/"/>
      <url>/2019/07/07/%E5%BF%83%E8%AE%B0/20190707%E5%BF%83%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　最近离职，突然有个想法，近一年的工作，自己一直是比较安逸，自从上次博客更新，这一年内都没怎么更新，一直让自己的心静不下来，总是觉得自己脑子很累，不想去思考任何事，好不容易最近空闲下来，想着自己可以好好写点东西，让自己的生活不这么混乱。有个新的打算，开始每周的一个心记，记录一周中自己的想法，遇见的人，遇见的事，生活等等。正好今天有空，睡了半天，感觉自己有些无聊，闲着也是闲着，就写来玩玩。<br>　　上周五被告知离职，周五匆忙收拾了东西，整理了一下电脑，自己的东西带走走人，因一些手续没有办完，所以这周又去了一天半，周二处理完离职手续，中午回来在家睡了一觉，傍晚起来吃了点饭，刷刷视频，刷刷工作，收到个面试通知，想着第二天看看书，因为这一年来，一直做的是mcu这块的东西，linux相关忘的差不多了，而且面试这家，大部分和linux相关，周三起来，收拾了厨房，因为长时间偶尔在老婆家，陪老婆，时不时回来一次就是吃饭，睡觉。因此房间一直很乱，没时间收拾，正好这段时间收拾收拾。下午看了会技术书，比较烦躁，就想着写点东西。<br>　　这周面试三家公司，第一家面试感觉下来，linux的一些专业知识有些忘记了，socket和dhcp交互过程，tcp/ip等。技术面试感觉一般，hr面试觉得本人不太愿意加班。第二家笔试题简单，面试官技术一般，hr没怎么聊。第三家，由于是外包公司，主要是技术面，就大题介绍了一下个人的工作经历，总体感觉还行。hr由于忙，未聊，说是电话联系谈薪资。下周一有家面试，有些想去。所以最近一直没怎么刷简历。<br>　　周末学车，模拟了一下场地，感觉还行，正好最近比较空闲，想着下周四考科目二，希望能一次过。周末感觉还是过的比较忙，去老婆家陪陪她，感觉挺放松的，就是回来比较累。早上在老婆家看了本书《生活需要仪式感》原本以为这本书是讲的如何去享受生活，让平凡普通的生活过的不平凡。然后却不是，而是一种真正的去对待生活。做一件事情认真去做，不要让自己懒惰下来。不要总是说自己很忙，脑子很乱，心里压力很大。去看个电影，吃顿好吃的，放松一下。其实自己应该学会约束自己。需要动起来，去看书，做事情，整理家务。而不是自以为的放松，其实那种更累，心脑更加混乱。</p><div align="center"><p><img src="/img/xj/2019070701.png" alt="生活需要仪式感"></p></div><br>　　专心做一件事，无论干什么，都应该全身心的去投入其中。<br>　　一些的开始，从点滴做起。凡事都是很简单，只是你愿不愿意，让其形成一种习惯。做正确有意（有益）的事，你就不会感觉自己很累。不会拖延。<p></p>        <div id="aplayer-kQahHoTQ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"random","music":[{"title":"静下来","author":"大乔小乔","url":"/audio/静下来-大乔小乔.mp3","pic":"/audio/大乔小乔.png","lrc":"/audio/静下来-大乔小乔.txt"}]};  options.element = document.getElementById("aplayer-kQahHoTQ");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
      
      <categories>
          
          <category> 心记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux系统开发环境搭建</title>
      <link href="/2019/06/18/%E7%AC%94%E8%AE%B0/0aLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/06/18/%E7%AC%94%E8%AE%B0/0aLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;经常使用linux系统(Ubuntu),默认都会安装一些软件，方便开发。记录一下常用的一些软件配置和开发环境搭建。包括<code>samba</code>,<code>ssh</code>,<code>tmux</code>等</p><h3 id="一、PS1"><a href="#一、PS1" class="headerlink" title="一、PS1"></a>一、PS1</h3><p>修改<code>PS1</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="string">"╔║<span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\[\033[1;35m\]\w\[\033[00m\]\n╚═&gt;&gt;"</span></span><br></pre></td></tr></table></figure><h3 id="二-vim-bundle"><a href="#二-vim-bundle" class="headerlink" title="二.vim,bundle"></a>二.vim,bundle</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br><span class="line">sudo apt-get install git</span><br><span class="line">sudo apt-get install ctags</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/gmarik/vundle.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure><p>新建文件<code>.vimrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> ts=4</span><br><span class="line"><span class="built_in">set</span> noexpandtab</span><br><span class="line">%retab!</span><br><span class="line"><span class="built_in">set</span> list</span><br><span class="line"><span class="built_in">set</span> listchars=tab:&gt;-,trail:-</span><br><span class="line"><span class="built_in">set</span> listchars=tab:&gt;-,trail:-</span><br><span class="line"><span class="built_in">set</span> tags=tags;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">" 定义快捷键的前缀，即&lt;Leader&gt;</span></span><br><span class="line"><span class="string">let mapleader="</span>;<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 开启文件类型侦测</span><br><span class="line">filetype on</span><br><span class="line"><span class="string">" 根据侦测到不同类型加载对应插件</span></span><br><span class="line"><span class="string">filetype plugin on</span></span><br><span class="line"><span class="string">"</span> 定义快捷键到行首和行尾</span><br><span class="line">nmap LB 0</span><br><span class="line">nmap LE $</span><br><span class="line"><span class="string">" 设置快捷将选中文本块复制到系统剪贴板</span></span><br><span class="line"><span class="string">vnoremap &lt;Leader&gt;y "</span>+y</span><br><span class="line"><span class="string">" 设置快捷键将系统剪贴板内容粘贴至vim</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;p "</span>+p</span><br><span class="line"><span class="string">" 定义快捷键关闭当前分割窗口</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;q :q&lt;CR&gt;</span></span><br><span class="line"><span class="string">"</span> 定义快捷键保存当前窗口内容</span><br><span class="line">nmap &lt;Leader&gt;w :w&lt;CR&gt;</span><br><span class="line"><span class="string">" 定义快捷键保存所有窗口内容并退出vim</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;WQ :wa&lt;CR&gt;:q&lt;CR&gt;</span></span><br><span class="line"><span class="string">"</span> 不做任何保存，直接退出</span><br><span class="line">nmap &lt;Leader&gt;Q :qa!&lt;CR&gt;</span><br><span class="line"><span class="string">" 依次遍历子窗口</span></span><br><span class="line"><span class="string">nnoremap nw &lt;C-W&gt;&lt;C-W&gt;</span></span><br><span class="line"><span class="string">"</span> 跳转至右方窗口</span><br><span class="line">nnoremap &lt;Leader&gt;lw &lt;C-W&gt;l</span><br><span class="line"><span class="string">" 跳转至左方窗口</span></span><br><span class="line"><span class="string">nnoremap &lt;Leader&gt;hw &lt;C-W&gt;h</span></span><br><span class="line"><span class="string">"</span> 跳转至上方窗口</span><br><span class="line">nnoremap &lt;Leader&gt;kw &lt;C-W&gt;k</span><br><span class="line"><span class="string">" 跳转至下方窗口</span></span><br><span class="line"><span class="string">nnoremap &lt;Leader&gt;jw &lt;C-W&gt;j</span></span><br><span class="line"><span class="string">"</span> 定义快捷键在结对符之间跳转</span><br><span class="line">nmap &lt;Leader&gt;M %</span><br><span class="line"></span><br><span class="line"><span class="string">" 开启实时搜索功能</span></span><br><span class="line"><span class="string">set incsearch</span></span><br><span class="line"><span class="string">"</span> 搜索时大小写不敏感</span><br><span class="line"><span class="built_in">set</span> ignorecase</span><br><span class="line"><span class="string">" 关闭兼容模式</span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string">"</span> vim 自身命令行模式智能补全</span><br><span class="line"><span class="built_in">set</span> wildmenu</span><br><span class="line"></span><br><span class="line"><span class="string">" 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数</span></span><br><span class="line"><span class="string">fun! ToggleFullscreen()</span></span><br><span class="line"><span class="string">call system("</span>wmctrl -ir <span class="string">" . v:windowid . "</span> -b toggle,fullscreen<span class="string">")</span></span><br><span class="line"><span class="string">endf</span></span><br><span class="line"><span class="string">"</span> 全屏开/关快捷键</span><br><span class="line">map &lt;silent&gt; &lt;F11&gt; :call ToggleFullscreen()&lt;CR&gt;</span><br><span class="line"><span class="string">" 启动 vim 时自动全屏</span></span><br><span class="line"><span class="string">autocmd VimEnter * call ToggleFullscreen()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>总是显示状态栏</span><br><span class="line"><span class="built_in">set</span> laststatus=2</span><br><span class="line"><span class="string">" 显示光标当前位置</span></span><br><span class="line"><span class="string">set ruler</span></span><br><span class="line"><span class="string">"</span> 高亮当前行/列</span><br><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line"><span class="string">"set cursorcolumn</span></span><br><span class="line"><span class="string">"</span> 高亮显示搜索结果</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="string">" 禁止折行</span></span><br><span class="line"><span class="string">set nowrap</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 开启语法高亮功能</span><br><span class="line">syntax <span class="built_in">enable</span></span><br><span class="line"><span class="string">" 允许用指定语法高亮配色方案替换默认方案</span></span><br><span class="line"><span class="string">syntax on</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 自适应不同语言的只能缩进</span><br><span class="line">filetype indent on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">" vundle 环境设置</span></span><br><span class="line"><span class="string">filetype off</span></span><br><span class="line"><span class="string">set rtp+=~/.vim/bundle/Vundle.vim</span></span><br><span class="line"><span class="string">"</span> vundle管理的插件列表必须位于vundle<span class="comment">#begin()和vundle#end()之间</span></span><br><span class="line">call vundle<span class="comment">#begin()</span></span><br><span class="line"></span><br><span class="line">Plugin <span class="string">'taglist.vim'</span></span><br><span class="line">Bundle <span class="string">'majutsushi/tagbar'</span></span><br><span class="line">Plugin <span class="string">'OmniCppComplete'</span></span><br><span class="line">Plugin <span class="string">'AutoComplPop'</span></span><br><span class="line">Plugin <span class="string">'a.vim'</span></span><br><span class="line">Bundle <span class="string">'gabrielelana/vim-Markdown'</span></span><br><span class="line">Bundle <span class="string">'iamcco/Markdown-preview.vim'</span></span><br><span class="line"><span class="string">" Markdown</span></span><br><span class="line"><span class="string">Bundle 'jszakmeister/Markdown2ctags'</span></span><br><span class="line"><span class="string">"</span> Add support <span class="keyword">for</span> Markdown files <span class="keyword">in</span> tagbar.</span><br><span class="line"><span class="built_in">let</span> g:tagbar_type_Markdown = &#123;</span><br><span class="line">    \ <span class="string">'ctagstype'</span>: <span class="string">'Markdown'</span>,</span><br><span class="line">    \ <span class="string">'ctagsbin'</span> : <span class="string">'/home/***/.vim/bundle/Markdown2ctags/Markdown2ctags.py'</span>,</span><br><span class="line">    \ <span class="string">'ctagsargs'</span> : <span class="string">'-f - --sort=yes'</span>,</span><br><span class="line">    \ <span class="string">'kinds'</span> : [</span><br><span class="line">    \ <span class="string">'s:sections'</span>,</span><br><span class="line">    \ <span class="string">'i:images'</span></span><br><span class="line">    \ ],</span><br><span class="line">    \ <span class="string">'sro'</span> : <span class="string">'|'</span>,</span><br><span class="line">    \ <span class="string">'kind2scope'</span> : &#123;</span><br><span class="line">    \ <span class="string">'s'</span> : <span class="string">'section'</span>,</span><br><span class="line">    \ &#125;,</span><br><span class="line">    \ <span class="string">'sort'</span>: 0,</span><br><span class="line">\ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:Markdown_enable_spell_cheking=0</span><br><span class="line"><span class="built_in">let</span> g:Markdown_enable_mappings=0</span><br><span class="line"></span><br><span class="line"><span class="string">" 插件列表结束</span></span><br><span class="line"><span class="string">call vundle#end()</span></span><br><span class="line"><span class="string">filetype plugin indent on</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let Tlist_Show_One_File=1</span></span><br><span class="line"><span class="string">let Tlist_Exit_OnlyWindow=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 设置tagbar使用的ctags的插件，必须要设置对</span><br><span class="line"><span class="built_in">let</span> g:tagbar_ctags_bin=<span class="string">'/usr/bin/ctags'</span></span><br><span class="line"><span class="string">" 设置tagbar的窗口宽度</span></span><br><span class="line"><span class="string">let g:tagbar_width=30</span></span><br><span class="line"><span class="string">"</span> 设置tagbar的窗口显示的位置，为右边</span><br><span class="line"><span class="built_in">let</span> g:tagbar_left=1</span><br><span class="line"><span class="string">" 打开文件自动 打开tagbar</span></span><br><span class="line"><span class="string">autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string">set backspace=indent,eol,start</span></span><br><span class="line"><span class="string">set completeopt=longest,menu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 头文件/源文件切换 </span><br><span class="line">nnoremap &lt;silent&gt; &lt;F12&gt; :A&lt;CR&gt;</span><br><span class="line"><span class="string">" 切换至光标所在文件</span></span><br><span class="line"><span class="string">nnoremap &lt;silent&gt; &lt;F11&gt; :IHV&lt;CR&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">autocmd BufWritePost <span class="variable">$MYVIMRC</span> source <span class="variable">$MYVIMRC</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set nopaste</span></span><br><span class="line"><span class="string">set noautoindent</span></span><br><span class="line"><span class="string">set nosmartindent</span></span><br></pre></td></tr></table></figure><p>随后使用安装插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim</span><br><span class="line">:BundleInstall</span><br></pre></td></tr></table></figure><h3 id="三、tmux"><a href="#三、tmux" class="headerlink" title="三、tmux"></a>三、tmux</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br><span class="line">vim ~/.tmux.conf</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># general</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="built_in">set</span> -g xterm-keys on</span><br><span class="line"><span class="built_in">set</span> -g display-panes-time 3000</span><br><span class="line"><span class="built_in">set</span> -g base-index 1</span><br><span class="line"><span class="built_in">set</span> -g pane-base-index 1</span><br><span class="line"><span class="built_in">set</span> -g mouse-resize-pane on</span><br><span class="line"><span class="built_in">set</span> -g mouse-select-pane on</span><br><span class="line"><span class="built_in">set</span> -g mouse-select-window on</span><br><span class="line"><span class="built_in">set</span> -g pane-active-border-fg white</span><br><span class="line"><span class="built_in">set</span> -g pane-active-border-bg white</span><br><span class="line"><span class="built_in">set</span> -g pane-border-fg blue</span><br><span class="line"><span class="built_in">set</span> -g pane-border-bg black</span><br><span class="line">setw -g mode-mouse on</span><br><span class="line"><span class="built_in">bind</span> r <span class="built_in">source</span>-file ~/.tmux.conf \; display-message <span class="string">"Config reloaded..."</span></span><br><span class="line"><span class="built_in">set</span> -g renumber-windows on</span><br><span class="line"><span class="built_in">set</span> -g <span class="built_in">history</span>-limit 20000</span><br><span class="line"></span><br><span class="line"><span class="comment"># it is terrible for using vim</span></span><br><span class="line"><span class="built_in">set</span> -g escape-time 0</span><br><span class="line"></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># status bar</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="built_in">set</span> -g status-position bottom</span><br><span class="line"><span class="built_in">set</span> -g status on</span><br><span class="line"><span class="built_in">set</span> -g status-bg colour103</span><br><span class="line"><span class="built_in">set</span> -g status-fg colour232</span><br><span class="line"><span class="built_in">set</span> -g status-key vi</span><br><span class="line"><span class="built_in">set</span> -g status-interval 1</span><br><span class="line"><span class="built_in">set</span> -g status-utf8 on</span><br><span class="line"><span class="built_in">set</span> -g status-justify <span class="string">"centre"</span></span><br><span class="line"><span class="built_in">set</span> -g status-left-length 60</span><br><span class="line"><span class="built_in">set</span> -g status-right-length 90</span><br><span class="line"><span class="built_in">set</span> -g status-left <span class="string">"#(~/.tmux-pl-src/powerline.sh left)"</span><span class="string">'#&#123;?client_prefix,  #[reverse bold] PREFIX ,          &#125;'</span></span><br><span class="line"><span class="built_in">set</span> -g status-right <span class="string">"#(~/.tmux-pl-src/powerline.sh right)"</span></span><br><span class="line">setw -g window-status-current-bg colour15</span><br><span class="line">setw -g window-status-current-fg colour124</span><br><span class="line">setw -g window-status-current-attr italics,bold</span><br><span class="line">setw -g window-status-current-format <span class="string">' #I '</span></span><br><span class="line">setw -g window-status-format <span class="string">' #I '</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># vim</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line">setw -g mode-keys vi</span><br><span class="line"><span class="built_in">bind</span> -t vi-copy v begin-selection</span><br><span class="line"><span class="built_in">bind</span> -t vi-copy y copy-selection</span><br><span class="line"><span class="built_in">bind</span> -t vi-copy = end-of-line</span><br><span class="line"><span class="built_in">bind</span> -t vi-copy - start-of-line</span><br><span class="line"></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># general key map</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="built_in">set</span> -g repeat-time 1500</span><br><span class="line"><span class="built_in">set</span> -g prefix M<span class="_">-e</span></span><br><span class="line">unbind-key C-b</span><br><span class="line"><span class="built_in">bind</span> M<span class="_">-e</span> send-prefix</span><br><span class="line"><span class="built_in">bind</span> -n M-2 display-panes</span><br><span class="line"><span class="built_in">bind</span> -n M-3 <span class="built_in">command</span>-prompt <span class="string">"select-window -t :'%%'"</span></span><br><span class="line"><span class="built_in">bind</span> -n M-Right next-window</span><br><span class="line"><span class="built_in">bind</span> -n M-Left previous-window</span><br><span class="line"><span class="built_in">bind</span> -n M-\ last-window</span><br><span class="line"><span class="built_in">bind</span> -n M-= new-window -c <span class="string">"#&#123;pane_current_path&#125;"</span></span><br><span class="line"><span class="built_in">bind</span> -n M-- <span class="built_in">kill</span>-window</span><br><span class="line"><span class="built_in">bind</span> -n M-x <span class="built_in">kill</span>-pane</span><br><span class="line"><span class="built_in">bind</span> -n M-c copy-mode</span><br><span class="line"><span class="built_in">bind</span> -n M-] paste-buffer</span><br><span class="line"><span class="built_in">bind</span> c new-windows -c <span class="string">"#&#123;pane_current_path&#125;"</span></span><br><span class="line"><span class="built_in">bind</span> _ split-window -v -c <span class="string">"#&#123;pane_current_path&#125;"</span></span><br><span class="line"><span class="built_in">bind</span> | split-window -h -c <span class="string">"#&#123;pane_current_path&#125;"</span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">'"'</span> select-layout tiled</span><br><span class="line"><span class="built_in">bind</span> -r h select-layout main-horizontal \; swap-pane -D</span><br><span class="line"><span class="built_in">bind</span> -r v select-layout main-vertical \; swap-pane -D</span><br><span class="line"><span class="built_in">bind</span> -n F1 save-buffer -b 0 ~/.sdbuf \; run <span class="string">"cat ~/.sdbuf | sdcv"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> k select-pane -U           <span class="comment">#选择上窗口</span></span><br><span class="line"><span class="built_in">bind</span> j select-pane -D           <span class="comment">#选择下窗口</span></span><br><span class="line"><span class="built_in">bind</span> h select-pane -L           <span class="comment">#选择左窗口</span></span><br><span class="line"><span class="built_in">bind</span> l select-pane -R           <span class="comment">#选择右窗口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rename window</span></span><br><span class="line">setw -g automatic-rename on</span><br><span class="line"><span class="built_in">set</span>-window-option -g window-status-format <span class="string">'#[dim]#I:#[default]#W#[fg=grev,dim]'</span></span><br><span class="line"><span class="built_in">set</span>-window-option -g window-status-current-format <span class="string">'#[fg=red,bold]#I#[fg=red]:#[fg=red]#W#[fg=dim]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#List of plugins</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tpm'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-sensible'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-resurrect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tmux-resurrect</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-save-bash-history <span class="string">'on'</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-capture-pane-contents <span class="string">'on'</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-strategy-vim <span class="string">'session'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-save <span class="string">'S'</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-restore <span class="string">'R'</span></span><br><span class="line"><span class="comment">#Initialize TMUX plugin manager (keep this line at the bottom)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> K <span class="built_in">kill</span>-server</span><br><span class="line"></span><br><span class="line">run <span class="string">'~/.tmux/plugins/tpm/tpm'</span></span><br></pre></td></tr></table></figure><p><code>tmux</code>常用操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alt+e  <span class="comment">#快捷前缀 prefix</span></span><br><span class="line">prefix new <span class="comment">#新建会话</span></span><br><span class="line">prefix s <span class="comment">#列出会话，切换会话</span></span><br><span class="line">prefix $ <span class="comment">#重命名会话</span></span><br><span class="line">prefix | <span class="comment">#分割窗口</span></span><br><span class="line">prefix c <span class="comment">#新建窗口</span></span><br><span class="line">prefix num <span class="comment">#切换窗口</span></span><br><span class="line">prefix , <span class="comment">#重命名窗口</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出</span></span><br></pre></td></tr></table></figure><p>其他快捷键，查看配置</p><h3 id="四、samba-ssh"><a href="#四、samba-ssh" class="headerlink" title="四、samba,ssh"></a>四、samba,ssh</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba samba-common</span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">test</span>]</span><br><span class="line">  path = /home/<span class="built_in">test</span></span><br><span class="line">  valid users = <span class="built_in">test</span></span><br><span class="line">  browseable = yes</span><br><span class="line">  writable = yes</span><br><span class="line">  public = no</span><br></pre></td></tr></table></figure><p>为此用户<code>test</code>设置密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>重启服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/samba restart</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> samba </tag>
            
            <tag> ssh </tag>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gerrit服务器的搭建与使用</title>
      <link href="/2019/05/31/%E7%AC%94%E8%AE%B0/08Gerrit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/05/31/%E7%AC%94%E8%AE%B0/08Gerrit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><h3 id="1、java"><a href="#1、java" class="headerlink" title="1、java"></a>1、java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:openjdk-r/ppa</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h3 id="2、git"><a href="#2、git" class="headerlink" title="2、git"></a>2、git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="3、apache2"><a href="#3、apache2" class="headerlink" title="3、apache2"></a>3、apache2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/apach2 start  <span class="comment">#是否可正常启动</span></span><br></pre></td></tr></table></figure><h3 id="4、下载gerrit"><a href="#4、下载gerrit" class="headerlink" title="4、下载gerrit"></a>4、下载gerrit</h3><p><a href="https://pan.baidu.com/s/1GwVTqH_YVLO38_PYUpusXw" target="_blank" rel="noopener">gerrit.2.15.2百度盘</a> 提取码：otlq<br><a href="https://www.gerritcodereview.com/2.15.html" target="_blank" rel="noopener">官方下载地址</a></p><h2 id="二、搭建Gerrit"><a href="#二、搭建Gerrit" class="headerlink" title="二、搭建Gerrit"></a>二、搭建Gerrit</h2><h3 id="1、新建用户"><a href="#1、新建用户" class="headerlink" title="1、新建用户"></a>1、新建用户</h3><p>使用独立的账户，来配置gerrit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser gerrit</span><br></pre></td></tr></table></figure><p>将<code>gerrit</code>加入到<code>sudo</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /etc/sudoers</span><br><span class="line">sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>添加下面一句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerrit  ALL=(ALL:ALL)ALL</span><br></pre></td></tr></table></figure><p>切换用户为<code>gerrit</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su gerrit</span><br></pre></td></tr></table></figure><h3 id="2、安装gerrit"><a href="#2、安装gerrit" class="headerlink" title="2、安装gerrit"></a>2、安装gerrit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar gerrit.2.15.2.war init --batch --dev -d ~/gerrittest</span><br></pre></td></tr></table></figure><p>出现<code>Starting Gerrit Code Review: OK</code>，表示<code>Gerrit</code>服务正在运行。</p><h3 id="3、反向代理"><a href="#3、反向代理" class="headerlink" title="3、反向代理"></a>3、反向代理</h3><h4 id="3-1、修改gerrit配置"><a href="#3-1、修改gerrit配置" class="headerlink" title="3.1、修改gerrit配置"></a>3.1、修改gerrit配置</h4><p><code>vim gerrittest/etc/gerrit.config</code>:<br>修改为以下内容<br><code>192.168.40.130</code>为本机ip地址，通过<code>ifconfig</code>可查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[gerrit]</span><br><span class="line">    basePath = git</span><br><span class="line">    serverId = c5447167-daf0-49e2-a79f-e154d0841461</span><br><span class="line">    canonicalWebUrl = http://192.168.40.130:8081/  <span class="comment"># 修改为ip:8081</span></span><br><span class="line">[database]</span><br><span class="line">    <span class="built_in">type</span> = h2</span><br><span class="line">    database = /home/gerrittest/gerrit/db/ReviewDB</span><br><span class="line">[noteDb <span class="string">"changes"</span>]</span><br><span class="line">    disableReviewDb = <span class="literal">true</span></span><br><span class="line">    primaryStorage = note db</span><br><span class="line">    <span class="built_in">read</span> = <span class="literal">true</span></span><br><span class="line">    sequence = <span class="literal">true</span></span><br><span class="line">    write = <span class="literal">true</span></span><br><span class="line">[index]</span><br><span class="line">    <span class="built_in">type</span> = LUCENE</span><br><span class="line">[auth]</span><br><span class="line">    <span class="built_in">type</span> = HTTP <span class="comment">#DEVELOPMENT_BECOME_ANY_ACCOUNT # 修改为HTTP</span></span><br><span class="line">[receive]</span><br><span class="line">    enableSignedPush = <span class="literal">false</span></span><br><span class="line">[sendemail]</span><br><span class="line">    smtpServer = localhost</span><br><span class="line">[container]</span><br><span class="line">    user = gerrittest</span><br><span class="line">    javaHome = /usr/lib/jvm/java-8-oracle/jre</span><br><span class="line">[sshd]</span><br><span class="line">    listenAddress = *:29418</span><br><span class="line">[httpd]</span><br><span class="line">    listenUrl = proxy-http://192.168.40.130:8081/ <span class="comment"># 修改proxy-http://ip:8081</span></span><br><span class="line">[cache]</span><br><span class="line">    directory = cache</span><br><span class="line">[plugins]</span><br><span class="line">    allowRemoteAdmin = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="3-2-Apacge2配置"><a href="#3-2-Apacge2配置" class="headerlink" title="3.2 Apacge2配置"></a>3.2 Apacge2配置</h4><p>需要使能必要的Apache2模块：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a2enmod proxy_http</span><br><span class="line">a2dissite 000-default</span><br><span class="line">a2enmod ssl          ; <span class="comment"># 可选，HTTPS或SSL需要</span></span><br></pre></td></tr></table></figure><p><code>sudo vim /etc/apache2/apache2.conf</code><br>最后面，添加一下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:8080&gt;</span><br><span class="line">    ServerName 192.168.40.130</span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    ProxyVia Off</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Location <span class="string">"/"</span>&gt;</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName <span class="string">"Gerrit Code Review"</span></span><br><span class="line">        Require valid-user</span><br><span class="line">    AuthBasicProvider file</span><br><span class="line">        AuthUserFile /etc/apache2/passwords</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">    AllowEncodedSlashes On</span><br><span class="line">    ProxyPass /  http://192.168.40.130:8081/ nocanon</span><br><span class="line">    ProxyPassReverse / http://192.168.40.130:8081/ nocanon</span><br><span class="line"></span><br><span class="line">    ErrorLog /var/<span class="built_in">log</span>/apache2/gerrit.error.log</span><br><span class="line">    CustomLog /var/<span class="built_in">log</span>/apache2/gerrit.access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><code>sudo vim /etc/apache2/ports.conf</code><br>添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listen 8080</span><br></pre></td></tr></table></figure><h4 id="3-3-设置Gerrit账户和密码"><a href="#3-3-设置Gerrit账户和密码" class="headerlink" title="3.3 设置Gerrit账户和密码"></a>3.3 设置Gerrit账户和密码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/apache2/passwords</span><br><span class="line">sudo htpasswd -b /etc/apache2/passwords admin 123456 <span class="comment"># administrator</span></span><br><span class="line">sudo htpasswd -b /etc/apache2/passwords gerrit1 123456 <span class="comment"># general usr</span></span><br></pre></td></tr></table></figure><p>启动gerrit &amp; apache2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ~/gerrittest/bin/gerrit.sh restart</span><br><span class="line">sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><h3 id="4、使用Gerrit"><a href="#4、使用Gerrit" class="headerlink" title="4、使用Gerrit"></a>4、使用Gerrit</h3><p>使用浏览器登录<code>http:192.168.40.130:8080</code><br>登录<code>admin</code></p><p>登录成功后，该用户为管理员</p><h4 id="1、SSH登录"><a href="#1、SSH登录" class="headerlink" title="1、SSH登录"></a>1、SSH登录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line">ssh-keygen -t rsa   <span class="comment">#生成ssk key </span></span><br><span class="line">cat ~/.ssh/id_rsa.pub  <span class="comment">#查看ssh key</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBlBpZtMRBI/O077EM0fqrhUrzCRP7yxLMrSfKXMO2BK5pb5ITnnyiEMdurxo31iD9uaF3y/+Yr/H8K4IRtBdHM4ZQseAqmz9Z/X7Q97PkrI8rwocIbs4BUSYap2j/lUzHGcRdzYGR/8XpXCSIwO4OFjsBJZluOKpuNNJUq8o5ZAS7NTQTi83JwgiKQrByuUYPpVqzgf6RGEI0lmesLxRNIbA5FMxfDuKyPIGPvuz4BRayREcwdkeBrJyKVgQf16lPlvJxzCOgnY01xsdCMXEF5Ri2MLYfysYlhehs+UCabLwmTi+Xpe3ioDOe6YnYx7QQzvi/YuXXew8SYwRGKxod gerrit@ubuntu</span><br></pre></td></tr></table></figure><p>使用<code>其他</code>浏览器登录<code>gerrit1</code>账户</p><div align="left"><p><img src="/img/note_08/01.png" alt></p></div><p></p><p>验证ssh key是否配置成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh gerrit1@192.168.40.130 -p 29418</span><br></pre></td></tr></table></figure><p>出现下面内容表示成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ****    Welcome to Gerrit Code Review    ****</span><br><span class="line"></span><br><span class="line">  Hi gerrit1, you have successfully connected over SSH.</span><br><span class="line"></span><br><span class="line">  Unfortunately, interactive shells are disabled.</span><br><span class="line">  To <span class="built_in">clone</span> a hosted Git repository, use:</span><br><span class="line"></span><br><span class="line">  git <span class="built_in">clone</span> ssh://gerrit1@192.168.40.130:29418/REPOSITORY_NAME.git</span><br><span class="line"></span><br><span class="line">Connection to 192.168.40.130 closed.</span><br></pre></td></tr></table></figure><h4 id="2、添加项目"><a href="#2、添加项目" class="headerlink" title="2、添加项目"></a>2、添加项目</h4><p>使用<code>admin</code>账户，在gerrit管理页面进行添加账户</p><div align="left"><p><img src="/img/note_08/02.png" alt></p></div><p></p><h4 id="3、代码修改"><a href="#3、代码修改" class="headerlink" title="3、代码修改"></a>3、代码修改</h4><p>拉取代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir code</span><br><span class="line"><span class="built_in">cd</span> code</span><br><span class="line">git <span class="built_in">clone</span> ssh://gerrit1@192.168.40.130:29418/demo</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_08/03.png" alt></p></div><p></p><p>更新git hooks</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitdir=$(git rev-parse --git-dir); scp -p -P 29418 gerrit1@192.168.40.130:hooks/commit-msg <span class="variable">$&#123;gitdir&#125;</span>/hooks/</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  <span class="string">"init code"</span>&gt;ReadMe.txt  <span class="comment"># 创建新文件</span></span><br><span class="line">git add ReadMe.txt  <span class="comment"># 添加新文件</span></span><br><span class="line">git commit -m <span class="string">"init code commit"</span></span><br></pre></td></tr></table></figure><p><code>git commit</code>出错，提示需要设置<code>user.email</code>,<code>user.name</code>这里需要注意，先设置<code>gerrit.config</code>的<code>sendemail</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/gerrittest/etc/gerrit.config</span><br></pre></td></tr></table></figure><p>修改<code>sendemail</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[sendemail]</span><br><span class="line">        <span class="built_in">enable</span> = <span class="literal">true</span></span><br><span class="line">        smtpServer = smtp.163.com</span><br><span class="line">        smtpServerPort = 465</span><br><span class="line">        smtpEncryption = ssl</span><br><span class="line">        smtpUser = 【邮箱账号】</span><br><span class="line">        smtpPass = 【授权密码】  <span class="comment">#授权密码</span></span><br><span class="line">        sslVerify = <span class="literal">false</span></span><br><span class="line">        from = 【邮箱账号】</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/gerrittest/etc/secure.config</span><br></pre></td></tr></table></figure><p>添加<code>sendemail</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[sendemail]</span><br><span class="line">        smtpPass = 【授权密码】</span><br></pre></td></tr></table></figure><p>之后重启<code>gerrit</code>，<code>apache</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/gerrittest/bin/gerrit.sh restart</span><br><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>随后设置<code>gerrit1</code>的<code>user.email</code>,<code>user.name</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"gerrit205@163.com"</span></span><br><span class="line">git config --global user.name <span class="string">"gerrit1"</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line">git push origin HEAD:refs/<span class="keyword">for</span>/master</span><br></pre></td></tr></table></figure><p><code>git push</code>出现错误,这里需要<code>gerrit1</code>登录gerrit管理页面，设置<code>name</code>和<code>email</code></p><div align="left"><p><img src="/img/note_08/07.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_08/08.png" alt></p></div><br>随后会收到通过<code>gerrit.config</code>中添加的邮箱发送的邮件，复制收到的链接，在<code>gerrit1</code>所登录的浏览器，进行验证。随后就可看到上图中显示的邮箱。<p></p><p>随后通过<code>admin</code>将<code>gerrit1</code>添加到<code>Administrators</code>组:</p><div align="left"><p><img src="/img/note_08/04.png" alt></p></div><p></p><p>之后重新<code>git push</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin HEAD:refs/<span class="keyword">for</span>/master</span><br></pre></td></tr></table></figure><p>成功如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 284 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: Processing changes: new: 1, <span class="keyword">done</span>    </span><br><span class="line">remote: </span><br><span class="line">remote: New Changes:</span><br><span class="line">remote:   http://192.168.40.130:8081/<span class="comment">#/c/demo/+/21 init code commit</span></span><br><span class="line">remote: </span><br><span class="line">To ssh://gerrit1@192.168.40.130:29418/demo</span><br><span class="line"> * [new branch]      HEAD -&gt; refs/<span class="keyword">for</span>/master</span><br></pre></td></tr></table></figure><p>通过<code>gerrit1</code>进入gerrit管理页面</p><div align="left"><p><img src="/img/note_08/05.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_08/06.png" alt></p></div><br>添加<code>Reviewers</code><p></p><div align="left"><p><img src="/img/note_08/09.png" alt></p></div><p></p><p><code>gerrit1</code>整个代码就提交完成了，剩下的就是Reviewers人员进行代码评审和入库。<br>这里是<code>admin</code>用户进行入库</p><div align="left"><p><img src="/img/note_08/10.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_08/11.png" alt></p></div><p></p><p>整个代码就入库完成。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gerrit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gerrit服务器的搭建与使用</title>
      <link href="/2019/05/31/%E7%AC%94%E8%AE%B0/09Gerrit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/05/31/%E7%AC%94%E8%AE%B0/09Gerrit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><h3 id="1、java"><a href="#1、java" class="headerlink" title="1、java"></a>1、java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:openjdk-r/ppa</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h3 id="2、git"><a href="#2、git" class="headerlink" title="2、git"></a>2、git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="3、apache2"><a href="#3、apache2" class="headerlink" title="3、apache2"></a>3、apache2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/apach2 start  <span class="comment">#是否可正常启动</span></span><br></pre></td></tr></table></figure><h3 id="4、下载gerrit"><a href="#4、下载gerrit" class="headerlink" title="4、下载gerrit"></a>4、下载gerrit</h3><p><a href="https://pan.baidu.com/s/1GwVTqH_YVLO38_PYUpusXw" target="_blank" rel="noopener">gerrit.2.15.2百度盘</a> 提取码：otlq<br><a href="https://www.gerritcodereview.com/2.15.html" target="_blank" rel="noopener">官方下载地址</a></p><h2 id="二、搭建Gerrit"><a href="#二、搭建Gerrit" class="headerlink" title="二、搭建Gerrit"></a>二、搭建Gerrit</h2><h3 id="1、新建用户"><a href="#1、新建用户" class="headerlink" title="1、新建用户"></a>1、新建用户</h3><p>使用独立的账户，来配置gerrit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser gerrit</span><br></pre></td></tr></table></figure><p>将<code>gerrit</code>加入到<code>sudo</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /etc/sudoers</span><br><span class="line">sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>添加下面一句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerrit  ALL=(ALL:ALL)ALL</span><br></pre></td></tr></table></figure><p>切换用户为<code>gerrit</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su gerrit</span><br></pre></td></tr></table></figure><h3 id="2、安装gerrit"><a href="#2、安装gerrit" class="headerlink" title="2、安装gerrit"></a>2、安装gerrit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar gerrit.2.15.2.war init --batch --dev -d ~/gerrittest</span><br></pre></td></tr></table></figure><p>出现<code>Starting Gerrit Code Review: OK</code>，表示<code>Gerrit</code>服务正在运行。</p><h3 id="3、反向代理"><a href="#3、反向代理" class="headerlink" title="3、反向代理"></a>3、反向代理</h3><h4 id="3-1、修改gerrit配置"><a href="#3-1、修改gerrit配置" class="headerlink" title="3.1、修改gerrit配置"></a>3.1、修改gerrit配置</h4><p><code>vim gerrittest/etc/gerrit.config</code>:<br>修改为以下内容<br><code>192.168.40.130</code>为本机ip地址，通过<code>ifconfig</code>可查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[gerrit]</span><br><span class="line">    basePath = git</span><br><span class="line">    serverId = c5447167-daf0-49e2-a79f-e154d0841461</span><br><span class="line">    canonicalWebUrl = http://192.168.40.130:8081/  <span class="comment"># 修改为ip:8081</span></span><br><span class="line">[database]</span><br><span class="line">    <span class="built_in">type</span> = h2</span><br><span class="line">    database = /home/gerrittest/gerrit/db/ReviewDB</span><br><span class="line">[noteDb <span class="string">"changes"</span>]</span><br><span class="line">    disableReviewDb = <span class="literal">true</span></span><br><span class="line">    primaryStorage = note db</span><br><span class="line">    <span class="built_in">read</span> = <span class="literal">true</span></span><br><span class="line">    sequence = <span class="literal">true</span></span><br><span class="line">    write = <span class="literal">true</span></span><br><span class="line">[index]</span><br><span class="line">    <span class="built_in">type</span> = LUCENE</span><br><span class="line">[auth]</span><br><span class="line">    <span class="built_in">type</span> = HTTP <span class="comment">#DEVELOPMENT_BECOME_ANY_ACCOUNT # 修改为HTTP</span></span><br><span class="line">[receive]</span><br><span class="line">    enableSignedPush = <span class="literal">false</span></span><br><span class="line">[sendemail]</span><br><span class="line">    smtpServer = localhost</span><br><span class="line">[container]</span><br><span class="line">    user = gerrittest</span><br><span class="line">    javaHome = /usr/lib/jvm/java-8-oracle/jre</span><br><span class="line">[sshd]</span><br><span class="line">    listenAddress = *:29418</span><br><span class="line">[httpd]</span><br><span class="line">    listenUrl = proxy-http://192.168.40.130:8081/ <span class="comment"># 修改proxy-http://ip:8081</span></span><br><span class="line">[cache]</span><br><span class="line">    directory = cache</span><br><span class="line">[plugins]</span><br><span class="line">    allowRemoteAdmin = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="3-2-Apacge2配置"><a href="#3-2-Apacge2配置" class="headerlink" title="3.2 Apacge2配置"></a>3.2 Apacge2配置</h4><p>需要使能必要的Apache2模块：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a2enmod proxy_http</span><br><span class="line">a2dissite 000-default</span><br><span class="line">a2enmod ssl          ; <span class="comment"># 可选，HTTPS或SSL需要</span></span><br></pre></td></tr></table></figure><p><code>sudo vim /etc/apache2/apache2.conf</code><br>最后面，添加一下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:8080&gt;</span><br><span class="line">    ServerName 192.168.40.130</span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    ProxyVia Off</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Location <span class="string">"/"</span>&gt;</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName <span class="string">"Gerrit Code Review"</span></span><br><span class="line">        Require valid-user</span><br><span class="line">    AuthBasicProvider file</span><br><span class="line">        AuthUserFile /etc/apache2/passwords</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">    AllowEncodedSlashes On</span><br><span class="line">    ProxyPass /  http://192.168.40.130:8081/ nocanon</span><br><span class="line">    ProxyPassReverse / http://192.168.40.130:8081/ nocanon</span><br><span class="line"></span><br><span class="line">    ErrorLog /var/<span class="built_in">log</span>/apache2/gerrit.error.log</span><br><span class="line">    CustomLog /var/<span class="built_in">log</span>/apache2/gerrit.access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><code>sudo vim /etc/apache2/ports.conf</code><br>添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listen 8080</span><br></pre></td></tr></table></figure><h4 id="3-3-设置Gerrit账户和密码"><a href="#3-3-设置Gerrit账户和密码" class="headerlink" title="3.3 设置Gerrit账户和密码"></a>3.3 设置Gerrit账户和密码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/apache2/passwords</span><br><span class="line">sudo htpasswd -b /etc/apache2/passwords admin 123456 <span class="comment"># administrator</span></span><br><span class="line">sudo htpasswd -b /etc/apache2/passwords gerrit1 123456 <span class="comment"># general usr</span></span><br></pre></td></tr></table></figure><p>启动gerrit &amp; apache2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ~/gerrittest/bin/gerrit.sh restart</span><br><span class="line">sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><h3 id="4、使用Gerrit"><a href="#4、使用Gerrit" class="headerlink" title="4、使用Gerrit"></a>4、使用Gerrit</h3><p>使用浏览器登录<code>http:192.168.40.130:8080</code><br>登录<code>admin</code></p><p>登录成功后，该用户为管理员</p><h4 id="1、SSH登录"><a href="#1、SSH登录" class="headerlink" title="1、SSH登录"></a>1、SSH登录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line">ssh-keygen -t rsa   <span class="comment">#生成ssk key </span></span><br><span class="line">cat ~/.ssh/id_rsa.pub  <span class="comment">#查看ssh key</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBlBpZtMRBI/O077EM0fqrhUrzCRP7yxLMrSfKXMO2BK5pb5ITnnyiEMdurxo31iD9uaF3y/+Yr/H8K4IRtBdHM4ZQseAqmz9Z/X7Q97PkrI8rwocIbs4BUSYap2j/lUzHGcRdzYGR/8XpXCSIwO4OFjsBJZluOKpuNNJUq8o5ZAS7NTQTi83JwgiKQrByuUYPpVqzgf6RGEI0lmesLxRNIbA5FMxfDuKyPIGPvuz4BRayREcwdkeBrJyKVgQf16lPlvJxzCOgnY01xsdCMXEF5Ri2MLYfysYlhehs+UCabLwmTi+Xpe3ioDOe6YnYx7QQzvi/YuXXew8SYwRGKxod gerrit@ubuntu</span><br></pre></td></tr></table></figure><p>使用<code>其他</code>浏览器登录<code>gerrit1</code>账户</p><div align="left"><p><img src="/img/note_08/01.png" alt></p></div><p></p><p>验证ssh key是否配置成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh gerrit1@192.168.40.130 -p 29418</span><br></pre></td></tr></table></figure><p>出现下面内容表示成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ****    Welcome to Gerrit Code Review    ****</span><br><span class="line"></span><br><span class="line">  Hi gerrit1, you have successfully connected over SSH.</span><br><span class="line"></span><br><span class="line">  Unfortunately, interactive shells are disabled.</span><br><span class="line">  To <span class="built_in">clone</span> a hosted Git repository, use:</span><br><span class="line"></span><br><span class="line">  git <span class="built_in">clone</span> ssh://gerrit1@192.168.40.130:29418/REPOSITORY_NAME.git</span><br><span class="line"></span><br><span class="line">Connection to 192.168.40.130 closed.</span><br></pre></td></tr></table></figure><h4 id="2、添加项目"><a href="#2、添加项目" class="headerlink" title="2、添加项目"></a>2、添加项目</h4><p>使用<code>admin</code>账户，在gerrit管理页面进行添加账户</p><div align="left"><p><img src="/img/note_08/02.png" alt></p></div><p></p><h4 id="3、代码修改"><a href="#3、代码修改" class="headerlink" title="3、代码修改"></a>3、代码修改</h4><p>拉取代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir code</span><br><span class="line"><span class="built_in">cd</span> code</span><br><span class="line">git <span class="built_in">clone</span> ssh://gerrit1@192.168.40.130:29418/demo</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_08/03.png" alt></p></div><p></p><p>更新git hooks</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitdir=$(git rev-parse --git-dir); scp -p -P 29418 gerrit1@192.168.40.130:hooks/commit-msg <span class="variable">$&#123;gitdir&#125;</span>/hooks/</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  <span class="string">"init code"</span>&gt;ReadMe.txt  <span class="comment"># 创建新文件</span></span><br><span class="line">git add ReadMe.txt  <span class="comment"># 添加新文件</span></span><br><span class="line">git commit -m <span class="string">"init code commit"</span></span><br></pre></td></tr></table></figure><p><code>git commit</code>出错，提示需要设置<code>user.email</code>,<code>user.name</code>这里需要注意，先设置<code>gerrit.config</code>的<code>sendemail</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/gerrittest/etc/gerrit.config</span><br></pre></td></tr></table></figure><p>修改<code>sendemail</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[sendemail]</span><br><span class="line">        <span class="built_in">enable</span> = <span class="literal">true</span></span><br><span class="line">        smtpServer = smtp.163.com</span><br><span class="line">        smtpServerPort = 465</span><br><span class="line">        smtpEncryption = ssl</span><br><span class="line">        smtpUser = 【邮箱账号】</span><br><span class="line">        smtpPass = 【授权密码】  <span class="comment">#授权密码</span></span><br><span class="line">        sslVerify = <span class="literal">false</span></span><br><span class="line">        from = 【邮箱账号】</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/gerrittest/etc/secure.config</span><br></pre></td></tr></table></figure><p>添加<code>sendemail</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[sendemail]</span><br><span class="line">        smtpPass = 【授权密码】</span><br></pre></td></tr></table></figure><p>之后重启<code>gerrit</code>，<code>apache</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/gerrittest/bin/gerrit.sh restart</span><br><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>随后设置<code>gerrit1</code>的<code>user.email</code>,<code>user.name</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"gerrit205@163.com"</span></span><br><span class="line">git config --global user.name <span class="string">"gerrit1"</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line">git push origin HEAD:refs/<span class="keyword">for</span>/master</span><br></pre></td></tr></table></figure><p><code>git push</code>出现错误,这里需要<code>gerrit1</code>登录gerrit管理页面，设置<code>name</code>和<code>email</code></p><div align="left"><p><img src="/img/note_08/07.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_08/08.png" alt></p></div><br>随后会收到通过<code>gerrit.config</code>中添加的邮箱发送的邮件，复制收到的链接，在<code>gerrit1</code>所登录的浏览器，进行验证。随后就可看到上图中显示的邮箱。<p></p><p>随后通过<code>admin</code>将<code>gerrit1</code>添加到<code>Administrators</code>组:</p><div align="left"><p><img src="/img/note_08/04.png" alt></p></div><p></p><p>之后重新<code>git push</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin HEAD:refs/<span class="keyword">for</span>/master</span><br></pre></td></tr></table></figure><p>成功如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 284 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: Processing changes: new: 1, <span class="keyword">done</span>    </span><br><span class="line">remote: </span><br><span class="line">remote: New Changes:</span><br><span class="line">remote:   http://192.168.40.130:8081/<span class="comment">#/c/demo/+/21 init code commit</span></span><br><span class="line">remote: </span><br><span class="line">To ssh://gerrit1@192.168.40.130:29418/demo</span><br><span class="line"> * [new branch]      HEAD -&gt; refs/<span class="keyword">for</span>/master</span><br></pre></td></tr></table></figure><p>通过<code>gerrit1</code>进入gerrit管理页面</p><div align="left"><p><img src="/img/note_08/05.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_08/06.png" alt></p></div><br>添加<code>Reviewers</code><p></p><div align="left"><p><img src="/img/note_08/09.png" alt></p></div><p></p><p><code>gerrit1</code>整个代码就提交完成了，剩下的就是Reviewers人员进行代码评审和入库。<br>这里是<code>admin</code>用户进行入库</p><div align="left"><p><img src="/img/note_08/10.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_08/11.png" alt></p></div><p></p><p>整个代码就入库完成。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gerrit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程</title>
      <link href="/2018/09/03/%E7%AC%94%E8%AE%B0/09%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/09/03/%E7%AC%94%E8%AE%B0/09%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ID为0的进程通常是调用进程，常被称为交换进程。还进程是内核的一部分，不执行任何磁盘上的程序，因此称为系统进行。<br>ID为1通常是init进程，在自举过程结束时由内核调用。<br>ID为2时页守护进程，负责虚拟存储器系统的分页操作</p><p>子进程继承父进程的属性：</p><ul><li>共享文件： 父进程的所有打开文件描述符都被复制到子进程中</li><li>实际用户ID、实际组ID、有效用户ID、有效组ID</li><li>附属组ID</li><li>进程组ID</li><li>会话ID</li><li>设备用户ID标志和设备组ID标志</li><li>当前工作目录</li><li>根目录</li><li>文件模式创建屏蔽字</li><li>信号屏蔽和安排</li><li>对任一打开文件描述符的执行时关闭（close-on-exec）标志</li><li>环境</li><li>连接的共享存储段</li><li>存储映射</li><li>资源限制</li></ul><p>子进程和父进程的区别：</p><ul><li>fork的返回值不同</li><li>进程ID不同</li><li>两个进程的父进程ID不同：子进程的父进程ID时创建它的进程ID，而父进程的的父进程ID则不变</li><li>子进程的tms_utime、tms_stime、tms_cutime和tms_ustime的值设置为0</li><li>子进程不继承父进程设置的文件锁</li><li>子进程的未处理闹钟被清楚。</li><li>子进程的未处理信号集设备为空寂。</li></ul><p>fork的两种用法：<br>-（1）、父进程希望复制自己，使父进程和子进程同时执行不同的代码段。这在网络服务进程中时常用的–父进程等待客户端的服务请求。当这种请求到达时，父进程调用fork，使子进程处理此请求。父进程则继续等待下一个服务请求。<br>-（2）、一个进程要执行一个不同的程序。这对shell是常见的情况。在这种情况下，子进程从fork返回后立即调用exec</p><p>某些操作系统将第2中用法的两个操作（fork之后执行exec）组合成一个操作，吃呢各位spawn。unix系统将这两个操作分析，因为在很多场合需要单独使用fork，其后并不是跟随exec。另外，将这两个操作分开，使得子进程在fork和exec之间可以更改自己的属性，如I/O重定向，用户ID、信号安排等。</p><p>vfork<br>exit<br>_exit</p><p>当一个进程正常或异常终止时，内核就会想起父进程发生SIGCHLD信号。因为子进程终止是异步事件（这可以在父进程允许的任何时候发生）</p><p>exec</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程控制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程</title>
      <link href="/2018/08/22/%E7%AC%94%E8%AE%B0/07%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/08/22/%E7%AC%94%E8%AE%B0/07%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>线程同步</p><ul><li>互斥量：确保同一时间只有一个线程访问数据</li><li>读写锁：同一时间只有一个线程写数据，允许多个线程同时读数据</li><li>条件变量：确保线程的先后顺序</li><li>自旋锁：用于cpu的占用较少</li><li>屏障</li></ul><p>如何使用多个控制线程在单独环境中执行多个任务。一个进程中的所有线程都可以访问该进程的组成部件（文件描述符和内存）。</p><p>1、简化处理异步事件的code,每个线程在进程事件处理时可以采用同步编程模式。<br>2、多个线程自动地可以访问相同地址的存储地址空间就和文件描述符。<br>3、问题分解从而提高程序的吞吐量。多线程任务交叉进行。<br>4、交互的程序同样可以通过使用多线程来改善想要时间，多线程可以吧程序中处理用户输入输出的部分与其他部分分开。</p><p>每个线程都包含有表示执行环境所必须的信息，其中包括进程中表示线程的线程ID、一组寄存器值、栈、调度优先级和策略、信号屏蔽字、errno变量以及线程私有数据。<br>一个进程的所有信息对该进程的所有线程都是共享的，包括可执行程序代码、程序的全局内存和堆内存、栈以及文件描述符。</p><h2 id="线程ID"><a href="#线程ID" class="headerlink" title="线程ID"></a><strong>线程ID</strong></h2><p>线程ID。pthread_t数据类型表示。不能把它作为整数处理。必须使用函数来对两个线程ID进行比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_equal</span><span class="params">(<span class="keyword">pthread_t</span> tid1, <span class="keyword">pthread_t</span> tid2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：若相等，返回非0数值；否则，返回。</span></span><br></pre></td></tr></table></figure><p>线程中通过调用pthread_self函数获取自身的线程ID</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">pthread_t</span> pthread_self(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：调用线程的线程ID</span></span><br></pre></td></tr></table></figure><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a><strong>线程创建</strong></h2><p>每一个进程只有一个控制线程。新增的线程可以通过调用pthread_cerate函数创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_create</span><span class="params">(<span class="keyword">pthread_t</span> *<span class="keyword">restrict</span> tidp,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line">                     void *(*start_rtn)(void *), void *restrict arg );</span><br><span class="line"><span class="comment">// 返回值：若成功，返回0,；否则，返回错误编号</span></span><br></pre></td></tr></table></figure><p>当pthread_create成功返回时，新创建线程的线程ID会被设备成tidp指向的内存单元。attr参数用于定制各种不同的线程属性。当前可设置为NULL,创建一个具有默认属性的线程。<br>新创建的线程从start_rtn函数的地址开始运行，该函数只有一个屋类型指针参数arg,如果需要向start_rtn函数传递的参数有一个以上，那么需要把这些参数放到一个结构中，然后把这个结构的地址作为arg参数传入。</p><p>线程创建时并不能保证那个线程会先运行：是新创建的线程，还是调用线程。先创建的线程可以访问进程的地址空间，并且集成调用线程的浮点环境和信号屏蔽字，但是该线程的挂起信号集会被消除。<br>pthread函数在调用失败时通常会返回错误码errno，每个线程都会提供errno的副本。</p><p>例子： 打印线程ID： 进程ID、新线程的线程ID以及出事线程的线程ID.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pthread_test1.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_t</span> ntid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printids</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line">    pid = getpid();</span><br><span class="line"></span><br><span class="line">    tid = pthread_self();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s pid %lu tid %lu (0x%lx)\n"</span>,s,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)pid, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)tid, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)tid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thr_fn</span><span class="params">(<span class="keyword">void</span> *agr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printids(<span class="string">"new thread:"</span>);</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">    err = pthread_create(&amp;ntid, <span class="literal">NULL</span>,thr_fn, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't create thread,err:%d\n"</span>,err);</span><br><span class="line">    &#125;</span><br><span class="line">    printids(<span class="string">"main thread:"</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc pthread_test1.c -l pthread</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_07/01.png" alt></p></div><p></p><h2 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a><strong>线程终止</strong></h2><p>如果进程中任意线程调用exit、_Exit和_exit，那么整个进程就会终止。<br>单个进程可以通过3中方式退出，因此可以在不终止整个进程的情况下，停止它的控制流：<br>（1）、线程可以简单地从启动例程中返回，返回值是线程的退出码。<br>（2）、线程可以被同一进程中的其他线程取消。<br>（3）、线程调用pthread_exit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="keyword">void</span> *rval_ptr)</span></span></span><br></pre></td></tr></table></figure><p>rval_ptr参数是一个无类型指针，与传给启动例程的单个参数类似。进程中其他线程也可以通过调用pthread_join函数访问到这个指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">void</span> **rval_ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：若成功，返回0；否则，返回错误编号</span></span><br></pre></td></tr></table></figure><p>调用线程将会一直阻塞，直到指定的线程调用pthread_exit、从启动例程中返回或者被取消。如果线程简单地从它的启动例程返回，rval_ptr就包含返回码。如果线程被取消，由rval_ptr指定的内存单元就设备为PTHREAD_CANCELED。<br>调用pthread_join自动把线程置于分离状态，这样资源就可以恢复。如果线程已经处于分离状态，pthread_join调用就会失败，返回EINVAL。<br>如果对线程的返回值不感兴趣，可以把rval_ptr设置为NULL。这种情况调用pthread_join函数可以等待指定的线程终止，但并不获取线程的终止状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thr_fn1</span><span class="params">(<span class="keyword">void</span> *agr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread 1 returning\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *)<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thr_fn2</span><span class="params">(<span class="keyword">void</span> *agr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread 2 exiting\n"</span>);</span><br><span class="line">    pthread_exit((<span class="keyword">void</span> *)<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> tid1,tid2;</span><br><span class="line">    <span class="keyword">void</span> *tret;</span><br><span class="line"></span><br><span class="line">    err = pthread_create(&amp;tid1, <span class="literal">NULL</span>, thr_fn1, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't create thread 1\n"</span>);</span><br><span class="line"></span><br><span class="line">    err = pthread_create(&amp;tid2, <span class="literal">NULL</span>, thr_fn2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't create thread 2\n"</span>);</span><br><span class="line"></span><br><span class="line">    err = pthread_join(tid1, &amp;tret);</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't join with thread 1\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread 1 exit code %ld\n"</span>,(<span class="keyword">long</span>)tret);</span><br><span class="line"></span><br><span class="line">    err = pthread_join(tid2, &amp;tret);</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't join with thread 2\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread 2 exit code %ld\n"</span>,(<span class="keyword">long</span>)tret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_07/02.png" alt></p></div><p></p><p>以下程序给出了用自动变量（分配在栈上）作为pthread_exit的参数时出现问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printfoo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s,<span class="keyword">const</span> struct foo *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" structure at 0x%lx\n"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" foo.a = %d\n"</span>, fp-&gt;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" foo.b = %d\n"</span>, fp-&gt;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" foo.c = %d\n"</span>, fp-&gt;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" foo.d = %d\n"</span>, fp-&gt;d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thr_fn1</span><span class="params">(<span class="keyword">void</span> *agr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">foo</span> <span class="title">foo</span>=&#123;</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    printfoo(<span class="string">"thread 1:\n"</span>, &amp;foo);</span><br><span class="line">    pthread_exit((<span class="keyword">void</span> *)&amp;foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thr_fn2</span><span class="params">(<span class="keyword">void</span> *agr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread 2 ID is %lu\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)pthread_self());</span><br><span class="line">    pthread_exit((<span class="keyword">void</span> *)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> tid1,tid2;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">fp</span>;</span></span><br><span class="line"></span><br><span class="line">    err = pthread_create(&amp;tid1, <span class="literal">NULL</span>, thr_fn1, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't create thread 1\n"</span>);</span><br><span class="line">    err = pthread_join(tid1, (<span class="keyword">void</span> *)&amp;fp);</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't join with thread 1\n"</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"parent starting second thread\n"</span>);</span><br><span class="line"></span><br><span class="line">    err = pthread_create(&amp;tid2, <span class="literal">NULL</span>, thr_fn2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't create thread 2\n"</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    printfoo(<span class="string">"parent:\n"</span>,fp);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_07/03.png" alt></p></div><p></p><p>线程可以通过pthread_cancel函数来请求取消同一进程中的其他线程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cancel</span><span class="params">(<span class="keyword">pthread_t</span> tid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：如成功，返回0；否则，返回错误编码。</span></span><br></pre></td></tr></table></figure><p>注意：pthead_cancel并不等待线程终止，它仅仅提出请求。<br>线程可以安排它退出时需要调用的函数，这样的函数称为<code>线程清理处理程序（thread cleanup handler）</code>。一个线程可以建立朵儿清理处理程序。处理程序记录在栈中，也就是说，它们的执行顺序与它们注册时相反。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">void pthread_cleanup_push(void (*rtn)(void *), void *arg);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_cleanup_pop</span><span class="params">(<span class="keyword">int</span> execute)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a><strong>线程同步</strong></h2><p>两个或多个线程在同一时间修改同一变量时，也需要进行同步，增量操作通常分解为以下3步：<br>（1）、从内存单元读入寄存器。<br>（2）、在寄存器中对变量做增量操作。<br>（3）、把新的值写回内存单元。</p><h3 id="1、互斥量（mutex）"><a href="#1、互斥量（mutex）" class="headerlink" title="1、互斥量（mutex）"></a><strong>1、互斥量（mutex）</strong></h3><p>本质上为一把锁。<br>互斥变量是用pthead_nutex_t数据类型表示的。在使用互斥变量以前，必须首先对它进行初始化，可以把它设置为常量PTHREAD_MUTEX_INITIALIZER(只适用于静态分配的互斥量)。也可以通过调用pthread_mutex_init函数进行初始化。如果是动态分配互斥量（例如：malloc函数），在是否内存前需要调用pthread_mutex_destory。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *restict attr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个函数的返回值：若成功，返回0；否则，返回错误编号</span></span><br></pre></td></tr></table></figure><p>使用默认的属性初始化互斥量，只需把attr设为NULL。</p><p>对互斥量进行加锁。需要调用pthread_mutex_lock。如果互斥量已经上锁，调用线程将阻塞直到互斥量被解锁。对互斥量解锁，需要调用pthread_mutex_unlock.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有函数的返回值：若成功，返回0；否则，返回错误编号</span></span><br></pre></td></tr></table></figure><p>如果线程不希望被阻塞，它可以使用pthread_mutex_trylock尝试对互斥量进行加锁。如果调用pthread_mutex_trylock时互斥量处于未锁定状态，那么pthread_mutex_trylock将锁住互斥量，不会出现阻塞直接返回0，否则pthread_mutex_trylock就会失败，不能锁住互斥量，返回EBUSY。</p><h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a><strong>避免死锁</strong></h3><p>使用多个互斥量时导致死锁。需要以相同顺序加锁，这样可以避免死锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NHASH 29</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH(id) (((unsigned long)id)%NHASH)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">fh</span>[<span class="title">NHASH</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> hashlock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f_count;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> f_lock;</span><br><span class="line">    <span class="keyword">int</span> f_id;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">f_next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct foo *<span class="title">foo_malloc</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">fp</span>;</span></span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="keyword">if</span> ((fp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct foo)))!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">        fp-&gt;f_count = <span class="number">1</span>;</span><br><span class="line">        fp-&gt;f_id = id;</span><br><span class="line">        <span class="keyword">if</span>(pthread_mutex_init(&amp;fp-&gt;f_lock, <span class="literal">NULL</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">free</span>(fp);</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        idx = HASH(id);</span><br><span class="line">        pthread_muext_lock(&amp;hashlock);</span><br><span class="line">        fp-&gt;f_next = fh[idx];</span><br><span class="line">        fh[idx] = fp;</span><br><span class="line">        pthread_mutex_lock(&amp;fp-&gt;f_lock);</span><br><span class="line">        pthread_mutex_unlock(&amp;hashlock);</span><br><span class="line">         pthread_mutex_unlock(&amp;fp-&gt;f_lock);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo_hold</span><span class="params">(struct foo *fp)</span> <span class="comment">/* add a reference to the object */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;fp-&gt;f_lock);</span><br><span class="line">    fp-&gt;f_count++;</span><br><span class="line">    pthread_mutex_unlock(&amp;fp-&gt;f_lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct foo *<span class="title">foo_find</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">fp</span>;</span></span><br><span class="line">    pthread_mutex_lock(&amp;hashlock);</span><br><span class="line">    <span class="keyword">for</span> (fp=fh[HASH(id)]; fp!=<span class="literal">NULL</span>; fp=fp-&gt;f_next)&#123;</span><br><span class="line">        <span class="keyword">if</span> (fp-&gt;f_id = id)&#123;</span><br><span class="line">            foo_hold(fp);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;hashlock);</span><br><span class="line">    <span class="keyword">return</span>(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子看出,分配函数现在锁住了散列列表锁，把心得结构添加到看散列通中，而且在对散列列表的锁解锁之前，先锁定了新结构中的互斥量。因为新的结构是放在全局列表中的，其他线程可以找到它，所以在初始化完成之后，需要阻塞其他线程尝试访问心机构。<br>foo_find函数锁住散列列表锁，然后所有被请求的结构，如果找到了就增加其引用计数，并返回指向该结构的指针。注意：加锁顺序，先在foo_find函数中锁定散列列表锁，然后再在foo_hole函数中锁定foo结构中的f_lock互斥量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo_rele</span><span class="params">(struct foo *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">tfp</span>;</span></span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;fp-&gt;f_lock);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;f_count == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;fp-&gt;f_lock);</span><br><span class="line">        pthread_mutex_lock(&amp;hashlock);</span><br><span class="line">        pthread_mutex_lock(&amp;fp-&gt;f_lock);</span><br><span class="line">        <span class="comment">/* need to recheck the condition */</span></span><br><span class="line">        <span class="keyword">if</span> (fp-&gt;f_count !=<span class="number">1</span>)&#123;</span><br><span class="line">            fp-&gt;f_count--;</span><br><span class="line">            pthread_mutex_unlock(&amp;fp-&gt;f_lock);</span><br><span class="line">            pthread_mutex_unlock(&amp;hashlock);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*remove from list */</span></span><br><span class="line">        idx = HASH(fp-&gt;f_id);</span><br><span class="line">        tfp = fh[idx];</span><br><span class="line">        <span class="keyword">if</span>(tfp == fp)&#123;</span><br><span class="line">            fh[idx] = fp-&gt;f_next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tfp-&gt;f_next!=fp)</span><br><span class="line">                tfp = tfp-&gt;f_next;</span><br><span class="line">            tfp-&gt;f_next = fp-&gt;f_next;</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_mutex_unlock(&amp;hashlock);</span><br><span class="line">        pthread_mutex_unlock(&amp;fp-&gt;f_lock);</span><br><span class="line">        pthread_mutex_destory(&amp;fp-&gt;f_lock);</span><br><span class="line">        <span class="built_in">free</span>(fp);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fp-&gt;fcount--;</span><br><span class="line">        pthread_mutex_unlock(&amp;fp-&gt;f_lock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foo_rele函数就变得更加复杂，如果是最后一个引用，就需要对这个机构互斥量进行解锁，因为需要从散列表中删除这个结构，这样才可以获取散列表列表锁，然后重新获取结构互斥领。从上一次获取结构互斥量以来我们可能被阻塞着，所以需要重新检查条件，判断是佛还需要释放这个结构。如果另一个线程在我们为满足锁顺序而阻塞时发现了这个结构并对其引用计数+1，那么只需简单地对整个引用计数-1，对所有的东西解锁，然后返回。</p><p>上述锁的方式很复杂，需要重新设计，可以使用散列列表锁来保护结构引用计数，是事情大大简化。结构互斥量可以用于保护foo结构中的其他任何东西。如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo_rele</span><span class="params">(struct foo *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">tfp</span>;</span></span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;hasklock);</span><br><span class="line">    <span class="keyword">if</span>(--fp-&gt;f_count==<span class="number">0</span>)&#123;</span><br><span class="line">        idx = HASH(fp-&gt;f_id);</span><br><span class="line">        tfp = fh[idx];</span><br><span class="line">        <span class="keyword">if</span>(tfp == fp)&#123;</span><br><span class="line">            fh[idx]=fp-&gt;f_next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(tfp-&gt;f_next!=fp)</span><br><span class="line">                tfp = tfp-&gt;f_next;</span><br><span class="line">            tfp-&gt;f_next = fp-&gt;f_next;</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_mutex_unlock(&amp;hashlock);</span><br><span class="line">        pthread_mutex_destroy(&amp;fp-&gt;f_lock);</span><br><span class="line">        <span class="built_in">free</span>(fp);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;hashlock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、函数pthread-mutex-timedlock"><a href="#3、函数pthread-mutex-timedlock" class="headerlink" title="3、函数pthread_mutex_timedlock"></a><strong>3、函数pthread_mutex_timedlock</strong></h3><p>当线程师徒获取一个已加锁的互斥量时，pthread_mutex_timedlock互斥量原语允许绑定线程阻塞时间。pthread_mutex_timedlock函数与pthread_mutex_lock时基本等就按的，但是在达到超时时间值时，pthread_mutex_timedlock不会对互斥量进行加锁，而是返回错误码ETIMEDOUT。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_timedlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, </span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：若成功，返回0；否则，返回错误编号</span></span><br></pre></td></tr></table></figure><h3 id="4、读写锁"><a href="#4、读写锁" class="headerlink" title="4、读写锁"></a><strong>4、读写锁</strong></h3><p>读写锁（reader-writer lock）与互斥量类似，不过读写锁允许更高的并行性。互斥锁要么锁住状态、要么不加锁状态。而且一次只有一个线程可以对其加锁。<br>读写锁可以有3种状态：读模式下加锁状态、写模式下加锁状态、不加锁状态。一次只有一个线程可以占有写模式下的读写锁，但是多个线程可以同时占有读模式的读写锁。<br>读写锁，适用于读次数远大于写模式的情况。读写锁也叫<code>共享互斥锁(shared-exclusiv lock)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_init</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> <span class="keyword">pthread_rwlockattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_destroy</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值：若成功，返回0；否则，返回错误编号。</span></span><br></pre></td></tr></table></figure><p>希望读写锁由默认的属性，可以传一个null指针给attr。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_rdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  <span class="comment">//读模式下锁定读写锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_wrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  <span class="comment">//写模式下锁定读写锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_unlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  <span class="comment">//解锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：如成功,返回0; 否则，返回错误编号</span></span><br></pre></td></tr></table></figure><h3 id="5、带有超时的读写锁"><a href="#5、带有超时的读写锁" class="headerlink" title="5、带有超时的读写锁"></a><strong>5、带有超时的读写锁</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_timedrdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_timedwrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：若成功，返回0；否则，返回错误编号</span></span><br></pre></td></tr></table></figure><h3 id="6、条件变量"><a href="#6、条件变量" class="headerlink" title="6、条件变量"></a><strong>6、条件变量</strong></h3><p>条件变量时线程可用的另一种同步机制。使用条件变量之前，必先对它进行初始化。由pthread_cond_t数据类型表示条件变量。<br>两种方式初始化：1、把常量PTHREAD_COND_INITIALIZER赋给静态分配的条件变量。2、使用pthread_cond_init函数出事哈动态分配的条件变量。<br>使用pthread_cond_destory函数对条件变量进行反初始化（deinitialize）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> <span class="keyword">pthread_condattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_destory</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：若成功，返回0；否则，返回错误编号。</span></span><br></pre></td></tr></table></figure><p>默认attr可以NULL。<br>使用pthread_cond_wait等待条件变真。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_crond_wait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_crond_timedwait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：若成功，返回0；否则，返回错误编号</span></span><br></pre></td></tr></table></figure><p>获取超时的绝对值时间，可以使用以下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maketimeout</span><span class="params">(struct timespec *tsp, <span class="keyword">long</span> minutes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">now</span>;</span></span><br><span class="line">    <span class="comment">/* get the current time */</span></span><br><span class="line">    gettimeofday(&amp;now, <span class="literal">NULL</span>);</span><br><span class="line">    tsp-&gt;tv_sec = now.tv_sec;</span><br><span class="line">    tsp-&gt;tv_nesc = now.tv_usec*<span class="number">1000</span>; <span class="comment">// usec to nsec</span></span><br><span class="line">    <span class="comment">/* add the offset to get timeout value */</span></span><br><span class="line">    tsp-&gt;tv_esc += minutes *<span class="number">60</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>超时到期时时间还没有出现，pthread_cond_timewait将重新获取互斥量，然后返回错误ETIMEDOUT。从pthread_cond_wait或pthread_cond_timedwait调用成功时，现充需要重新计算条件，因为另一个线程可能运行并改变了条件。</p><p>有两个函数可以用于通知线程条件已经满足。pthread_cond_signal函数至少能唤醒一个等待该条件的<code>线程</code>，而pthread_cond_broadcast函数则能唤醒等待该条件的<code>所有线程</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="keyword">pthrad_cond_t</span> *crond)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="keyword">pthrad_cond_t</span> *cond)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：若成功，返回0；否则，返回错误编号。</span></span><br></pre></td></tr></table></figure><p>以上函数为给线程或条件发信号。注意：一定要在改变条件状态以后再给线程发信号。</p><p>结合使用条件变量和互斥量对想成进行同步</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msg</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">/*   ... more stuff here ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg</span> *<span class="title">workq</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_cond_t</span> qready = PTHREAD_COND_INITIALIZER;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> qlock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_msg</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msg</span> *<span class="title">mp</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;qlock);</span><br><span class="line">        <span class="keyword">while</span>(workq == <span class="literal">NULL</span>)</span><br><span class="line">            pthread_cond_wait(&amp;qready, &amp;qlock);</span><br><span class="line">        mp = workq;</span><br><span class="line">        workq = mp-&gt;m_next;</span><br><span class="line">        pthread_mutex_unlock(&amp;qlock);</span><br><span class="line">        <span class="comment">/* now process the message mp */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue_msg</span><span class="params">(struct msg *mp)</span></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;qlock);</span><br><span class="line">    mp-&gt;m_next = workq;</span><br><span class="line">    workq = mp;</span><br><span class="line">    pthread_mutex_unlock(&amp;qlock);</span><br><span class="line">    pthread_cond_signal(&amp;qready);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、自旋锁"><a href="#7、自旋锁" class="headerlink" title="7、自旋锁"></a><strong>7、自旋锁</strong></h3><p>获取锁之前一直处于忙等（自旋）阻塞状态。自旋锁用于以下情况：锁被持有的时间短，而且线程并不希望在重新调度上花费太多的成本。<br>初始化和反初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_init</span><span class="params">(<span class="keyword">pthread_spilock_t</span> *lock, <span class="keyword">int</span> pshared)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_destroy</span><span class="params">(<span class="keyword">pthread_spilock_t</span> *lock)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：若成功，返回0；否则，返回错误编号。</span></span><br></pre></td></tr></table></figure><p>使用pthread_spin_lock或pthread_spin_trylock对自旋锁进行加锁，前者在获取锁之前一直咨询啊，后者如果不能获取锁，就会立即返回EBUSY错误，注意,pthread_spin_trylock不能自旋。不管以何种方式加锁，自旋锁都可以调用pthread_spin_unlock函数解锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_lock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_trylock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_unlock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"></span><br><span class="line">返回值：若成功，返回<span class="number">0</span>；否则，返回错误编号。</span><br></pre></td></tr></table></figure><h3 id="8、屏障"><a href="#8、屏障" class="headerlink" title="8、屏障"></a><strong>8、屏障</strong></h3><p>屏障(barrier)时用户协调多个线程并行工作的同步机制。屏障允许每个线程等待，知道所有的合作线程都到达某一点，然后从该点继续执行。pthread_join函数就是一种屏障，允许一个线程等待，直到另一个线程退出。<br>但是屏障允许任意数量的线程等待，直到所有的线程完成处理工作，而线程不需要退出。所有线程达到屏障后可以继续工作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrier_init</span><span class="params">(<span class="keyword">pthread_barrier_t</span> *<span class="keyword">restrict</span> barrier, <span class="keyword">const</span> <span class="keyword">pthread_barrierattr_t</span> *<span class="keyword">restrict</span> attr, <span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;  <span class="comment">// 为分配资源</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrier_destroy</span><span class="params">(<span class="keyword">pthread_barrier_t</span> *barrier)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：若成功，返回0；否则，返回错误编号。</span></span><br></pre></td></tr></table></figure><p>count指定允许所有线程运行之前，必须到达屏障的线程数目。attr参数指定屏障对象的属性。默认为NULL。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网站收藏</title>
      <link href="/2018/08/01/%E6%9D%82%E8%AF%BB/02%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
      <url>/2018/08/01/%E6%9D%82%E8%AF%BB/02%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><span class="reprint">转</span></p><div class="web_site"></div><h2 id="视频网站"><a href="#视频网站" class="headerlink" title="视频网站"></a><strong><a href="http://ghmagical.com/search/navigation" target="_blank" rel="noopener">视频网站</a></strong></h2><p><a href="https://www.imooc.com/" title="慕课网" target="_blank" rel="noopener">慕课网</a>  <a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a></p><hr><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a><strong>前端</strong></h2><h3 id="开发手册"><a href="#开发手册" class="headerlink" title="开发手册"></a><strong>开发手册</strong></h3><p><a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a>  <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">w3school</a>  <a href="http://css.doyoe.com/" target="_blank" rel="noopener">css参考手册</a></p><h3 id="css"><a href="#css" class="headerlink" title="css"></a><strong>css</strong></h3><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate动画库</a>  <a href="http://www.iecss.com/" target="_blank" rel="noopener">ie默认css</a></p><h3 id="html"><a href="#html" class="headerlink" title="html"></a><strong>html</strong></h3><p><a href="http://www.html5cn.org/" target="_blank" rel="noopener">HTML5中国</a>  <a href="http://html5.360.cn/" target="_blank" rel="noopener">HTML5基地</a>  <a href="http://ask.dcloud.net.cn/explore/" target="_blank" rel="noopener">5+App</a></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a><strong>JavaScript</strong></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/" target="_blank" rel="noopener">MDN(JavaScript)</a>  <a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a>  <a href="https://github.com/jobbole/awesome-javascript-cn/" target="_blank" rel="noopener">JavaScript资源大全</a></p><h3 id="JavaScript库"><a href="#JavaScript库" class="headerlink" title="JavaScript库"></a><strong>JavaScript库</strong></h3><p><a href="http://jquery.com/" target="_blank" rel="noopener">JQuery</a>  <a href="http://www.css88.com/doc/zeptojs_api/#ajax/" target="_blank" rel="noopener">Zepto</a>  <a href="https://angularjs.org/" target="_blank" rel="noopener">AngularJS</a>  <a href="http://docs.kissyui.com/" target="_blank" rel="noopener">KISSY</a>KISSY  <a href="http://extjs.org.cn/" target="_blank" rel="noopener">ExtJS</a></p><h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a><strong>JQuery</strong></h3><p><a href="http://www.jquery123.com/" target="_blank" rel="noopener">jQuery中文文档</a>  <a href="http://www.jq22.com/" target="_blank" rel="noopener">JQuery插件库</a>  <a href="http://www.htmleaf.com/" target="_blank" rel="noopener">JQuery之家</a>  <a href="http://www.htmleaf.com/jQuery/Layout-Interface/201501281289.html" target="_blank" rel="noopener">jQuery Transit 动画库</a>  <a href="http://www.jqueryfuns.com/" target="_blank" rel="noopener">JQueryFuns</a>  <a href="http://www.dowebok.com/77.html" target="_blank" rel="noopener">FullPage.js</a></p><h3 id="移动框架"><a href="#移动框架" class="headerlink" title="移动框架"></a><strong>移动框架</strong></h3><p><a href="http://www.ionic.wang/" target="_blank" rel="noopener">Ionic</a>]<a href="http://www.ionic.wang/" target="_blank" rel="noopener">Ionic</a>  <a href="http://jquerymobile.com/" target="_blank" rel="noopener">JQueryMobile</a>  <a href="http://www.dcloud.io/docs/api/index.shtml" target="_blank" rel="noopener">5+App</a>  <a href="http://framework7.io/" target="_blank" rel="noopener">Framework7</a>  <a href="http://frozenui.github.io/" target="_blank" rel="noopener">FrozenUI</a>  <a href="http://mobileangularui.com/" target="_blank" rel="noopener">Mobile Angular UI</a></p><h3 id="响应式框架"><a href="#响应式框架" class="headerlink" title="响应式框架"></a><strong>响应式框架</strong></h3><p><a href="http://www.bootcss.com/" target="_blank" rel="noopener">Bootstrap</a>  <a href="http://www.material-ui.com/#/" target="_blank" rel="noopener">Material-UI</a> <a href="http://getuikit.com/" target="_blank" rel="noopener">UIkit</a>  <a href="http://amazeui.org/" target="_blank" rel="noopener">AmazeUI</a></p><hr><h2 id="博客社区"><a href="#博客社区" class="headerlink" title="博客社区"></a><strong>博客社区</strong></h2><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a><strong>社区</strong></h3><p><a href="http://www.w3cfuns.com/" target="_blank" rel="noopener">W3Cfuns</a>　<a href="http://blog.csdn.net/web/index.html" target="_blank" rel="noopener">CSDN</a>  <a href="http://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a>  <a href="http://web.jobbole.com/" target="_blank" rel="noopener">伯乐在线</a>  <a href="http://www.oschina.net/" target="_blank" rel="noopener">开源中国</a>  <a href="http://www.ituring.com.cn/" target="_blank" rel="noopener">图灵社区</a>  <a href="https://www.epubit.com/" target="_blank" rel="noopener">异步社区</a>  <a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a></p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a><strong>博客</strong></h3><p><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰</a>  <a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener">张鑫旭</a>  <a href="https://www.biaodianfu.com/" target="_blank" rel="noopener">标点符</a>  <a href="http://ghmagical.com/" target="_blank" rel="noopener">TG</a>  <a href="https://pengloo53.bitcron.com/" target="_blank" rel="noopener">LP’s Blog</a>  <a href="http://www.laozuo.org/myvps" target="_blank" rel="noopener">老左博客</a>  <a href="http://wuzuozhi.com/" target="_blank" rel="noopener">小吴同学</a>  <a href="https://daliuzi.cn/" target="_blank" rel="noopener">大刘子</a>  <a href="https://www.qiansw.com/" target="_blank" rel="noopener">千思网</a>  <a href="https://www.appgao.com/" target="_blank" rel="noopener">应用侠</a></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a><strong>工具</strong></h2><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a><strong>在线工具</strong></h3><p><a href="https://www.biaodianfu.com/editor.html" target="_blank" rel="noopener">开源在线编辑器推荐</a></p><h3 id="Linux工具"><a href="#Linux工具" class="headerlink" title="Linux工具"></a><strong>Linux工具</strong></h3><h3 id="Windows工具"><a href="#Windows工具" class="headerlink" title="Windows工具"></a><strong>Windows工具</strong></h3><p><a href="http://www.internetdownloadmanager.com/" target="_blank" rel="noopener">IDM</a>  <a href="/">Sublime Text</a>  <a href="https://pan.baidu.com/s/11LuWv8bZEO108mWK-JP2BQ" target="_blank" rel="noopener">龙卷风</a>  <a href="https://pan.baidu.com/s/11LuWv8bZEO108mWK-JP2BQ" target="_blank" rel="noopener">文件合并助手</a> <a href="https://pan.baidu.com/s/11LuWv8bZEO108mWK-JP2BQ" target="_blank" rel="noopener">文件合并助手</a>  <a href="https://pan.baidu.com/s/11LuWv8bZEO108mWK-JP2BQ" target="_blank" rel="noopener">IPOP4.1</a>  <a href="https://pan.baidu.com/s/11LuWv8bZEO108mWK-JP2BQ" target="_blank" rel="noopener">WinSCP</a> <a href="https://pan.baidu.com/s/11LuWv8bZEO108mWK-JP2BQ" target="_blank" rel="noopener">XCOM</a></p><h3 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a><strong>Chrome插件</strong></h3><p><a href="https://pan.baidu.com/s/1K9mOaoFwp7v4elLN4_H0GA" title="谷歌访问助手" target="_blank" rel="noopener">谷歌访问助手2.1.9</a>  <a href="http://shouqu.me/how.html" target="_blank" rel="noopener">收趣</a>  <a href="./">OneTab</a>  <a href="./">ColorZilla</a>  <a href="https://www.baidufe.com/fehelper" target="_blank" rel="noopener">FeHelper</a>  <a href="https://github.com/jinliming2/Chrome-Charset)" target="_blank" rel="noopener">Charset</a>  <a href="http://www.internetdownloadmanager.com/" target="_blank" rel="noopener">IDM</a>  <a href="./">ColorZilla</a>  <a href="https://pan.baidu.com/s/1K9mOaoFwp7v4elLN4_H0GA" title="为浏览器提供用户脚本支持。 百度网盘转IDM下载" target="_blank" rel="noopener">暴力猴</a></p><h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a><strong>其他工具</strong></h3><p><a href="https://pan.baidu.com/s/1YcZItb6KXlmOP8tk3cslEA)" target="_blank" rel="noopener">Synergy1.8.2</a>  <a href="https://github.com/akaxincom/openzaly" title="私有的聊天服务器，即自己搭建类似 QQ 的聊天服务" target="_blank" rel="noopener">openzaly</a></p><hr><h2 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a><strong>电子书</strong></h2><h3 id="专业书籍"><a href="#专业书籍" class="headerlink" title="专业书籍"></a><strong>专业书籍</strong></h3><p><a href="http://www.kancloud.cn/" target="_blank" rel="noopener">看云</a>  <a href="http://www.aseoe.com/webook/" target="_blank" rel="noopener">爱思源</a>  <a href="http://www.jb51.net/books/" target="_blank" rel="noopener">脚本之家</a></p><h3 id="其他书籍"><a href="#其他书籍" class="headerlink" title="其他书籍"></a><strong>其他书籍</strong></h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h3><p><a href="https://bookfere.com/" target="_blank" rel="noopener">书伴</a></p><hr><h2 id="常用APP"><a href="#常用APP" class="headerlink" title="常用APP"></a><strong>常用APP</strong></h2><p><a href="./">藏书馆</a>  <a href="./">一个木函</a>  <a href="./">时光相册</a>  <a href="./">ES文件浏览器</a>  <a href="./">夸克浏览器</a>  <a href="./">不要音乐</a>  <a href="https://www.airdroid.com/zh-cn/index.html" title="远程管控" target="_blank" rel="noopener">AirDroid</a>  <a href="https://pan.baidu.com/s/1vSA_6Sh5Z3JGQUBClv6qyw" title="APP使用情况统计" target="_blank" rel="noopener">UBhind</a>  <a href="https://pan.baidu.com/s/1vSA_6Sh5Z3JGQUBClv6qyw" title="全面屏手势" target="_blank" rel="noopener">流体手势</a>  <a href="https://pan.baidu.com/s/1vSA_6Sh5Z3JGQUBClv6qyw" title="会用则功能很强大，不会用咋处处BUG,自己体会" target="_blank" rel="noopener">应用控制器</a></p><hr><h2 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a><strong>常用网站</strong></h2><p><a href="http://www.right.com.cn/forum/forum.php" title="flipped205,F" target="_blank" rel="noopener">恩山无线论坛</a> <a href="http://www.21ic.com/" title="fanxingyiye" target="_blank" rel="noopener">21ic</a>    <a href="http://www.ydss.cn/" target="_blank" rel="noopener">移动叔叔</a></p>]]></content>
      
      <categories>
          
          <category> 杂读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 锁</title>
      <link href="/2018/07/20/%E7%AC%94%E8%AE%B0/0dLinux%E9%94%81/"/>
      <url>/2018/07/20/%E7%AC%94%E8%AE%B0/0dLinux%E9%94%81/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="记录锁（fcntl）"><a href="#记录锁（fcntl）" class="headerlink" title="记录锁（fcntl）"></a><strong>记录锁（fcntl）</strong></h2><p>　两个进程同时对文件进行操作：当一个进程正在读或者修改文件的某个部分时，使用记录锁可以阻止其他进程修改同一文件区。另一术语<code>字节范围锁</code>。<br>fcntl函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> cmd, ...<span class="comment">/*struct flock *flockptr */</span>)</span></span>;  <span class="comment">// 返回值：若成功，依赖于cmd,否则，返回-1</span></span><br></pre></td></tr></table></figure><p>　　对于记录锁，cmd是F_GETLK,F_SETLK或F_SETLKW。第三个参数（我们将调用flockptr）是一个指向flock结构的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flock</span>&#123;</span></span><br><span class="line">    <span class="keyword">short</span> l_type;           <span class="comment">/* F_RDLCK, F_WRLCK, or F_UNLCK */</span></span><br><span class="line">    <span class="keyword">short</span> l_whence;         <span class="comment">/* SEEK_SET, SEEK_CUR or SEEK_END */</span></span><br><span class="line">    <span class="keyword">short</span> l_start;          <span class="comment">/* offset in bytes, relative to l_whence */</span></span><br><span class="line">    <span class="keyword">short</span> l_len;            <span class="comment">/* length, in bytes, 0 means lock to EOF */</span></span><br><span class="line">    <span class="keyword">short</span> l_pid;            <span class="comment">/* returned with F_GETLK */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flock结构说明如下：</p><ul><li>锁类型：F_RDLCK(共享读锁)、F_WRLCK(独占性写锁)或F_UNLCK(解锁一个区域)</li><li>要加锁或解锁区域的起始字节偏移量(l_start和l_whence)</li><li>区域字节长度(l_len)</li><li>进程ID(l_pid)持有的锁能阻塞当前进程(仅由F_GETLK)返回</li></ul><p>关于锁区域说明：</p><ul><li>区域起始偏移量的两个元素与lseek函数中最后的两个参数类似。l_whence可选的值是SEEK_SET、SEEK_CUR和SEEK_END。</li><li>锁可以在文件尾端处开始或越过尾端处开始，但不能在文章起始位置之前开始。</li><li>如l_len=0，则表示锁的范围可以扩展到最大可能的偏移量。这意味着不管向该文件追加多少数据。它们都可以处于锁的范围内。</li><li>为了对整个文件加锁，我们设置l_start和l_whence指向文件的起始位置，并指定l_len=0。（常用的指定文件起始位置，l_start=0,l_whence为SEEK_SET）。</li></ul><p>两种锁类型：共享读锁（L_RDLCK）和独占性写锁（L_WRLCK）。<br>不同进程下，不同类型锁彼此之间的兼容性：</p><div align="center"><p><img src="/img/note_0d/01.png" alt="不同类型锁批次之间的兼容性"></p></div><p></p><p>　　共享读锁和独占性写锁的原则：多个进程，如果在一个给定字节上有一个或多个读锁时，则不能在该字节上加写锁；如果在一个字节上已经有一把独占性写锁，则不能再对它加任意读锁。<br>　　以上情况只针对于多个进程。如果一个进程中对一个文件区域有一把锁，后来进程又企图在同一文件再加一把锁，那么新锁将<code>替换</code>已有锁。<br>　　加读锁时，该描述符必须是读打开。加锁时，该描述符必须是写打开。</p><p>fcntl的3个命令：</p><ul><li>F_GETLK: 是否存在一把锁。如存在，则将现有锁信息重写flockptr指向的信息。如果不存在，则除了l_type设置为F_UNLCK之外，其他信息保存不变。</li><li>F_SETLK: 设置由flockptr所描述的锁。获取一把读锁（l_type=F_RDLCK）或者写锁（l_type=F_WRLCK）。而兼容性规则，阻止系统给出这把锁，那么fcntl就会立即出错返回。此时errno设置为EACCES和EAGAIN（一般不能满足，都返回该值）。此命令也可用于清除由flockptr指定锁（l_type=F_UNLCK）。</li><li>F_SETLKW: 是F_SETLK的阻塞版本，（W=wait）。所以在请求的读锁或写锁因另一个进程当前已经对请求区域的某个部分进行加锁而不能授予，那么调用就会被置为休眠。如果请求创建的锁已经可用，或者休眠由信号中断，则该进程被唤醒。</li></ul><p><strong>demo:</strong><br>通用头部代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用code</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lock_reg</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, <span class="keyword">int</span> type, <span class="keyword">off_t</span> offset, <span class="keyword">int</span> whence, <span class="keyword">off_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">flock</span> <span class="title">lock</span>;</span></span><br><span class="line"></span><br><span class="line">    lock.l_type = type;</span><br><span class="line">    lock.l_start = offset;</span><br><span class="line">    lock.l_whence = whence;</span><br><span class="line">    lock.l_len = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (fcntl(fd, cmd, &amp;lock));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> read_lock(fd, offset, whence, len) \</span></span><br><span class="line">            lock_reg((fd), F_SETLK, F_RDLCK, (offset), (whence), (len))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> readw_lock(fd, offset, whence, len) \</span></span><br><span class="line">            lock_reg((fd), F_SETLKW, F_RDLCK, (offset), (whence), (len))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> write_lock(fd, offset, whence, len) \</span></span><br><span class="line">            lock_reg((fd), F_SETLK, F_WRLCK, (offset), (whence), (len))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> writew_lock(fd, offset, whence, len) \</span></span><br><span class="line">            lock_reg((fd), F_SETLKW, F_WRLCK, (offset), (whence), (len))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> un_lock(fd, offset, whence, len) \</span></span><br><span class="line">            lock_reg((fd), F_SETLK, F_UNLCK, (offset), (whence), (len))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getRandomString</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, i;</span><br><span class="line">    <span class="keyword">char</span>* <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">4</span>]=<span class="string">"Aa0"</span>;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span> ));</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">string</span> = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">char</span>)*length)) == <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d,malloc error\n"</span>,__LINE__);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = rand() % <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">string</span>[i] = tmp[j] + rand()%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (j!=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">string</span>[i] += rand()%<span class="number">16</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span>[length - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,write_buf:  %s\n"</span>,__LINE__, <span class="built_in">string</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写文件 a.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.c  写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        srand(time(<span class="number">0</span>));</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"start\n"</span>);</span><br><span class="line">        fd = open(<span class="string">"./a.txt"</span>, O_WRONLY | O_CREAT | O_TRUNC, S_IWUSR | S_IRUSR | S_IWGRP| S_IRUSR | S_IWOTH | S_IROTH);</span><br><span class="line">        <span class="keyword">if</span> (fd != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (write_lock(fd, <span class="number">0</span>, SEEK_SET, <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d,%d,%s\n"</span>,__LINE__,errno,(<span class="keyword">char</span> *)strerror(errno));</span><br><span class="line">                close(fd);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            len = rand()%<span class="number">200</span> + <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">if</span> (len == write(fd, getRandomString(len), len)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d,write success\n"</span>, __LINE__);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d,write fail\n"</span>, __LINE__);</span><br><span class="line">            &#125;</span><br><span class="line">            close(fd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读文件 b.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.c 读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"start\n"</span>);</span><br><span class="line">        fd = open(<span class="string">"./a.txt"</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span> (fd != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (read_lock(fd, <span class="number">0</span>, SEEK_SET, <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d,%d,%s\n"</span>,__LINE__,errno,(<span class="keyword">char</span> *)strerror(errno));</span><br><span class="line">                close(fd);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            len = read(fd, buf, <span class="number">256</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">-1</span> == len)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d,read failed\n"</span>, __LINE__);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d,read success\n"</span>,__LINE__);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d,%s\n\n"</span>,__LINE__, buf);</span><br><span class="line">            &#125;</span><br><span class="line">            close(fd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a><strong>文件描述符</strong></h2><p><strong>open 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags)</span></span>;                  <span class="comment">/* 打开现有文件 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span>;     <span class="comment">/* 打开的文件不存在，则先创建它 */</span></span><br></pre></td></tr></table></figure><p>返回-1,则出错。成功，则返回文件描述符</p><p>参数说明：</p><table><thead><tr><th align="left">flags</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">O_RDONLY</td><td align="left">以只读方式打开文件</td></tr><tr><td align="left">O_WRONLY</td><td align="left">以只写方式打开文件</td></tr><tr><td align="left">O_RDWR</td><td align="left">以读写方式打开文件</td></tr><tr><td align="left">O_CREAT</td><td align="left">若所打开文件不存在则创建此文件。使用此选项时，需同时使用第三个参数mode说明该新文件的存取许可权位。</td></tr><tr><td align="left">O_EXCL</td><td align="left">如果同时指定了O_CREATE,而文件已经存在，则导致调用出错</td></tr><tr><td align="left">O_TRUNC</td><td align="left">如果文件存在，而且为只读或只写方式打开，则将其长度截短为0</td></tr><tr><td align="left">O_NOCTTY</td><td align="left">如果pathname指定的是终端设备(tty)，则不将此设备分配作为进程的控制终端</td></tr><tr><td align="left">O_APPEND</td><td align="left">每次写时都加到文件的尾端</td></tr><tr><td align="left">O_NONBLOCK</td><td align="left">如果pathname指定的是一个FIFO、一个块特殊文件或一个字符特殊文件，则此选择项为此文件的本次打开操作和后续的I/O操作设备为非阻塞方式</td></tr><tr><td align="left">O_NONELAY</td><td align="left">O_NONBLOCK</td></tr><tr><td align="left">O_SYNC</td><td align="left">只在数据被写入外存或其他设备之后操作才返回</td></tr></tbody></table><table><thead><tr><th align="left">mode取值</th><th align="left">对应八进制数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">S_SVTX</td><td align="left">01000</td><td align="left">粘贴位</td></tr><tr><td align="left">S_IRUSR</td><td align="left">00400</td><td align="left">文件所有者的读权限位</td></tr><tr><td align="left">S_IWUSR</td><td align="left">00200</td><td align="left">文件所有者的写权限位</td></tr><tr><td align="left">S_IXUSR</td><td align="left">00100</td><td align="left">文件所有者的执行权限位</td></tr><tr><td align="left">S_IRGRP</td><td align="left">00040</td><td align="left">所有者同组用户的读权限位</td></tr><tr><td align="left">S_IWGRP</td><td align="left">00020</td><td align="left">所有者同组用户的写权限位</td></tr><tr><td align="left">S_IXGRP</td><td align="left">00010</td><td align="left">所有者同组用户的执行权限位</td></tr><tr><td align="left">S_IROTH</td><td align="left">00004</td><td align="left">其他组用户的读权限位</td></tr><tr><td align="left">S_IWOTH</td><td align="left">00002</td><td align="left">其他组用户的写权限位</td></tr><tr><td align="left">S_IXOTH</td><td align="left">00001</td><td align="left">其他组用户的执行权限位</td></tr></tbody></table><h2 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a><strong>文件流</strong></h2><p><strong>fopen 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *mode)</span></span>;</span><br></pre></td></tr></table></figure><p>返回值：失败返回NULL</p><table><thead><tr><th align="left">mode取值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">以只读方式打开文件，该文件必须存在。</td></tr><tr><td align="left">r+</td><td align="left">以读/写方式打开文件，该文件必须存在。</td></tr><tr><td align="left">rb+</td><td align="left">以读/写方式打开一个二进制文件，只允许读/写数据。</td></tr><tr><td align="left">rt+</td><td align="left">以读/写方式打开一个文本文件，允许读和写。</td></tr><tr><td align="left">w</td><td align="left">打开只写文件，若文件存在则长度清为 0，即该文件内容消失，若不存在则创建该文件。</td></tr><tr><td align="left">w+</td><td align="left">打开可读/写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。</td></tr><tr><td align="left">a</td><td align="left">以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留（EOF 符保留）。</td></tr><tr><td align="left">a+</td><td align="left">以附加方式打开可读/写的文件。若文件不存在，则会建立该文件，如果文件存在，则写入的数据会被加到文件尾后，即文件原先的内容会被保留（原来的 EOF 符不保留）。</td></tr><tr><td align="left">wb</td><td align="left">以只写方式打开或新建一个二进制文件，只允许写数据。</td></tr><tr><td align="left">wb+</td><td align="left">以读/写方式打开或建立一个二进制文件，允许读和写。</td></tr><tr><td align="left">wt+</td><td align="left">以读/写方式打开或建立一个文本文件，允许读写。</td></tr><tr><td align="left">at+</td><td align="left">以读/写方式打开一个文本文件，允许读或在文本末追加数据。</td></tr><tr><td align="left">ab+</td><td align="left">以读/写方式打开一个二进制文件，允许读或在文件末追加数据。</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取某个文件流的文件描述符</span></span><br><span class="line"><span class="keyword">int</span> i_fp = <span class="number">-1</span>;</span><br><span class="line">FILE *fp = fopen(<span class="string">"/tmp/test.txt"</span>,<span class="string">"r+"</span>);</span><br><span class="line">i_fp = fileno(fp);</span><br><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端小工具</title>
      <link href="/2018/07/19/%E5%89%8D%E7%AB%AF/02%E5%89%8D%E7%AB%AF%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/07/19/%E5%89%8D%E7%AB%AF/02%E5%89%8D%E7%AB%AF%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="时钟-Clock-Shop"><a href="#时钟-Clock-Shop" class="headerlink" title="时钟(Clock Shop)"></a><strong>时钟(<a href="https://a-jie.github.io/clock-shop/" title="网站收集各种时钟的代码" target="_blank" rel="noopener">Clock Shop</a>)</strong></h2><div id="clock"></div><p><code>CSS</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#clock</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#clock</span> <span class="selector-tag">canvas</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JS</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> Clock = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;Clock&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> config = &#123;</span><br><span class="line">            starCount: <span class="number">500</span>,</span><br><span class="line">            showFps: <span class="literal">true</span>,</span><br><span class="line">            drawDigital: <span class="literal">true</span>,</span><br><span class="line">            star: &#123;</span><br><span class="line">                minOpacity: <span class="number">0.1</span>,</span><br><span class="line">                fade: <span class="literal">true</span>,</span><br><span class="line">                fadeSpeed: <span class="number">0.02</span>,</span><br><span class="line">                color: <span class="string">'#0a0'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            hour: &#123;</span><br><span class="line">                foreground: <span class="string">'#aaa'</span>,</span><br><span class="line">                background: <span class="string">'#000'</span>,</span><br><span class="line">                width: <span class="number">3</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            minute: &#123;</span><br><span class="line">                foreground: <span class="string">'#aaa'</span>,</span><br><span class="line">                background: <span class="string">'#000'</span>,</span><br><span class="line">                width: <span class="number">3</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            second: &#123;</span><br><span class="line">                foreground: <span class="string">'#aaa'</span>,</span><br><span class="line">                background: <span class="string">'#000'</span>,</span><br><span class="line">                width: <span class="number">3</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            milli: &#123;</span><br><span class="line">                foreground: <span class="string">'rgba(0,0,0,0.1)'</span>,</span><br><span class="line">                background: <span class="string">'#000'</span>,</span><br><span class="line">                width: <span class="number">3</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;Element&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;CanvasRenderingContext2D&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> engine = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * requestor</span></span><br><span class="line"><span class="comment">         * @type &#123;*|Function&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> frame = <span class="built_in">window</span>.requestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                cb</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> setTimeout(cb, <span class="number">30</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> star = [];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @type &#123;number&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> size = <span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;number&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> radius = size / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;Date&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> current = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;&#123;refresh: number, tick: number, start: Date&#125;&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> fps = &#123;</span><br><span class="line">            val: <span class="number">0</span>,</span><br><span class="line">            refresh: <span class="number">50</span>,</span><br><span class="line">            tick: <span class="number">0</span>,</span><br><span class="line">            start: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;&#123;width: number, height: number, size: number, radius: number, middle: number&#125;&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> meta = &#123;</span><br><span class="line">            width: <span class="number">0</span>,</span><br><span class="line">            height: <span class="number">0</span>,</span><br><span class="line">            size: <span class="number">0</span>,</span><br><span class="line">            radius: <span class="number">0</span>,</span><br><span class="line">            middle: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * init</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            generateStar();</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"></span><br><span class="line">            canvas.setAttribute(<span class="string">'width'</span>, <span class="built_in">window</span>.innerWidth);</span><br><span class="line">            canvas.setAttribute(<span class="string">'height'</span>, <span class="built_in">window</span>.innerHeight);</span><br><span class="line"></span><br><span class="line">            frame(tick);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * render frame</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> tick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            current = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            solveMeta();</span><br><span class="line"></span><br><span class="line">            engine.fillStyle = <span class="string">'#000'</span>;</span><br><span class="line">            engine.clearRect(<span class="number">0</span>, <span class="number">0</span>, meta.width, meta.height);</span><br><span class="line">            engine.fillRect(<span class="number">0</span>, <span class="number">0</span>, meta.width, meta.height);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//draw part</span></span><br><span class="line">            drawFps();</span><br><span class="line">            drawStar();</span><br><span class="line"></span><br><span class="line">            drawBackgroundTime();</span><br><span class="line">            drawPattern();</span><br><span class="line">            drawForegroundTime();</span><br><span class="line"></span><br><span class="line">            drawDigital();</span><br><span class="line"></span><br><span class="line">            frame(tick);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * draw digital watch</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> drawDigital = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (config.drawDigital) &#123;</span><br><span class="line">                <span class="keyword">var</span> time = [</span><br><span class="line">                n(current.getHours()),</span><br><span class="line">                current.getSeconds() % <span class="number">2</span> ? <span class="string">':'</span> : <span class="string">' '</span>,</span><br><span class="line">                n(current.getMinutes())</span><br><span class="line">                ].join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> size = <span class="number">30</span>;</span><br><span class="line">                <span class="keyword">var</span> padding = <span class="number">10</span>;</span><br><span class="line">                engine.font = size + <span class="string">'px Arial'</span>;</span><br><span class="line">                <span class="keyword">var</span> m = engine.measureText(time);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//engine.fillStyle = 'rgba(0,0,0,0.5)';</span></span><br><span class="line">                <span class="comment">//engine.fillRect(</span></span><br><span class="line">                <span class="comment">//    meta.middle.x - m.width / 2 - padding,</span></span><br><span class="line">                <span class="comment">//    meta.middle.y - size / 2 - padding,</span></span><br><span class="line">                <span class="comment">//    m.width + padding * 2,</span></span><br><span class="line">                <span class="comment">//    size + padding * 2</span></span><br><span class="line">                <span class="comment">//);</span></span><br><span class="line"></span><br><span class="line">                engine.fillStyle = <span class="string">'#fff'</span>;</span><br><span class="line">                engine.fillText(</span><br><span class="line">                    time,</span><br><span class="line">                    meta.middle.x - m.width / <span class="number">2</span>,</span><br><span class="line">                    meta.middle.y + size / <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @param ne</span></span><br><span class="line"><span class="comment">         * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> n = <span class="function"><span class="keyword">function</span> (<span class="params">ne</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ne &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'0'</span> + ne;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ne;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * draw lines for evers hour and minute</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> drawPattern = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//#1</span></span><br><span class="line">            engine.strokeStyle = <span class="string">'rgba(255,255,255,0.2)'</span>;</span><br><span class="line">            engine.lineWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            engine.beginPath();</span><br><span class="line">            engine.arc(meta.middle.x, meta.middle.y, meta.radius * <span class="number">0.8</span> - meta.radius / <span class="number">12</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">            engine.stroke();</span><br><span class="line">            engine.closePath();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//#1.5</span></span><br><span class="line">            engine.strokeStyle = <span class="string">'rgba(255,255,255,0.2)'</span>;</span><br><span class="line">            engine.beginPath();</span><br><span class="line">            engine.arc(meta.middle.x, meta.middle.y, meta.radius * <span class="number">0.8</span> + meta.radius / <span class="number">12</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">            engine.stroke();</span><br><span class="line">            engine.closePath();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//#2</span></span><br><span class="line">            engine.strokeStyle = <span class="string">'rgba(0,0,0,0.5)'</span>;</span><br><span class="line">            engine.lineWidth = meta.radius / <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">            engine.beginPath();</span><br><span class="line">            engine.arc(meta.middle.x, meta.middle.y, meta.radius * <span class="number">0.8</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">            engine.stroke();</span><br><span class="line">            engine.closePath();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> angleWidth = <span class="built_in">Math</span>.PI * <span class="number">2</span> / <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">var</span> seconds = current.getSeconds() + current.getMilliseconds() / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> angleMid = i * angleWidth - <span class="number">0.5</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">                <span class="keyword">var</span> startAngle = angleMid - <span class="built_in">Math</span>.PI / <span class="number">500</span>;</span><br><span class="line">                <span class="keyword">var</span> endAngle = angleMid + <span class="built_in">Math</span>.PI / <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//var opa = (60 - seconds + i - 1) % 60;</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">//engine.strokeStyle = 'rgba(' + [255, 255, 255, opa / 60].join(',') + ')';</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i === <span class="built_in">parseInt</span>(seconds)) &#123;</span><br><span class="line">                    engine.strokeStyle = <span class="string">'#0a0'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> opa = <span class="number">1</span> - <span class="built_in">Math</span>.min(</span><br><span class="line">                        <span class="built_in">Math</span>.abs(i - <span class="number">60</span> - seconds),</span><br><span class="line">                        <span class="built_in">Math</span>.abs(i - seconds),</span><br><span class="line">                        <span class="built_in">Math</span>.abs(i + <span class="number">60</span> - seconds)) / <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">                    engine.strokeStyle = <span class="string">'rgba('</span> + [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, opa].join(<span class="string">','</span>) + <span class="string">')'</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                engine.lineWidth = meta.radius / <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">                engine.beginPath();</span><br><span class="line">                engine.arc(meta.middle.x, meta.middle.y, meta.radius * <span class="number">0.8</span>, startAngle, endAngle);</span><br><span class="line">                engine.stroke();</span><br><span class="line">                engine.closePath();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            angleWidth = <span class="built_in">Math</span>.PI * <span class="number">2</span> / <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> angleMid = i * angleWidth - <span class="number">0.5</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">                <span class="keyword">var</span> startAngle = angleMid - <span class="built_in">Math</span>.PI / <span class="number">200</span>;</span><br><span class="line">                <span class="keyword">var</span> endAngle = angleMid + <span class="built_in">Math</span>.PI / <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">                engine.strokeStyle = <span class="string">'rgba(255,255,255,0.6)'</span>;</span><br><span class="line">                engine.lineWidth = meta.radius / <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">                engine.beginPath();</span><br><span class="line">                engine.arc(meta.middle.x, meta.middle.y, meta.radius * <span class="number">0.75</span>, startAngle, endAngle);</span><br><span class="line">                engine.stroke();</span><br><span class="line">                engine.closePath();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * draw background clock</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> drawBackgroundTime = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            drawBackgroundTimePart(meta.radius / <span class="number">3</span> + <span class="number">20</span>, current.getHours() + current.getMinutes() / <span class="number">60</span>, <span class="number">12</span>, config.hour);</span><br><span class="line">            drawBackgroundTimePart(meta.radius * <span class="number">0.65</span> + <span class="number">20</span>, current.getMinutes() + current.getSeconds() / <span class="number">60</span>, <span class="number">60</span>,</span><br><span class="line">                config.minute);</span><br><span class="line">            drawBackgroundTimePart(meta.radius + <span class="number">20</span>, current.getSeconds() + current.getMilliseconds() / <span class="number">1000</span>, <span class="number">60</span>,</span><br><span class="line">                config.second);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * draw foreground clock</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> drawForegroundTime = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            drawTimePart(meta.radius / <span class="number">3</span>, current.getHours() + current.getMinutes() / <span class="number">60</span>, <span class="number">12</span>, config.hour);</span><br><span class="line">            drawTimePart(meta.radius * <span class="number">0.65</span>, current.getMinutes() + current.getSeconds() / <span class="number">60</span>, <span class="number">60</span>, config.minute);</span><br><span class="line">            drawTimePart(meta.radius, current.getSeconds() + current.getMilliseconds() / <span class="number">1000</span>, <span class="number">60</span>, config.second);</span><br><span class="line"></span><br><span class="line">            drawTimePart(meta.radius / <span class="number">15</span>, current.getMilliseconds(), <span class="number">1000</span>, config.milli, <span class="literal">true</span>);</span><br><span class="line">            drawTimePart(meta.radius / <span class="number">15</span>, current.getMilliseconds() + <span class="number">250</span>, <span class="number">1000</span>, config.milli, <span class="literal">true</span>);</span><br><span class="line">            drawTimePart(meta.radius / <span class="number">15</span>, current.getMilliseconds() + <span class="number">500</span>, <span class="number">1000</span>, config.milli, <span class="literal">true</span>);</span><br><span class="line">            drawTimePart(meta.radius / <span class="number">15</span>, current.getMilliseconds() + <span class="number">750</span>, <span class="number">1000</span>, config.milli, <span class="literal">true</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * draw bg time part</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;number&#125; radius</span></span><br><span class="line"><span class="comment">         * @param &#123;number&#125; time</span></span><br><span class="line"><span class="comment">         * @param &#123;number&#125; maxTime</span></span><br><span class="line"><span class="comment">         * @param &#123;&#123;&#125;&#125; config</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> drawBackgroundTimePart = <span class="function"><span class="keyword">function</span> (<span class="params">radius, time, maxTime, config</span>) </span>&#123;</span><br><span class="line">            engine.globalAlpha = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> angleWidth = <span class="built_in">Math</span>.PI * <span class="number">2</span> / maxTime;</span><br><span class="line">            <span class="keyword">var</span> angleMid = time * angleWidth - <span class="number">0.5</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">            <span class="keyword">var</span> startAngle = angleMid - <span class="built_in">Math</span>.PI / <span class="number">1.5</span>;</span><br><span class="line">            <span class="keyword">var</span> endAngle = angleMid + <span class="built_in">Math</span>.PI / <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line">            engine.fillStyle = config.background;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//### 1</span></span><br><span class="line">            <span class="keyword">var</span> grd = engine.createRadialGradient(meta.middle.x, meta.middle.y, radius / <span class="number">2</span>, meta.middle.x, meta.middle.y,</span><br><span class="line">                radius);</span><br><span class="line">            grd.addColorStop(<span class="number">0</span>, <span class="string">'rgba(0,0,0,0)'</span>);</span><br><span class="line">            grd.addColorStop(<span class="number">1</span>, config.background);</span><br><span class="line">            engine.fillStyle = grd;</span><br><span class="line"></span><br><span class="line">            engine.beginPath();</span><br><span class="line">            engine.moveTo(meta.middle.x, meta.middle.y);</span><br><span class="line">            engine.arc(meta.middle.x, meta.middle.y, radius, startAngle, endAngle);</span><br><span class="line">            engine.fill();</span><br><span class="line">            engine.closePath();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//### 2</span></span><br><span class="line">            grd = engine.createRadialGradient(meta.middle.x, meta.middle.y, radius / <span class="number">2</span>, meta.middle.x, meta.middle.y,</span><br><span class="line">                radius);</span><br><span class="line">            grd.addColorStop(<span class="number">0</span>, <span class="string">'rgba(0,0,0,0)'</span>);</span><br><span class="line">            grd.addColorStop(<span class="number">1</span>, <span class="string">'rgba(0,200,0,0.5)'</span>);</span><br><span class="line">            engine.fillStyle = grd;</span><br><span class="line"></span><br><span class="line">            engine.beginPath();</span><br><span class="line">            engine.moveTo(meta.middle.x, meta.middle.y);</span><br><span class="line">            engine.arc(meta.middle.x, meta.middle.y, radius, startAngle + <span class="built_in">Math</span>.PI / <span class="number">2</span>, endAngle - <span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line">            engine.fill();</span><br><span class="line">            engine.closePath();</span><br><span class="line"></span><br><span class="line">            engine.globalAlpha = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * draw time part</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;number&#125; radius</span></span><br><span class="line"><span class="comment">         * @param &#123;number&#125; time</span></span><br><span class="line"><span class="comment">         * @param &#123;number&#125; maxTime</span></span><br><span class="line"><span class="comment">         * @param &#123;&#123;&#125;&#125; config</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> drawTimePart = <span class="function"><span class="keyword">function</span> (<span class="params">radius, time, maxTime, config, anti</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> angleWidth = <span class="built_in">Math</span>.PI * <span class="number">2</span> / maxTime;</span><br><span class="line">            <span class="keyword">var</span> angleMid = time * angleWidth - <span class="number">0.5</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">            <span class="keyword">var</span> length = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (anti) &#123;</span><br><span class="line">                angleMid = <span class="number">0</span> - angleMid;</span><br><span class="line">                length = <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> startAngle = angleMid - <span class="built_in">Math</span>.PI / length;</span><br><span class="line">            <span class="keyword">var</span> endAngle = angleMid + <span class="built_in">Math</span>.PI / length;</span><br><span class="line"></span><br><span class="line">            engine.strokeStyle = config.foreground;</span><br><span class="line">            engine.lineWidth = config.width;</span><br><span class="line"></span><br><span class="line">            engine.beginPath();</span><br><span class="line">            engine.arc(meta.middle.x, meta.middle.y, radius - config.width, startAngle, endAngle);</span><br><span class="line">            engine.stroke();</span><br><span class="line">            engine.closePath();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!anti) &#123;</span><br><span class="line">                engine.strokeStyle = <span class="string">'#fff'</span>;</span><br><span class="line">                engine.lineWidth = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">                engine.beginPath();</span><br><span class="line">                engine.arc(meta.middle.x, meta.middle.y, radius, angleMid - <span class="number">0.01</span>, angleMid + <span class="number">0.01</span>);</span><br><span class="line">                engine.stroke();</span><br><span class="line">                engine.closePath();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * solve and render fps</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> drawFps = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (config.showFps) &#123;</span><br><span class="line">                fps.tick--;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (fps.tick &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> diffTime = (<span class="keyword">new</span> <span class="built_in">Date</span>() - fps.start) / <span class="number">1000</span>;</span><br><span class="line">                    fps.val = <span class="built_in">parseInt</span>(fps.refresh / diffTime * <span class="number">10</span>) / <span class="number">10</span>;</span><br><span class="line">                    fps.start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                    fps.tick = fps.refresh;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                engine.font = <span class="string">'10px Arial'</span>;</span><br><span class="line">                engine.fillStyle = <span class="string">'#fff'</span>;</span><br><span class="line">                engine.fillText(fps.val + <span class="string">' fps | '</span> + [</span><br><span class="line">                n(current.getHours()),</span><br><span class="line">                current.getSeconds() % <span class="number">2</span> ? <span class="string">':'</span> : <span class="string">' '</span>,</span><br><span class="line">                n(current.getMinutes()),</span><br><span class="line">                current.getSeconds() % <span class="number">2</span> ? <span class="string">':'</span> : <span class="string">' '</span>,</span><br><span class="line">                n(current.getSeconds())</span><br><span class="line">                ].join(<span class="string">''</span>), <span class="number">5</span>, meta.height - <span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * generate Star line setup</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> generateStar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; config.starCount; i++) &#123;</span><br><span class="line">                star.push(&#123;</span><br><span class="line">                    width: <span class="built_in">Math</span>.random(),</span><br><span class="line">                    deg: <span class="built_in">Math</span>.random() * <span class="number">360</span>,</span><br><span class="line">                    color: <span class="built_in">Math</span>.random(),</span><br><span class="line">                    colorDir: <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ? config.star.fadeSpeed : -config.star.fadeSpeed</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * height of canvas</span></span><br><span class="line"><span class="comment">         * @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> width = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> canvas.getAttribute(<span class="string">'width'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * height of canvas</span></span><br><span class="line"><span class="comment">         * @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> height = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> canvas.getAttribute(<span class="string">'height'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * get mid coords from the clock</span></span><br><span class="line"><span class="comment">         * @returns &#123;&#123;x: number, y: number&#125;&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> middle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                x: width() / <span class="number">2</span>,</span><br><span class="line">                y: height() / <span class="number">2</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * cache size properties</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> solveMeta = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            meta.width = width();</span><br><span class="line">            meta.height = height();</span><br><span class="line">            meta.radius = <span class="built_in">Math</span>.min(meta.width, meta.height) * radius;</span><br><span class="line">            meta.size = <span class="built_in">Math</span>.min(meta.width, meta.height);</span><br><span class="line">            meta.middle = middle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * draw clock star lines</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> drawStar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            engine.strokeStyle = config.star.color;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; star.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> starLine = star[i];</span><br><span class="line">                <span class="keyword">var</span> relX = <span class="built_in">Math</span>.sin(starLine.deg / <span class="number">360</span> * <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">var</span> relY = <span class="built_in">Math</span>.cos(starLine.deg / <span class="number">360</span> * <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                engine.beginPath();</span><br><span class="line"></span><br><span class="line">                engine.moveTo(</span><br><span class="line">                    meta.middle.x,</span><br><span class="line">                    meta.middle.y);</span><br><span class="line"></span><br><span class="line">                engine.lineTo(</span><br><span class="line">                    meta.middle.x + relX * starLine.width * meta.radius,</span><br><span class="line">                    meta.middle.y + relY * starLine.width * meta.radius);</span><br><span class="line"></span><br><span class="line">                engine.lineWidth = <span class="built_in">parseInt</span>((<span class="number">1</span> - starLine.width) * <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (config.star.fade) &#123;</span><br><span class="line">                    engine.globalAlpha = config.star.minOpacity + (<span class="number">1</span> - config.star.minOpacity) * starLine.color;</span><br><span class="line">                    starLine.color += starLine.colorDir;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (starLine.color &gt;= <span class="number">1</span> || starLine.color &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        starLine.color = starLine.color | <span class="number">0</span>;</span><br><span class="line">                        starLine.colorDir = -starLine.colorDir;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                engine.stroke();</span><br><span class="line">                engine.closePath();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            engine.globalAlpha = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> Clock();</span><br><span class="line">    c.run();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>电影收藏</title>
      <link href="/2018/07/06/%E6%9D%82%E8%AF%BB/01%E7%94%B5%E5%BD%B1/"/>
      <url>/2018/07/06/%E6%9D%82%E8%AF%BB/01%E7%94%B5%E5%BD%B1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="动画片"><a href="#动画片" class="headerlink" title="动画片"></a>动画片</h2><div align="center"> <p><a href="./" title="10岁的少女千寻与父母一起从都市搬家到了乡下。没想到在搬家的途中，一家人发生了意外。他们进入了汤屋老板魔女控制的奇特世界——在那里不劳动的人将会被变成动物。千寻的爸爸妈妈因贪吃变成了猪，千寻为了救爸爸妈妈经历了很多磨难，在期间她遇见了白龙，一个既聪明又冷酷的少年，在经历了很多事情之后，千寻最后救出了爸爸妈妈，拯救了白龙。">《千与千寻》</a></p><p><img src="/img/zd_01/qyqx01.png" alt></p></div><p></p><div align="center">《哈尔移动的城堡》<iframe style="border: 0.2em solid #d3d3d3;    border-radius: 0.5em;" src="http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=5d81e2948317330bdb8a26155ca2fb09&tvId=39683971609&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%" frameborder="0" allowfullscreen="true" width="85%" height="482"></iframe></div><div align="center">《狮子王》<p><img src="/img/zd_01/szw03.png" alt></p></div><p></p><div align="center">《龙猫》<iframe style="border: 0.2em solid #d3d3d3;    border-radius: 0.5em;" src="http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=313333eff3a610719dbf07a6592c09fe&tvId=730270600&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%" frameborder="0" allowfullscreen="true" width="85%" height="482"></iframe></div><div align="center">《机器人总动员》<iframe style="border: 0.2em solid #d3d3d3;    border-radius: 0.5em;" frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=v00121f4a8u" allowfullscreen="true" width="85%" height="482"></iframe></div><div align="center">《疯狂动物城》<iframe style="border: 0.2em solid #d3d3d3;    border-radius: 0.5em;" frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=l0020h13orj" allowfullscreen="true" width="85%" height="482"></iframe></div><div align="center">《天空之城》<p><img src="/img/zd_01/tkzc07.png" alt></p></div><p></p><div align="center">《飞屋环游记》<p><img src="/img/zd_01/fwhyj08.png" alt></p></div><p></p><div align="center">《大圣归来》<p><img src="/img/zd_01/dsgl09.png" alt></p></div><p></p><div align="center">《侧耳倾听》<p><img src="/img/zd_01/ceqt10.png" alt></p></div><p></p><div align="center">《玩具总动员》<p><img src="/img/zd_01/wjzdy11.png" alt></p></div><p></p><div align="center">《你的名字。》<p><img src="/img/zd_01/ndmz12.png" alt></p></div><p></p><div align="center">《冰雪奇缘》<p><img src="/img/zd_01/bxqy13.png" alt></p></div><p></p><div align="center">《秒速五厘米》<p><img src="/img/zd_01/mswlm14.png" alt></p></div><p></p><div align="center">《萤火之森》<p><img src="/img/zd_01/yhzs15.png" alt></p></div><p></p><div align="center">《鬼妈妈》<p><img src="/img/zd_01/gmm16.png" alt></p></div><p></p><div align="center">《幽灵公主》<p><img src="/img/zd_01/ylgz17.png" alt></p></div><p></p><div align="center">《神偷奶爸》<p><img src="/img/zd_01/stnb18.png" alt></p></div><p></p><div align="center">《驯龙高手》<p><img src="/img/zd_01/xlgs19.png" alt></p></div><p></p><div align="center">《小倩》<p><img src="/img/zd_01/xq20.png" alt></p></div><p></p>]]></content>
      
      <categories>
          
          <category> 杂读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PING原理</title>
      <link href="/2018/07/05/%E7%AC%94%E8%AE%B0/01ping%E5%8E%9F%E7%90%86/"/>
      <url>/2018/07/05/%E7%AC%94%E8%AE%B0/01ping%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div align="center"><p><img src="/img/note_01/01.png" alt></p></div><p>&emsp;&emsp;由上面的执行结果可以看到，ping命令执行后显示出被测试系统的<code>主机名</code>和<code>相应IP</code>，返回给当前主机的ICMP报文序列号（seq）,<code>生存时间</code>（ttl）,和<code>往返时间</code>（time单位是毫秒，即千分之一秒）。模拟ping命令，这些信息非常重要。要真正了解ping命令的实现原理，就要了解ping命令所使用到的TCP/IP协议。</p><h2 id="ping命令介绍"><a href="#ping命令介绍" class="headerlink" title="ping命令介绍"></a>ping命令介绍</h2><p>&emsp;&emsp;PING(Packet Internet Groper)，因特网包探索其，用于测试网络连接量的程序。Ping发出一个ICMP(Internet Control Messages Protocol)即因特网信报控制协议；回声请求消息给目的地并报告是否收到所希望的ICMP echo(ICMP回声应答)。它是用来检查网络是否通畅或者网络连速度的命令。它所利用的原理是这样的：利用网络上机器IP得治的唯一性，给目标IP地址发送一个数据包，再要求对方返回一个同样大小的数据包来确定两台网络机器是否连接相通，时延是多少。<br>&emsp;&emsp;其中关键在于发送ICMP数据包，然后对接收到的包进行一定的处理。不可避免，我们要发送ICMP包，必须自己来构建一个包出来。再来回顾一下ICMP:<br>&emsp;&emsp;ICMP(Internet Control Message Protocol)Internet控制保温协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。ICMP是面向无连接的协议。<br>&emsp;&emsp;ping命令值使用众多ICMP报文中的两种：“请求回送(ICMP_ECHO)”和“请求回应(ICMP_ECHOREPLY)”。这两种报文的报头格式如下：</p><table class="table_center"><tr><td>类型(TYPE)</td><td>编码(CODE)</td><td>校验和(CHECKSUM)</td></tr><tr><td colspan="2">标识符(ID)</td><td>顺序号(SEQ)</td></tr></table>&emsp;&emsp;当TYPE字段为`ICMP_ECHO`,CODE字段为0时，代表PING请求报文;TYPE字段为`ICMP_ECHOREPLY`,CODE字段为`0`时，代表PING应答报文/<p>icmp结构体   //  netinet/ip_icmp.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">icmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">u_int8_t</span>icmp_type;              <span class="comment">/* type of message, see below */</span></span><br><span class="line"><span class="keyword">u_int8_t</span>icmp_code;              <span class="comment">/* type sub code */</span></span><br><span class="line"><span class="keyword">u_int16_t</span>icmp_cksum;             <span class="comment">/* ones complement checksum of struct */</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line">u_charih_pptr;        <span class="comment">/* ICMP_PARAMPROB */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span><span class="title">ih_gwaddr</span>;</span>      <span class="comment">/* gateway address */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ih_idseq</span>                 /* <span class="title">echo</span> <span class="title">datagram</span> */</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">u_int16_t</span>icd_id;</span><br><span class="line"><span class="keyword">u_int16_t</span>icd_seq;</span><br><span class="line">&#125;ih_idseq;</span><br><span class="line"><span class="keyword">u_int32_t</span>ih_void;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ICMP_UNREACH_NEEDFRAG -- Path MTU Discovery (RFC1191) */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ih_pmtu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">u_int16_t</span>ipm_void;</span><br><span class="line"><span class="keyword">u_int16_t</span>ipm_nextmtu;</span><br><span class="line">&#125; ih_pmtu;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ih_rtradv</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">u_int8_t</span>irt_num_addrs;</span><br><span class="line"><span class="keyword">u_int8_t</span>irt_wpa;</span><br><span class="line"><span class="keyword">u_int16_t</span>irt_lifetime;</span><br><span class="line">&#125; ih_rtradv;</span><br><span class="line">&#125; icmp_hun;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_pptricmp_hun.ih_pptr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_gwaddricmp_hun.ih_gwaddr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_idicmp_hun.ih_idseq.icd_id</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_seqicmp_hun.ih_idseq.icd_seq</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_voidicmp_hun.ih_void</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_pmvoidicmp_hun.ih_pmtu.ipm_void</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_nextmtuicmp_hun.ih_pmtu.ipm_nextmtu</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_num_addrsicmp_hun.ih_rtradv.irt_num_addrs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_wpaicmp_hun.ih_rtradv.irt_wpa</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_lifetimeicmp_hun.ih_rtradv.irt_lifetime</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">u_int32_t</span>its_otime;</span><br><span class="line"><span class="keyword">u_int32_t</span>its_rtime;</span><br><span class="line"><span class="keyword">u_int32_t</span>its_ttime;</span><br><span class="line">&#125; id_ts;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip</span> <span class="title">idi_ip</span>;</span></span><br><span class="line"><span class="comment">/* options and then 64 bits of data */</span></span><br><span class="line">&#125;id_ip;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">icmp_ra_addr</span><span class="title">id_radv</span>;</span></span><br><span class="line"><span class="keyword">u_int32_t</span>id_mask;</span><br><span class="line"><span class="keyword">u_int8_t</span>id_data[<span class="number">1</span>];</span><br><span class="line">&#125; icmp_dun;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_otimeicmp_dun.id_ts.its_otime</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_rtimeicmp_dun.id_ts.its_rtime</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_ttimeicmp_dun.id_ts.its_ttime</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_ipicmp_dun.id_ip.idi_ip</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_radvicmp_dun.id_radv</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_maskicmp_dun.id_mask</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> icmp_dataicmp_dun.id_data</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;使用宏定义表达更简洁，其中ICMP报文为8字节，数据报长度最大为64K字节。</p><p>&emsp;&emsp;校验和算法：这一算法称为网际校验和算法，把校验的数据16位进行累加，然后取反码，若数据字节长度为奇数，则数据尾部补一个字节的0以凑成偶数。此算法适用于IPv4、ICMPv4、ICMPv6、UDP和TCP校验和，校验和字段为上述ICMP数据结构的icmp_cksum变量。<br>&emsp;&emsp;标识符：用于唯一标识ICMP报文，为上述ICMP数据结构的icmp_id宏定义指的变量。<br>&emsp;&emsp;顺序号：ping命令的icmp_seq便由这里读出，代表ICMP报文的发送顺序，为上述ICMP数据结构的icmp_seq宏所指的变量。</p><p><strong>ICMP封包后</strong>：<table class="table_center"><tr><th>ICMP报头</th><th>ICMP报文</th></tr></table><br>&emsp;&emsp;ICMP是为网管和目标主机二提供的一种差错控制机制，使它们在遇到差错时能把错误报告给报文源发方。ICMP协议是IP层的一个协议，但是由于差错报告在发送给报文源发方时可能也要经过若干子网，因此牵扯到路由选择等问题，所以ICMP报文通过IP协议来发送。ICMP数据报的数据发送前需要两级封装：首先添加ICMP报头形成ICMP报文，再添加IP报头形成IP数据报。因此我们还需知道IP报文的格式。</p><p>&emsp;&emsp;<strong>IP报文格式</strong>：<div align="center"><img src="/img/note_01/02.png" alt></div><br>整个ICMP报文作为IP报文的数据部分，再给ICMP报文加个IP头部：</p><table class="table_center"><tr><th>IP头部</th><th>ICMP头部</th><th>ICMP数据</th></tr></table><p><strong>注:</strong> ip头部的考虑，在发送ICMP报文时不需要考虑IP头部，只需要组建一个完整测ICMP发送报文即TYPE为ICMP_ECHO、CODE为0的PING报文。在PING应答报文中对接收数据分析时，必须考虑IP头部，先去除IP头部后，进行对ICMP报文处理。<br>&emsp;&emsp;PING请求（发送）报文不考虑IP头部，PING应答（接收）报文考虑去除IP头部。</p><p>ip结构体  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  netinet/ip.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __BYTE_ORDER == __LITTLE_ENDIAN</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ip_hl:<span class="number">4</span>;               <span class="comment">/* header length */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ip_v:<span class="number">4</span>;                <span class="comment">/* version */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __BYTE_ORDER == __BIG_ENDIAN</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ip_v:<span class="number">4</span>;                <span class="comment">/* version */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ip_hl:<span class="number">4</span>;               <span class="comment">/* header length */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">u_int8_t</span> ip_tos;                    <span class="comment">/* type of service */</span></span><br><span class="line">u_short ip_len;                     <span class="comment">/* total length */</span></span><br><span class="line">u_short ip_id;                      <span class="comment">/* identification */</span></span><br><span class="line">u_short ip_off;                     <span class="comment">/* fragment offset field */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_RF 0x8000                    <span class="comment">/* reserved fragment flag */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_DF 0x4000                    <span class="comment">/* dont fragment flag */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_MF 0x2000                    <span class="comment">/* more fragments flag */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_OFFMASK 0x1fff               <span class="comment">/* mask for fragmenting bits */</span></span></span><br><span class="line"><span class="keyword">u_int8_t</span> ip_ttl;                    <span class="comment">/* time to live */</span></span><br><span class="line"><span class="keyword">u_int8_t</span> ip_p;                      <span class="comment">/* protocol */</span></span><br><span class="line">u_short ip_sum;                     <span class="comment">/* checksum */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_src</span>, <span class="title">ip_dst</span>;</span>      <span class="comment">/* source and dest address */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>PING程序中主要使用以下数据：</p><ul><li>IP报文头部长度IHL(Internet Header Length),以4字节为单位记录IP头部长度（ip_hl）。</li><li>生命周期(TTL)以秒为单位，指出IP数据报能在网络上停留的最长时间，其值由发送方设定，并在经过路由的每一个节点时建议，当该值为0时，数据报被丢弃（ip_ttl）。</li></ul><p>ping程序代码流程：</p><ul><li>1、参数合法性检查，获取（转换）目标地址</li><li>2、发送报文</li><li>3、接收报文</li><li>4、打印PING信息</li></ul><p><strong>1、参数合法性检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">in_addr_t</span> inaddr;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">dest_addr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> socket_fd;  </span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">50</span> *<span class="number">1024</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">p_host</span>;</span></span><br><span class="line">    <span class="keyword">int</span> n_send = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usgae: %s [hostname/ip address]\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 创建socket套接字 AF_INET ipv4  IPPROTO_ICMP icmp协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    socket_fd = socket(AF_INET,SOCK_RAW,IPPROTO_ICMP); </span><br><span class="line">    <span class="keyword">if</span>(socket_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"fail socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * setsockopt 这里使用主要是设置接收数据包缓冲区，避免了send(),recv()不断的循环收发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(setsockopt(socket_fd,SOL_SOCKET,SO_RCVBUF,&amp;size,<span class="keyword">sizeof</span>(size)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">"fail setsocketopt"</span>);    </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    bzero(&amp;dest_addr,<span class="keyword">sizeof</span>(dest_addr));</span><br><span class="line">    dest_addr.sin_family = AF_INET;</span><br><span class="line">    </span><br><span class="line">    inaddr = inet_addr(argv[<span class="number">1</span>]); <span class="comment">// 将点分十进制ip地址转换为网络字节序</span></span><br><span class="line">    <span class="keyword">if</span>(inaddr == INADDR_NONE)&#123;</span><br><span class="line">        p_host = gethostbyname2_block_proc(argv[<span class="number">1</span>],<span class="number">12</span>); <span class="comment">//gethostbyname2 防止阻塞处理</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == p_host)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"unknow host:%s\n"</span>,argv[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;dest_addr.sin_addr,p_host-&gt;h_addr,p_host-&gt;h_length);    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dest_addr.sin_addr.s_addr = inaddr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> != p_host)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"PING %s"</span>,p_host-&gt;h_name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"PING %s"</span>,argv[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(%s) %d bytes of data.\n"</span>,inet_ntoa(dest_addr.sin_addr),ICMP_LEN);  </span><br><span class="line">    signal(SIGINT,statistics);</span><br><span class="line">    pHost = p_host; <span class="comment">// pHost statisticsd 打印信息使用</span></span><br><span class="line">    IP = argv[<span class="number">1</span>];  <span class="comment">// IP statistics打印信息使用</span></span><br><span class="line">    SocketICMP = socket_fd;  <span class="comment">//SocketICMP statistics()函数close套接字使用</span></span><br><span class="line">    <span class="keyword">while</span>(n_send &lt; SEND_NUM )&#123;</span><br><span class="line">        send_packet(socket_fd,&amp;dest_addr,n_send);</span><br><span class="line">        </span><br><span class="line">        recv_packet(socket_fd,&amp;dest_addr);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        n_send++;</span><br><span class="line">        nSend = n_send; <span class="comment">// nSend statistics打印信息使用</span></span><br><span class="line">    &#125;</span><br><span class="line">    statistics();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、发送数据</strong><br>发送数据主要包括组建ICMP报文，发送报文；组建ICMP报文时需要计算校验和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">u_int16_t</span> compute_cksum(<span class="keyword">u_int16_t</span> *p_data,<span class="keyword">int</span> data_len)&#123;</span><br><span class="line">    <span class="keyword">u_int16_t</span> *p_tmp_data = p_data;</span><br><span class="line">    <span class="keyword">int</span> len = data_len;</span><br><span class="line">    <span class="keyword">u_int32_t</span> sum = <span class="number">0</span>; <span class="comment">// sum 必须为 u_int32_t 不能为 u_int16_t   </span></span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        sum += *p_tmp_data++;</span><br><span class="line">        len -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> == len)&#123;</span><br><span class="line">        <span class="keyword">u_int16_t</span> tmp = *p_tmp_data;</span><br><span class="line">        tmp &amp;= <span class="number">0xff00</span>;</span><br><span class="line">        sum += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(sum &gt;&gt; <span class="number">16</span>)&#123;</span><br><span class="line">        sum = (sum &gt;&gt; <span class="number">16</span>) + (sum &amp; <span class="number">0x0000ffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sum = ~sum;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 组建ICMP报文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_icmp</span><span class="params">(<span class="keyword">char</span> *p_send_buffer,<span class="keyword">u_int16_t</span> seq)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">icmp</span> *<span class="title">p_icmp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> *<span class="title">p_time</span>;</span></span><br><span class="line">    </span><br><span class="line">    p_icmp = (struct icmp *)p_send_buffer;</span><br><span class="line">    p_icmp-&gt;icmp_type = ICMP_ECHO;</span><br><span class="line">    p_icmp-&gt;icmp_code = <span class="number">0</span>;</span><br><span class="line">    p_icmp-&gt;icmp_cksum = <span class="number">0</span>;</span><br><span class="line">    p_icmp-&gt;icmp_seq = seq;</span><br><span class="line">    p_icmp-&gt;icmp_id = getpid();</span><br><span class="line">    p_time = (struct timeval *)p_icmp-&gt;icmp_data;</span><br><span class="line">    gettimeofday(p_time,<span class="literal">NULL</span>);</span><br><span class="line">    p_icmp-&gt;icmp_cksum = compute_cksum((<span class="keyword">u_int16_t</span> *)p_icmp,ICMP_LEN);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(seq == <span class="number">1</span>)&#123;</span><br><span class="line">        FirstSendTime = *p_time;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send_packet</span><span class="params">(<span class="keyword">int</span> socket_fd,struct sockaddr_in *p_dest_addr,<span class="keyword">int</span> n_send)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> send_buffer[BUFFER_LEN];</span><br><span class="line">    set_icmp(send_buffer,n_send);</span><br><span class="line">    <span class="keyword">if</span>(sendto(socket_fd,send_buffer,ICMP_LEN,<span class="number">0</span>,(</span><br><span class="line">        struct sockaddr *)p_dest_addr,<span class="keyword">sizeof</span>(struct sockaddr_in))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"sendto"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、接收数据</strong><br>接收数据包括接收数据和数据分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unpack</span><span class="params">(<span class="keyword">char</span> *p_recv_buffer,struct timeval *p_recv_time)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ip</span> *<span class="title">p_ip</span> = (<span class="title">struct</span> <span class="title">ip</span> *)<span class="title">p_recv_buffer</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">icmp</span> *<span class="title">p_icmp</span> ;</span></span><br><span class="line">    <span class="keyword">int</span> ip_head_len;</span><br><span class="line">    <span class="keyword">double</span> rtt=<span class="number">0.0</span>; </span><br><span class="line"></span><br><span class="line">    ip_head_len = p_ip-&gt;ip_hl &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    p_icmp = (struct icmp *)(p_recv_buffer + ip_head_len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p_icmp-&gt;icmp_type == ICMP_ECHOREPLY &amp;&amp; p_icmp-&gt;icmp_id == getpid())&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> *<span class="title">p_send_time</span> = (<span class="title">struct</span> <span class="title">timeval</span> *)<span class="title">p_icmp</span>-&gt;<span class="title">icmp_data</span>;</span></span><br><span class="line">        rtt = get_rtt(p_recv_time,p_send_time);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%u bytes from %s:icmp_seq=%u ttl=%u time=%.1f ms\n"</span>,</span><br><span class="line">            ntohs(p_ip-&gt;ip_len),inet_ntoa(p_ip-&gt;ip_src),p_icmp-&gt;icmp_seq,</span><br><span class="line">            p_ip-&gt;ip_ttl,rtt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rtt &lt; min || <span class="number">0</span> == min)&#123;</span><br><span class="line">            min = rtt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rtt &gt; max)&#123;</span><br><span class="line">            max = rtt;</span><br><span class="line">        &#125;</span><br><span class="line">        avg += rtt;</span><br><span class="line">        mdev += rtt*rtt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv_packet</span><span class="params">(<span class="keyword">int</span> socket_fd,struct sockaddr_in *p_dest_addr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> recv_bytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> addrlen = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">    <span class="keyword">char</span> recv_buffer[BUFFER_LEN];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">recv_time</span>;</span></span><br><span class="line">    </span><br><span class="line">    signal(SIGALRM,statistics);</span><br><span class="line">    alarm(WAIT_TIME);</span><br><span class="line"></span><br><span class="line">    recv_bytes = recvfrom(socket_fd,recv_buffer,BUFFER_LEN,<span class="number">0</span>,</span><br><span class="line">        (struct sockaddr *)p_dest_addr,&amp;addrlen);</span><br><span class="line">    <span class="keyword">if</span>(recv_bytes &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"recvfrom"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gettimeofday(&amp;recv_time,<span class="literal">NULL</span>);</span><br><span class="line">    LastRecvTime = recv_time;</span><br><span class="line">    <span class="keyword">if</span>(unpack(recv_buffer,&amp;recv_time) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nRecv++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_rtt</span><span class="params">(struct timeval *p_recv_time,struct timeval *p_send_time)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tmp_time</span> = *<span class="title">p_recv_time</span>;</span></span><br><span class="line">    </span><br><span class="line">    tmp_time.tv_usec -= p_send_time-&gt;tv_usec;</span><br><span class="line">    <span class="keyword">if</span>(tmp_time.tv_usec &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        --(tmp_time.tv_sec);</span><br><span class="line">        tmp_time.tv_usec += <span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp_time.tv_sec -= p_send_time-&gt;tv_sec;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (tmp_time.tv_sec *<span class="number">1000.0</span>) + (tmp_time.tv_usec / <span class="number">1000.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、打印数据</strong><br>统计数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">statistics</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> tmp;</span><br><span class="line">    avg /= nRecv;</span><br><span class="line">    tmp = mdev/nRecv - avg * avg;</span><br><span class="line">    mdev = <span class="built_in">sqrt</span>(tmp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> != pHost)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"--- %s ping statistics ---\n"</span>,pHost-&gt;h_name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"--- %s ping statistics ---\n"</span>,IP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d packets transmitted, %d received, %d%% packet loss, time %dms\n"</span>,</span><br><span class="line">        nSend,nRecv,(nSend-nRecv)/nSend *<span class="number">100</span>,(<span class="keyword">int</span>)get_rtt(&amp;LastRecvTime,&amp;FirstSendTime));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"rtt min/avg/max/dev = %.3f/%.3f/%.3f/%.3f ms\n"</span>,min,avg,max,mdev);</span><br><span class="line">    </span><br><span class="line">    close(SocketICMP);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/ip_icmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEND_NUM 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_LEN 128</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ICMP_HEAD_LEN 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ICMP_DATA_LEN 56</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ICMP_LEN (ICMP_HEAD_LEN + ICMP_DATA_LEN)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char SendBuffer[BUFFER_LEN];</span></span><br><span class="line"><span class="comment">//char RecvBuffer[BUFFER_LEN];</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">pHost</span>;</span></span><br><span class="line"><span class="keyword">char</span> *IP;</span><br><span class="line"><span class="keyword">int</span> nRecv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> nSend = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> min=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> avg=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> max=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> mdev =<span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">FirstSendTime</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">LastRecvTime</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WAIT_TIME 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SocketICMP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">u_int16_t</span> compute_cksum(<span class="keyword">u_int16_t</span> *p_data,<span class="keyword">int</span> data_len)&#123;</span><br><span class="line">    <span class="keyword">u_int16_t</span> *p_tmp_data = p_data;</span><br><span class="line">    <span class="keyword">int</span> len = data_len;</span><br><span class="line">    <span class="keyword">u_int32_t</span> sum = <span class="number">0</span>; <span class="comment">// sum 必须为 u_int32_t 不能为 u_int16_t   </span></span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        sum += *p_tmp_data++;</span><br><span class="line">        len -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> == len)&#123;</span><br><span class="line">        <span class="keyword">u_int16_t</span> tmp = *p_tmp_data;</span><br><span class="line">        tmp &amp;= <span class="number">0xff00</span>;</span><br><span class="line">        sum += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(sum &gt;&gt; <span class="number">16</span>)&#123;</span><br><span class="line">        sum = (sum &gt;&gt; <span class="number">16</span>) + (sum &amp; <span class="number">0x0000ffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sum = ~sum;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_icmp</span><span class="params">(<span class="keyword">char</span> *p_send_buffer,<span class="keyword">u_int16_t</span> seq)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">icmp</span> *<span class="title">p_icmp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> *<span class="title">p_time</span>;</span></span><br><span class="line">    </span><br><span class="line">    p_icmp = (struct icmp *)p_send_buffer;</span><br><span class="line">    p_icmp-&gt;icmp_type = ICMP_ECHO;</span><br><span class="line">    p_icmp-&gt;icmp_code = <span class="number">0</span>;</span><br><span class="line">    p_icmp-&gt;icmp_cksum = <span class="number">0</span>;</span><br><span class="line">    p_icmp-&gt;icmp_seq = seq;</span><br><span class="line">    p_icmp-&gt;icmp_id = getpid();</span><br><span class="line">    p_time = (struct timeval *)p_icmp-&gt;icmp_data;</span><br><span class="line">    gettimeofday(p_time,<span class="literal">NULL</span>);</span><br><span class="line">    p_icmp-&gt;icmp_cksum = compute_cksum((<span class="keyword">u_int16_t</span> *)p_icmp,ICMP_LEN);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(seq == <span class="number">1</span>)&#123;</span><br><span class="line">        FirstSendTime = *p_time;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send_packet</span><span class="params">(<span class="keyword">int</span> socket_fd,struct sockaddr_in *p_dest_addr,<span class="keyword">int</span> n_send)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> send_buffer[BUFFER_LEN];</span><br><span class="line">    set_icmp(send_buffer,n_send);</span><br><span class="line">    <span class="keyword">if</span>(sendto(socket_fd,send_buffer,ICMP_LEN,<span class="number">0</span>,(</span><br><span class="line">        struct sockaddr *)p_dest_addr,<span class="keyword">sizeof</span>(struct sockaddr_in))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"sendto"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_rtt</span><span class="params">(struct timeval *p_recv_time,struct timeval *p_send_time)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tmp_time</span> = *<span class="title">p_recv_time</span>;</span></span><br><span class="line">    </span><br><span class="line">    tmp_time.tv_usec -= p_send_time-&gt;tv_usec;</span><br><span class="line">    <span class="keyword">if</span>(tmp_time.tv_usec &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        --(tmp_time.tv_sec);</span><br><span class="line">        tmp_time.tv_usec += <span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp_time.tv_sec -= p_send_time-&gt;tv_sec;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (tmp_time.tv_sec *<span class="number">1000.0</span>) + (tmp_time.tv_usec / <span class="number">1000.0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">statistics</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> tmp;</span><br><span class="line">    avg /= nRecv;</span><br><span class="line">    tmp = mdev/nRecv - avg * avg;</span><br><span class="line">    mdev = <span class="built_in">sqrt</span>(tmp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> != pHost)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"--- %s ping statistics ---\n"</span>,pHost-&gt;h_name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"--- %s ping statistics ---\n"</span>,IP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d packets transmitted, %d received, %d%% packet loss, time %dms\n"</span>,</span><br><span class="line">        nSend,nRecv,(nSend-nRecv)/nSend *<span class="number">100</span>,(<span class="keyword">int</span>)get_rtt(&amp;LastRecvTime,&amp;FirstSendTime));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"rtt min/avg/max/dev = %.3f/%.3f/%.3f/%.3f ms\n"</span>,min,avg,max,mdev);</span><br><span class="line">    </span><br><span class="line">    close(SocketICMP);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unpack</span><span class="params">(<span class="keyword">char</span> *p_recv_buffer,struct timeval *p_recv_time)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ip</span> *<span class="title">p_ip</span> = (<span class="title">struct</span> <span class="title">ip</span> *)<span class="title">p_recv_buffer</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">icmp</span> *<span class="title">p_icmp</span> ;</span></span><br><span class="line">    <span class="keyword">int</span> ip_head_len;</span><br><span class="line">    <span class="keyword">double</span> rtt=<span class="number">0.0</span>; </span><br><span class="line"></span><br><span class="line">    ip_head_len = p_ip-&gt;ip_hl &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    p_icmp = (struct icmp *)(p_recv_buffer + ip_head_len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p_icmp-&gt;icmp_type == ICMP_ECHOREPLY &amp;&amp; p_icmp-&gt;icmp_id == getpid())&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> *<span class="title">p_send_time</span> = (<span class="title">struct</span> <span class="title">timeval</span> *)<span class="title">p_icmp</span>-&gt;<span class="title">icmp_data</span>;</span></span><br><span class="line">        rtt = get_rtt(p_recv_time,p_send_time);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%u bytes from %s:icmp_seq=%u ttl=%u time=%.1f ms\n"</span>,</span><br><span class="line">            ntohs(p_ip-&gt;ip_len),inet_ntoa(p_ip-&gt;ip_src),p_icmp-&gt;icmp_seq,</span><br><span class="line">            p_ip-&gt;ip_ttl,rtt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rtt &lt; min || <span class="number">0</span> == min)&#123;</span><br><span class="line">            min = rtt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rtt &gt; max)&#123;</span><br><span class="line">            max = rtt;</span><br><span class="line">        &#125;</span><br><span class="line">        avg += rtt;</span><br><span class="line">        mdev += rtt*rtt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv_packet</span><span class="params">(<span class="keyword">int</span> socket_fd,struct sockaddr_in *p_dest_addr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> recv_bytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> addrlen = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">    <span class="keyword">char</span> recv_buffer[BUFFER_LEN];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">recv_time</span>;</span></span><br><span class="line">    </span><br><span class="line">    signal(SIGALRM,statistics);</span><br><span class="line">    alarm(WAIT_TIME);</span><br><span class="line"></span><br><span class="line">    recv_bytes = recvfrom(socket_fd,recv_buffer,BUFFER_LEN,<span class="number">0</span>,</span><br><span class="line">        (struct sockaddr *)p_dest_addr,&amp;addrlen);</span><br><span class="line">    <span class="keyword">if</span>(recv_bytes &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"recvfrom"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gettimeofday(&amp;recv_time,<span class="literal">NULL</span>);</span><br><span class="line">    LastRecvTime = recv_time;</span><br><span class="line">    <span class="keyword">if</span>(unpack(recv_buffer,&amp;recv_time) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nRecv++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> sigjmp_buf jmpbuf;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alarm_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     siglongjmp(jmpbuf, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> struct hostent * <span class="title">gethostbyname2_block_proc</span><span class="params">(<span class="keyword">char</span> *p_hostname,<span class="keyword">int</span> timeout)</span></span>&#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">p_ret_hostent</span>;</span></span><br><span class="line"> </span><br><span class="line">     signal(SIGALRM, alarm_func);</span><br><span class="line">     <span class="keyword">if</span>(sigsetjmp(jmpbuf, <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">           alarm(<span class="number">0</span>); <span class="comment">/* 取消闹钟 */</span></span><br><span class="line">           signal(SIGALRM, SIG_IGN);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     alarm(timeout); <span class="comment">/* 设置超时时间 */</span></span><br><span class="line">     p_ret_hostent = gethostbyname2(p_hostname,AF_INET); <span class="comment">// gethostbyname2指定AF_IENT IPV4地址</span></span><br><span class="line">     signal(SIGALRM, SIG_IGN);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> p_ret_hostent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">in_addr_t</span> inaddr;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">dest_addr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> socket_fd;  </span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">50</span> *<span class="number">1024</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">p_host</span>;</span></span><br><span class="line">    <span class="keyword">int</span> n_send = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usgae: %s [hostname/ip address]\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 创建socket套接字 AF_INET ipv4  IPPROTO_ICMP icmp协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    socket_fd = socket(AF_INET,SOCK_RAW,IPPROTO_ICMP); </span><br><span class="line">    <span class="keyword">if</span>(socket_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"fail socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * setsockopt 这里使用主要是设置接收数据包缓冲区，避免了send(),recv()不断的循环收发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(setsockopt(socket_fd,SOL_SOCKET,SO_RCVBUF,&amp;size,<span class="keyword">sizeof</span>(size)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">"fail setsocketopt"</span>);    </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    bzero(&amp;dest_addr,<span class="keyword">sizeof</span>(dest_addr));</span><br><span class="line">    dest_addr.sin_family = AF_INET;</span><br><span class="line">    </span><br><span class="line">    inaddr = inet_addr(argv[<span class="number">1</span>]); <span class="comment">// 将点分十进制ip地址转换为网络字节序</span></span><br><span class="line">    <span class="keyword">if</span>(inaddr == INADDR_NONE)&#123;</span><br><span class="line">        p_host = gethostbyname2_block_proc(argv[<span class="number">1</span>],<span class="number">12</span>); <span class="comment">//gethostbyname2 防止阻塞处理</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == p_host)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"unknow host:%s\n"</span>,argv[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;dest_addr.sin_addr,p_host-&gt;h_addr,p_host-&gt;h_length);    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dest_addr.sin_addr.s_addr = inaddr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> != p_host)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"PING %s"</span>,p_host-&gt;h_name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"PING %s"</span>,argv[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(%s) %d bytes of data.\n"</span>,inet_ntoa(dest_addr.sin_addr),ICMP_LEN);  </span><br><span class="line">    signal(SIGINT,statistics);</span><br><span class="line">    pHost = p_host; <span class="comment">// pHost statisticsd 打印信息使用</span></span><br><span class="line">    IP = argv[<span class="number">1</span>];  <span class="comment">// IP statistics打印信息使用</span></span><br><span class="line">    SocketICMP = socket_fd;  <span class="comment">//SocketICMP statistics()函数close套接字使用</span></span><br><span class="line">    <span class="keyword">while</span>(n_send &lt; SEND_NUM )&#123;</span><br><span class="line">        send_packet(socket_fd,&amp;dest_addr,n_send);</span><br><span class="line">        </span><br><span class="line">        recv_packet(socket_fd,&amp;dest_addr);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        n_send++;</span><br><span class="line">        nSend = n_send; <span class="comment">// nSend statistics打印信息使用</span></span><br><span class="line">    &#125;</span><br><span class="line">    statistics();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ping </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux CPU使用率</title>
      <link href="/2018/06/26/%E7%AC%94%E8%AE%B0/0cLinuxCPU%E4%BD%BF%E7%94%A8%E7%8E%87/"/>
      <url>/2018/06/26/%E7%AC%94%E8%AE%B0/0cLinuxCPU%E4%BD%BF%E7%94%A8%E7%8E%87/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_0c/00.png" alt></p></div><p>CPU活动信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/<span class="built_in">stat</span></span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_0c/01.png" alt></p></div><p>jiffies是内核中的一个全局变量，用来记录自系统启动以来产生的节拍书，在linux中，一个节拍大致可以立即为操作系统进程调度的最小时间片，不同的linux内核可能值有所不同，通常在1ms到10ms之间。</p><p><strong>参数说明:</strong></p><table><thead><tr><th align="left">参数</th><th align="left">解释(jiffies)</th></tr></thead><tbody><tr><td align="left">user（<code>6001460</code>）</td><td align="left">从系统启动开始累计到当前时刻，处于用户态的运行时间，不包含nice值为负进程</td></tr><tr><td align="left">nice（<code>37043</code>）</td><td align="left">从系统启动开始累计到当前时刻，nice值为负的进程所占用的CPU时间</td></tr><tr><td align="left">system（<code>95525758</code>）</td><td align="left">从系统启动开始累计到当前时刻，核心时间</td></tr><tr><td align="left">idle（<code>277280659</code>）</td><td align="left">从系统启动开始累计到当前时刻，除IO等待时间以外其它等待时间</td></tr><tr><td align="left">iowait（<code>904849</code>）</td><td align="left">从系统启动开始累计到当前时刻，IO等待时间</td></tr><tr><td align="left">irq（<code>0</code>）</td><td align="left">从系统启动开始累计到当前时刻，硬中断时间</td></tr><tr><td align="left">softirq（<code>200629</code>）</td><td align="left">从系统启动开始累计到当前时刻，软中断时间</td></tr><tr><td align="left">stealstolen（<code>0</code>）</td><td align="left">which is the time spent in other operating systems when running in a virtualized environment(since 2.6.11)</td></tr><tr><td align="left">guest（<code>0</code>）</td><td align="left">which is the time spent running a virtual  CPU  for  guest operating systems under the control of the Linux kernel(since 2.6.24)</td></tr></tbody></table><h2 id="总的CPU使用率计算"><a href="#总的CPU使用率计算" class="headerlink" title="总的CPU使用率计算"></a><strong>总的CPU使用率计算</strong></h2><p>计算方法：</p><ul><li>1、采用两个足够用段的时间间隔的CPU快照，t1,t2。（user,nice,system,idle）</li><li>2、计算总的CPU时间片totalCPUTime<ul><li>a)、t1的CPU使用情况，求和s1;</li><li>b)、t2的CPU使用情况，求和s2;</li><li>c)、s2-s1得到时间间隔的所有时间片，即totalCPUTime = s2-s1;</li></ul></li><li>3、计算使用时间(usr+system)<ul><li>a)、t1的使用情况，u1 = (user+system).</li><li>b)、t2的使用情况，u2 = (user+system).</li><li>c)、u2-u1得到时间间隔的使用时间片，即useCPUTime = u2-u1;</li></ul></li><li>4、计算使用率<ul><li>pcpu = 100*(userCPUTime)/totalCPUTime;</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CPU_JIFFIES</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> user;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> nice;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> system;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idle;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_cpu_jiffies</span><span class="params">(struct CPU_JIFFIES *jiffies)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>] =&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    fp = fopen(<span class="string">"/proc/stat"</span>,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(buff, <span class="keyword">sizeof</span>(buff), fp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sscanf</span>(buff, <span class="string">"%s %u %u %u %u"</span>,jiffies-&gt;name, &amp;(jiffies-&gt;user), &amp;(jiffies-&gt;nice), &amp;(jiffies-&gt;system), &amp;(jiffies-&gt;idle));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %u %u %u %u\n"</span>, jiffies-&gt;name, jiffies-&gt;user, jiffies-&gt;nice, jiffies-&gt;system, jiffies-&gt;idle);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span>  <span class="title">cal_pcpu</span><span class="params">(struct CPU_JIFFIES e, struct CPU_JIFFIES s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> et, st;</span><br><span class="line">    <span class="keyword">double</span> eu, su;</span><br><span class="line">    <span class="keyword">double</span> idle ; </span><br><span class="line"></span><br><span class="line">    et = (<span class="keyword">double</span>)(e.user + e.nice + e.system + e.idle);</span><br><span class="line">    st = (<span class="keyword">double</span>)(s.user + s.nice + s.system + s.idle);</span><br><span class="line"></span><br><span class="line">    idle = (<span class="keyword">double</span>)(e.idle-s.idle);</span><br><span class="line"></span><br><span class="line">    eu = (<span class="keyword">double</span>)(e.user + e.system);</span><br><span class="line">    su = (<span class="keyword">double</span>)(s.user + s.system);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"et:%f st:%f eu:%f su:%f\n"</span>,et, st, eu,su );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,(<span class="number">100</span>*(eu-su))/(et-st));</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">100</span>*(et-st-idle))/(et-st);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CPU_JIFFIES</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CPU_JIFFIES</span> <span class="title">e</span>;</span></span><br><span class="line">    <span class="keyword">int</span> pcpu=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    get_cpu_jiffies(&amp;s);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    get_cpu_jiffies(&amp;e);</span><br><span class="line">    </span><br><span class="line">    pcpu = (<span class="keyword">int</span>)cal_pcpu(e,s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pcpu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TOP 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_0c/02.png" alt></p></div><p>内存使用<br>free命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_0c/03.png" alt></p></div><p>备注：</p><ul><li>1．不同内核版本/proc/stat文件格式不大一致。/proc/stat文件中第一行为总的cpu使用情况。<br>  各个版本都有的4个字段: <code>user</code>、<code>nice</code>、<code>system</code>、<code>idle</code><br>  2.5.41版本新增字段：<code>iowait</code><br>  2.6.0-test4新增字段：<code>irq</code>、<code>softirq</code><br>  2.6.11新增字段：<code>stealstolen</code>：which is the time spent in other operating systems when running in a virtualized environment<br>  2.6.24新增字段：<code>guest</code>：which is the time spent running a virtual  CPU  for  guest operating systems under the control of the Linux kernel</li><li>2．/proc/pid/task目录是Linux 2.6.0-test6之后才有的功能。</li><li>3．关于出现cpu使用率为负的情况，目前想到的解决方案是如果出现负值，连续采样计算cpu使用率直到为非负。</li><li>4．有些线程生命周期较短,可能在我们采样期间就已经死掉了.</li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>socket函数 几种不同的套接字使用</title>
      <link href="/2018/06/04/%E7%AC%94%E8%AE%B0/04socket%E5%87%BD%E6%95%B0/"/>
      <url>/2018/06/04/%E7%AC%94%E8%AE%B0/04socket%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>bits/socket.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Protocol families.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_UNSPEC   0   <span class="comment">/* Unspecified.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_LOCAL    1   <span class="comment">/* Local to host (pipes and file-domain).  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_UNIX     PF_LOCAL <span class="comment">/* POSIX name for PF_LOCAL.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_FILE     PF_LOCAL <span class="comment">/* Another non-standard name for PF_LOCAL.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_INET     2   <span class="comment">/* IP protocol family.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_AX25     3   <span class="comment">/* Amateur Radio AX.25.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_IPX      4   <span class="comment">/* Novell Internet Protocol.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_APPLETALK    5   <span class="comment">/* Appletalk DDP.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_NETROM   6   <span class="comment">/* Amateur radio NetROM.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_BRIDGE   7   <span class="comment">/* Multiprotocol bridge.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_ATMPVC   8   <span class="comment">/* ATM PVCs.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_X25      9   <span class="comment">/* Reserved for X.25 project.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_INET6    10  <span class="comment">/* IP version 6.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_ROSE     11  <span class="comment">/* Amateur Radio X.25 PLP.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_DECnet   12  <span class="comment">/* Reserved for DECnet project.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_NETBEUI  13  <span class="comment">/* Reserved for 802.2LLC project.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_SECURITY 14  <span class="comment">/* Security callback pseudo AF.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_KEY      15  <span class="comment">/* PF_KEY key management API.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_NETLINK  16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_ROUTE    PF_NETLINK <span class="comment">/* Alias to emulate 4.4BSD.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_PACKET   17  <span class="comment">/* Packet family.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_ASH      18  <span class="comment">/* Ash.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_ECONET   19  <span class="comment">/* Acorn Econet.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_ATMSVC   20  <span class="comment">/* ATM SVCs.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_RDS      21  <span class="comment">/* RDS sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_SNA      22  <span class="comment">/* Linux SNA Project */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_IRDA     23  <span class="comment">/* IRDA sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_PPPOX    24  <span class="comment">/* PPPoX sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_WANPIPE  25  <span class="comment">/* Wanpipe API sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_LLC      26  <span class="comment">/* Linux LLC.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_CAN      29  <span class="comment">/* Controller Area Network.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_TIPC     30  <span class="comment">/* TIPC sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_BLUETOOTH    31  <span class="comment">/* Bluetooth sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_IUCV     32  <span class="comment">/* IUCV sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_RXRPC    33  <span class="comment">/* RxRPC sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_ISDN     34  <span class="comment">/* mISDN sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_PHONET   35  <span class="comment">/* Phonet sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_IEEE802154   36  <span class="comment">/* IEEE 802.15.4 sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_CAIF     37  <span class="comment">/* CAIF sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_ALG      38  <span class="comment">/* Algorithm sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_NFC      39  <span class="comment">/* NFC sockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_VSOCK    40  <span class="comment">/* vSockets.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_MAX      41  <span class="comment">/* For now..  */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Address families.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_UNSPEC   PF_UNSPEC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_LOCAL    PF_LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_UNIX     PF_UNIX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_FILE     PF_FILE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_INET     PF_INET</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_AX25     PF_AX25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_IPX      PF_IPX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_APPLETALK    PF_APPLETALK</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_NETROM   PF_NETROM</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_BRIDGE   PF_BRIDGE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_ATMPVC   PF_ATMPVC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_X25      PF_X25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_INET6    PF_INET6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_ROSE     PF_ROSE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_DECnet   PF_DECnet</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_NETBEUI  PF_NETBEUI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_SECURITY PF_SECURITY</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_KEY      PF_KEY</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_NETLINK  PF_NETLINK</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_ROUTE    PF_ROUTE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_PACKET   PF_PACKET</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_ASH      PF_ASH</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_ECONET   PF_ECONET</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_ATMSVC   PF_ATMSVC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_RDS      PF_RDS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_SNA      PF_SNA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_IRDA     PF_IRDA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_PPPOX    PF_PPPOX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_WANPIPE  PF_WANPIPE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_LLC      PF_LLC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_CAN      PF_CAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_TIPC     PF_TIPC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_BLUETOOTH    PF_BLUETOOTH</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_IUCV     PF_IUCV</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_RXRPC    PF_RXRPC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_ISDN     PF_ISDN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_PHONET   PF_PHONET</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_IEEE802154   PF_IEEE802154</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_CAIF     PF_CAIF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_ALG      PF_ALG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_NFC      PF_NFC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_VSOCK    PF_VSOCK</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_MAX      PF_MAX</span></span><br></pre></td></tr></table></figure><p>AF_xx地址簇，BF_xx协议簇<br>AF_xx 与 BF_xx值相同</p><p>通常PF_INET表示互联网协议簇（TCP/IP协议簇）；或者PF_PACKET协议栈（底层数据包接口）</p><p>不同的AF_xx或BF_xx需要的目的结构不同</p><p>函数原型<br>int socket(int domain, int type, int protocol);</p><p><code>domain</code>:协议域，又称协议簇(family)。常用的协议簇有AF_INET,AF_INET6，AF_LOCAL(或称AF_UNIX,UNIX域Socket)、AF_ROUTE。协议簇决定Socket的地址类型。在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址(32位)与端口号(16位)的组合、AF_UNIX决定了要用一个绝对路径名作为地址。</p><p><code>type</code>:指定Socket类型。常用的socket类型有SOCK_STREAM(用于TCP)、SOCK_DGRAM（用于UDP）、SOCK_RAW（ICMP,IGMP）、SOCK_PACKET、SOCK_SEQPACKET、FA_PACKET.</p><p><code>protocol</code>：指定协议。常用的协议有IPPROTO_TCP、IPPROTO_UDP、IPPROTO_STCP、IPPROTO_TIPC。分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。</p><p>链路层套接字：PF_PACKET<br>该套接字的打开需要用户root权限。</p><p>其中socket type有两种类型SOCK_RAW,SOCK_DGRAM。<br><code>SOCK_RAW</code>:它包含了MAC层头部信息的原始分组，当然这种类型的套接字在发送的时候需要自己加上一个MAC头部（以太网头部，其类型定义在linux/if_ether.h中ethhdr）。应用：dhcpc中接收来自DHCP服务器数据时创建该套接字。portocol为：htons(ETH_P_IP)。 struct sockaddr_ll sock;<br><code>SOCK_DGRAM</code>:它已经进行了MAC层头部处理的，即收到的帧已经去掉了头部。应用：dhcpc在发送Discover等报文时使用该类型创建套接字，可无需添加以太网头部，只需添加IP头部、UDP头部和Data。portocol为：htons(ETH_P_IP)。</p><p><code>protocol</code>是指其送交的上层的协议好，如IP为0x0800.当其为htons(ETH_P_ALL)（其宏定义为0）时表示收发所有协议。</p><p>创建好套接字后，就可以通过UDP一样的recvform和sendto函数进行数据的收发，其目的的地址结构sockaddr_ll。这与传输层的地址结构定义是不一样的，其长度为20字节。（在TCP/IP的链路层地址中使用18字节），而传输层额结构长度为16字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_ll</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> sll_family; <span class="comment">// 总是AF_INET</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> sll_protocol; <span class="comment">//物理层的协议</span></span><br><span class="line">    <span class="keyword">int</span> sll_ifindex; <span class="comment">// 接口号</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> sll_hatype; <span class="comment">// 报文类型</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sll_pkttype; <span class="comment">// 分组类型</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sll_halen;   <span class="comment">// 地址长度</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sll_addr[<span class="number">8</span>]; <span class="comment">//物理层地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAC_BCAST_ADDR (unsigned char *) <span class="meta-string">"\xff\xff\xff\xff\xff\xff"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dhcp discover</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dhcp_discover</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    fd = socket(PF_PACKET,SOCK_DGRAM,htons(ETH_P_IP));</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_ll</span> <span class="title">dest</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;dest,<span class="number">0</span>,<span class="keyword">sizeof</span>(dest));</span><br><span class="line">    dest.sll_family = AF_PACKET;</span><br><span class="line">    dest.sll_protocol = htons(ETH_P_IP);</span><br><span class="line">    dest.sll_ifindex = ifindex; <span class="comment">// 随机数</span></span><br><span class="line">    dest.sll_halen = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(dest.sll_addr,MAC_BCAST_ADDR,<span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：<br>1、<a href="http://blog.csdn.net/luchengtao11/article/details/76635669" target="_blank" rel="noopener">raw_socket以及普通socket使用终极总结</a><br>2、<a href="http://blog.csdn.net/ttyttytty12/article/details/8141910" target="_blank" rel="noopener">socket建立</a></p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> 套接字 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核Socket实现</title>
      <link href="/2018/05/30/%E7%AC%94%E8%AE%B0/0bLinux%E5%86%85%E6%A0%B8Socket%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/05/30/%E7%AC%94%E8%AE%B0/0bLinux%E5%86%85%E6%A0%B8Socket%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>内核版本2.6.36</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  System call vectors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Argument checking cleaned up. Saved 20% in size.</span></span><br><span class="line"><span class="comment"> *  This function doesn't need to set the kernel lock because</span></span><br><span class="line"><span class="comment"> *  it is set by the callees.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE2(socketcall, <span class="keyword">int</span>, call, <span class="keyword">unsigned</span> <span class="keyword">long</span> __user *, args)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> a[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> a0, a1;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (call &lt; <span class="number">1</span> || call &gt; SYS_RECVMMSG)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    len = nargs[call];</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="keyword">sizeof</span>(a))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy_from_user should be SMP safe. */</span></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(a, args, len))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    audit_socketcall(nargs[call] / <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>), a);</span><br><span class="line"></span><br><span class="line">    a0 = a[<span class="number">0</span>];</span><br><span class="line">    a1 = a[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (call) &#123;</span><br><span class="line">    <span class="keyword">case</span> SYS_SOCKET:</span><br><span class="line">        err = sys_socket(a0, a1, a[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_BIND:</span><br><span class="line">        err = sys_bind(a0, (struct sockaddr __user *)a1, a[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_CONNECT:</span><br><span class="line">        err = sys_connect(a0, (struct sockaddr __user *)a1, a[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_LISTEN:</span><br><span class="line">        err = sys_listen(a0, a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_ACCEPT:</span><br><span class="line">        err = sys_accept4(a0, (struct sockaddr __user *)a1,</span><br><span class="line">                  (<span class="keyword">int</span> __user *)a[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_GETSOCKNAME:</span><br><span class="line">        err =</span><br><span class="line">            sys_getsockname(a0, (struct sockaddr __user *)a1,</span><br><span class="line">                    (<span class="keyword">int</span> __user *)a[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_GETPEERNAME:</span><br><span class="line">        err =</span><br><span class="line">            sys_getpeername(a0, (struct sockaddr __user *)a1,</span><br><span class="line">                    (<span class="keyword">int</span> __user *)a[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_SOCKETPAIR:</span><br><span class="line">        err = sys_socketpair(a0, a1, a[<span class="number">2</span>], (<span class="keyword">int</span> __user *)a[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_SEND:</span><br><span class="line">        err = sys_send(a0, (<span class="keyword">void</span> __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_SENDTO:</span><br><span class="line">        err = sys_sendto(a0, (<span class="keyword">void</span> __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>],</span><br><span class="line">                 (struct sockaddr __user *)a[<span class="number">4</span>], a[<span class="number">5</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_RECV:</span><br><span class="line">        err = sys_recv(a0, (<span class="keyword">void</span> __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_RECVFROM:</span><br><span class="line">        err = sys_recvfrom(a0, (<span class="keyword">void</span> __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>],</span><br><span class="line">                   (struct sockaddr __user *)a[<span class="number">4</span>],</span><br><span class="line">                   (<span class="keyword">int</span> __user *)a[<span class="number">5</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_SHUTDOWN:</span><br><span class="line">        err = sys_shutdown(a0, a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_SETSOCKOPT:</span><br><span class="line">        err = sys_setsockopt(a0, a1, a[<span class="number">2</span>], (<span class="keyword">char</span> __user *)a[<span class="number">3</span>], a[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_GETSOCKOPT:</span><br><span class="line">        err =</span><br><span class="line">            sys_getsockopt(a0, a1, a[<span class="number">2</span>], (<span class="keyword">char</span> __user *)a[<span class="number">3</span>],</span><br><span class="line">                   (<span class="keyword">int</span> __user *)a[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_SENDMSG:</span><br><span class="line">        err = sys_sendmsg(a0, (struct msghdr __user *)a1, a[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_RECVMSG:</span><br><span class="line">        err = sys_recvmsg(a0, (struct msghdr __user *)a1, a[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_RECVMMSG:</span><br><span class="line">        err = sys_recvmmsg(a0, (struct mmsghdr __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>],</span><br><span class="line">                   (struct timespec __user *)a[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SYS_ACCEPT4:</span><br><span class="line">        err = sys_accept4(a0, (struct sockaddr __user *)a1,</span><br><span class="line">                  (<span class="keyword">int</span> __user *)a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        err = -EINVAL;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>              <span class="comment">/* __ARCH_WANT_SYS_SOCKETCALL */</span></span></span><br></pre></td></tr></table></figure><div class="menu"></div><h2 id="一、创建Socket"><a href="#一、创建Socket" class="headerlink" title="一、创建Socket"></a><strong>一、创建Socket</strong></h2><p>　　Socket内核调用数SYSCALL_DEFINE3：<br>　　Socket的创建是在用户空间调用socket系统函数完成的，创建一个Socket返回一个文件描述符fd，内核的系统调用接口为SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol)，在net/socket.c文件中，下面我们看一下内核中的源码实现。</p><h3 id="1、SYSCALL-DEFINE3-socket-…"><a href="#1、SYSCALL-DEFINE3-socket-…" class="headerlink" title="1、SYSCALL_DEFINE3(socket,…)"></a><strong>1、SYSCALL_DEFINE3(socket,…)</strong></h3><p>SYSCALL_DEFINE3(<code>socket</code>, int, family, int, type, int, protocol)  // net/socket.c    line:1272</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE3(`socket`, <span class="keyword">int</span>, family, <span class="keyword">int</span>, type, <span class="keyword">int</span>, protocol)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> retval;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></span><br><span class="line"><span class="keyword">int</span> flags;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check the SOCK_* constants for consistency.  */</span></span><br><span class="line"><span class="comment">//进行各种检查操作</span></span><br><span class="line">BUILD_BUG_ON(SOCK_CLOEXEC != O_CLOEXEC);</span><br><span class="line">BUILD_BUG_ON((SOCK_MAX | SOCK_TYPE_MASK) != SOCK_TYPE_MASK);</span><br><span class="line">BUILD_BUG_ON(SOCK_CLOEXEC &amp; SOCK_TYPE_MASK);</span><br><span class="line">BUILD_BUG_ON(SOCK_NONBLOCK &amp; SOCK_TYPE_MASK);</span><br><span class="line"></span><br><span class="line">flags = type &amp; ~SOCK_TYPE_MASK;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; ~(SOCK_CLOEXEC | SOCK_NONBLOCK))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">type &amp;= SOCK_TYPE_MASK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCK_NONBLOCK != O_NONBLOCK &amp;&amp; (flags &amp; SOCK_NONBLOCK))</span><br><span class="line">flags = (flags &amp; ~SOCK_NONBLOCK) | O_NONBLOCK;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用创建socket的函数</span></span><br><span class="line">retval = `sock_create`(family, type, protocol, &amp;sock);    <span class="comment">// 详见----第一章第2节</span></span><br><span class="line"><span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">retval = `sock_map_fd`(sock, flags &amp; (O_CLOEXEC | O_NONBLOCK));  <span class="comment">//详见----第一章第6节</span></span><br><span class="line"><span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out_release;</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line"><span class="comment">/* It may be already another descriptor 8) Not kernel problem. */</span></span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line"></span><br><span class="line">out_release:</span><br><span class="line">sock_release(sock);</span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、sock-create函数"><a href="#2、sock-create函数" class="headerlink" title="2、sock_create函数"></a><strong>2、sock_create函数</strong></h3><p><code>sock_create</code>  // net/socket.c  line:1260</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_create</span><span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol, struct socket **res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> `__sock_create`(current-&gt;nsproxy-&gt;net_ns, family, type, protocol, res, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真正实现函数__sock_create();</p><p><code>__sock_create</code>函数实现  // net/socket.c  line 1147</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __sock_create(struct net *net, <span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol, struct socket **res, <span class="keyword">int</span> kern)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">net_proto_family</span> *<span class="title">pf</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Check protocol is in range</span></span><br><span class="line"><span class="comment"> *`检查协议的范围，现在内核定义的最大范围为38，这里的family指的是`</span></span><br><span class="line"><span class="comment"> *`AF_INET6，AF_INET协议簇`</span></span><br><span class="line"><span class="comment"> *`#define NPROTO      AF_MAX  //include/linux/net.h`</span></span><br><span class="line"><span class="comment"> *`#define AF_MAX      38  // For now.. `</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (family &lt; <span class="number">0</span> || family &gt;= NPROTO)</span><br><span class="line"><span class="keyword">return</span> -EAFNOSUPPORT;</span><br><span class="line"><span class="keyword">if</span> (type &lt; <span class="number">0</span> || type &gt;= SOCK_MAX)  <span class="comment">//`type： socket的类型 eg:SOCK_STREAM`</span></span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Compatibility.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This uglymoron is moved from INET layer to here to avoid</span></span><br><span class="line"><span class="comment">   deadlock in module load.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (family == PF_INET &amp;&amp; type == SOCK_PACKET) &#123; <span class="comment">// 如果soeket type 为SOCK_PACKET，需要重新给family赋值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> warned; <span class="comment">//默认初始化为0</span></span><br><span class="line"><span class="keyword">if</span> (!warned) &#123;</span><br><span class="line">warned = <span class="number">1</span>;</span><br><span class="line">printk(KERN_INFO <span class="string">"%s uses obsolete (PF_INET,SOCK_PACKET)\n"</span>,</span><br><span class="line">       current-&gt;comm);</span><br><span class="line">&#125;</span><br><span class="line">family = PF_PACKET; <span class="comment">//赋值为PF_PACKET</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = security_socket_create(family, type, protocol, kern);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Allocate the socket and allow the family to set things up. if</span></span><br><span class="line"><span class="comment"> *the protocol is 0, the family is instructed to select an appropriate</span></span><br><span class="line"><span class="comment"> *default.</span></span><br><span class="line"><span class="comment"> *`调用sock_alloc分配sock`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sock = `sock_alloc`();</span><br><span class="line"><span class="keyword">if</span> (!sock) &#123;</span><br><span class="line"><span class="keyword">if</span> (net_ratelimit())</span><br><span class="line">printk(KERN_WARNING <span class="string">"socket: no more sockets\n"</span>);</span><br><span class="line"><span class="keyword">return</span> -ENFILE;<span class="comment">/* Not exactly a match, but its the</span></span><br><span class="line"><span class="comment">   closest posix thing */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sock-&gt;type = type;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MODULES</span></span><br><span class="line"><span class="comment">/* Attempt to load a protocol module if the find failed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 12/09/1996 Marcin: But! this makes REALLY only sense, if the user</span></span><br><span class="line"><span class="comment"> * requested real, full-featured networking support upon configuration.</span></span><br><span class="line"><span class="comment"> * Otherwise module support will break!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (net_families[family] == <span class="literal">NULL</span>)</span><br><span class="line">request_module(<span class="string">"net-pf-%d"</span>, family);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">rcu_read_lock();</span><br><span class="line">pf = rcu_dereference(net_families[family]);</span><br><span class="line">err = -EAFNOSUPPORT;</span><br><span class="line"><span class="keyword">if</span> (!pf)</span><br><span class="line"><span class="keyword">goto</span> out_release;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We will call the -&gt;create function, that possibly is in a loadable</span></span><br><span class="line"><span class="comment"> * module, so we have to bump that loadable module refcnt first.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!try_module_get(pf-&gt;owner))</span><br><span class="line"><span class="keyword">goto</span> out_release;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now protected by module ref count */</span></span><br><span class="line">rcu_read_unlock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * static const struct net_proto_family inet_family_ops = &#123;</span></span><br><span class="line"><span class="comment"> *.family = PF_INET,</span></span><br><span class="line"><span class="comment"> *.create = inet_create,</span></span><br><span class="line"><span class="comment"> *.owner= THIS_MODULE,</span></span><br><span class="line"><span class="comment"> *&#125;; //net/ipv4/af_inet.c</span></span><br><span class="line"><span class="comment"> *`根据注册的family类型，调用不同的create函数，这里就是调用inet_ctreate。`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">err = pf-&gt;`create`(net, sock, protocol, kern);</span><br><span class="line"><span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out_module_put;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Now to bump the refcnt of the [loadable] module that owns this</span></span><br><span class="line"><span class="comment"> * socket at sock_release time we decrement its refcnt.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!try_module_get(sock-&gt;ops-&gt;owner))</span><br><span class="line"><span class="keyword">goto</span> out_module_busy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Now that we're done with the -&gt;create function, the [loadable]</span></span><br><span class="line"><span class="comment"> * module can have its refcnt decremented</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">module_put(pf-&gt;owner);</span><br><span class="line">err = security_socket_post_create(sock, family, type, protocol, kern);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">goto</span> out_sock_release;</span><br><span class="line">`*res = sock`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">out_module_busy:</span><br><span class="line">err = -EAFNOSUPPORT;</span><br><span class="line">out_module_put:</span><br><span class="line">sock-&gt;ops = <span class="literal">NULL</span>;</span><br><span class="line">module_put(pf-&gt;owner);</span><br><span class="line">out_sock_release:</span><br><span class="line">sock_release(sock);</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">out_release:</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="keyword">goto</span> out_sock_release;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、sock-alloc函数"><a href="#3、sock-alloc函数" class="headerlink" title="3、sock_alloc函数"></a><strong>3、sock_alloc函数</strong></h3><p>　　sock_alloc函数用于分配一个socket结构体，这这里涉及了inode结构以及在分配完成后返回的地址指针。<br><code>sock_alloc</code>  // net/socket.c   line:471</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *sock_alloc-allocate a socket</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Allocate a new inode and socket object. The two are bound together</span></span><br><span class="line"><span class="comment"> *and initialised. The socket is then returned. If we are out of inodes</span></span><br><span class="line"><span class="comment"> *NULL is returned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> struct socket *<span class="title">sock_alloc</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*下面的new_inode_pseudo函数是分配一个新的inode结构体，但在实际分配过程中，分配了一个socket_alloc结构体，返回d的是inode地址，</span></span><br><span class="line"><span class="comment"> *struct socket_alloc &#123;</span></span><br><span class="line"><span class="comment">     *struct socket socket;</span></span><br><span class="line"><span class="comment">     *struct inode vfs_inode;</span></span><br><span class="line"><span class="comment"> *&#125;; //include/net/sock.h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">inode = `new_inode(sock_mnt-&gt;mnt_sb)`; <span class="comment">// new_inode 详见 fs/inode.c中实现,sock_mnt什么时候初始化</span></span><br><span class="line"><span class="keyword">if</span> (!inode)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SOCKET_I</span></span><br><span class="line"><span class="comment"> * static inline struct socket *SOCKET_I(struct inode *inode)</span></span><br><span class="line"><span class="comment">  *&#123;</span></span><br><span class="line"><span class="comment">  *  return &amp;container_of(inode, struct socket_alloc, vfs_inode)-&gt;socket;</span></span><br><span class="line"><span class="comment"> *&#125;//include/net/sock.h</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *#define container_of(ptr, type, member) (&#123;\</span></span><br><span class="line"><span class="comment">   *const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);\</span></span><br><span class="line"><span class="comment">   *(type *)( (char *)__mptr - offsetof(type,member) );&#125;)</span></span><br><span class="line"><span class="comment">   *#endif  //drivers/staging/rtl8192e/ieee80211.h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sock = SOCKET_I(inode); <span class="comment">// 该宏根据返回的inode获取到分配的socket_alloc指针</span></span><br><span class="line"></span><br><span class="line">kmemcheck_annotate_bitfield(sock, type);</span><br><span class="line"><span class="comment">/* inode变量进行初始化操作 */</span></span><br><span class="line">inode-&gt;i_mode = S_IFSOCK | S_IRWXUGO;</span><br><span class="line">inode-&gt;i_uid = current_fsuid(); <span class="comment">// 用户ID，在后面调用bind系统调用时会进行对比</span></span><br><span class="line">inode-&gt;i_gid = current_fsgid(); <span class="comment">// 组ID</span></span><br><span class="line"></span><br><span class="line">percpu_add(sockets_in_use, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1、sock-mnt-gt-mnt-sb的赋值分配过程"><a href="#3-1、sock-mnt-gt-mnt-sb的赋值分配过程" class="headerlink" title="3.1、sock_mnt-&gt;mnt_sb的赋值分配过程"></a><strong>3.1、sock_mnt-&gt;mnt_sb的赋值分配过程</strong></h4><p>　　在sock_init函数中对socket类型的文件系统进行注册<br><code>sock_mnt</code>   // net/sock.c  line:316</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *`<span class="title">sock_mnt</span>` __<span class="title">read_mostly</span>;</span></span><br></pre></td></tr></table></figure><p>　　sock_mnt数据类型为结构体  vfsmount;<br><code>vfsmount</code>结构体 include/linux/mount.h     line:49</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_hash</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *<span class="title">mnt_parent</span>;</span><span class="comment">/* fs we are mounted on */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">mnt_mountpoint</span>;</span><span class="comment">/* dentry of mountpoint */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">mnt_root</span>;</span><span class="comment">/* root of the mounted tree */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *`<span class="title">mnt_sb</span>`;</span><span class="comment">/* pointer to superblock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_mounts</span>;</span><span class="comment">/* list of children, anchored here */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_child</span>;</span><span class="comment">/* and going through their mnt_child */</span></span><br><span class="line"><span class="keyword">int</span> mnt_flags;</span><br><span class="line"><span class="comment">/* 4 bytes hole on 64bits arches without fsnotify */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FSNOTIFY</span></span><br><span class="line">__u32 mnt_fsnotify_mask;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">mnt_fsnotify_marks</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *mnt_devname;<span class="comment">/* Name of device e.g. /dev/dsk/hda1 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_expire</span>;</span><span class="comment">/* link in fs-specific expiry list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_share</span>;</span><span class="comment">/* circular list of shared mounts */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_slave_list</span>;</span><span class="comment">/* list of slave mounts */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_slave</span>;</span><span class="comment">/* slave list entry */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *<span class="title">mnt_master</span>;</span><span class="comment">/* slave is on master-&gt;mnt_slave_list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_namespace</span> *<span class="title">mnt_ns</span>;</span><span class="comment">/* containing namespace */</span></span><br><span class="line"><span class="keyword">int</span> mnt_id;<span class="comment">/* mount identifier */</span></span><br><span class="line"><span class="keyword">int</span> mnt_group_id;<span class="comment">/* peer group identifier */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We put mnt_count &amp; mnt_expiry_mark at the end of struct vfsmount</span></span><br><span class="line"><span class="comment"> * to let these frequently modified fields in a separate cache line</span></span><br><span class="line"><span class="comment"> * (so that reads of mnt_flags wont ping-pong on SMP machines)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">atomic_t</span> mnt_count;</span><br><span class="line"><span class="keyword">int</span> mnt_expiry_mark;<span class="comment">/* true if marked for expiry */</span></span><br><span class="line"><span class="keyword">int</span> mnt_pinned;</span><br><span class="line"><span class="keyword">int</span> mnt_ghosts;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"><span class="keyword">int</span> __percpu *mnt_writers;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">int</span> mnt_writers;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> <span class="title">sock_fs_type</span> = &#123;</span></span><br><span class="line">.name =<span class="string">"sockfs"</span>,</span><br><span class="line">.get_sb =sockfs_get_sb,</span><br><span class="line">.kill_sb =kill_anon_super,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>sock_init</code>函数  //  net/socket.c   line:2392</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">sock_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *      Initialize sock SLAB cache.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">sk_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *      Initialize skbuff SLAB cache</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">skb_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *      Initialize the protocols module.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">init_inodecache();</span><br><span class="line"></span><br><span class="line">register_filesystem(&amp;sock_fs_type); <span class="comment">// 文件系统的注册</span></span><br><span class="line">sock_mnt = `kern_mount`(&amp;sock_fs_type); <span class="comment">// 挂载文件系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The real protocol initialization is performed in later initcalls.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NETFILTER</span></span><br><span class="line">netfilter_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NETWORK_PHY_TIMESTAMPING</span></span><br><span class="line">skb_timestamping_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、new-inode函数"><a href="#3-2、new-inode函数" class="headerlink" title="3.2、new_inode函数"></a><strong>3.2、new_inode函数</strong></h4><p>　　new_inode函数创建inode,并初始化inode的i_state变量和<code>inode-&gt;isn_list</code>链表，实际的分配函数为alloc_inode函数。fs/inode.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *new_inode - obtain an inode</span></span><br><span class="line"><span class="comment"> *@sb: superblock</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Allocates a new inode for given superblock. The default gfp_mask</span></span><br><span class="line"><span class="comment"> *for allocations related to inode-&gt;i_mapping is GFP_HIGHUSER_MOVABLE.</span></span><br><span class="line"><span class="comment"> *If HIGHMEM pages are unsuitable or it is known that pages allocated</span></span><br><span class="line"><span class="comment"> *for the page cache are not reclaimable or migratable,</span></span><br><span class="line"><span class="comment"> *mapping_set_gfp_mask() must be called with suitable flags on the</span></span><br><span class="line"><span class="comment"> *newly created inode's mapping</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct inode *<span class="title">new_inode</span><span class="params">(struct super_block *sb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On a 32bit, non LFS stat() call, glibc will generate an EOVERFLOW</span></span><br><span class="line"><span class="comment"> * error if st_ino won't fit in target struct field. Use 32bit counter</span></span><br><span class="line"><span class="comment"> * here to attempt to avoid that.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> last_ino;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span></span><br><span class="line"></span><br><span class="line">spin_lock_prefetch(&amp;inode_lock);</span><br><span class="line"></span><br><span class="line">inode = `alloc_inode`(sb);</span><br><span class="line"><span class="keyword">if</span> (inode) &#123;</span><br><span class="line">spin_lock(&amp;inode_lock);</span><br><span class="line">`__inode_add_to_lists`(sb, <span class="literal">NULL</span>, inode);</span><br><span class="line">inode-&gt;i_ino = ++last_ino;</span><br><span class="line">`inode-&gt;i_state` = <span class="number">0</span>;</span><br><span class="line">spin_unlock(&amp;inode_lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> inode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-1、alloc-inode函数"><a href="#3-2-1、alloc-inode函数" class="headerlink" title="3.2.1、alloc_inode函数"></a><em>3.2.1、alloc_inode函数</em></h5><p><code>alloc_inode</code>函数  // fs/inode.c        line:193</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct inode *<span class="title">alloc_inode</span><span class="params">(struct super_block *sb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果当前文件系统的超级块，有自己的分配inode的函数，则调用它自己的分配函数，否则从公用的高速缓存中分配一个inode。对于sockt来说，在socket.c中，调用的函数为sock_alloc_inode</span></span><br><span class="line"><span class="comment"> * static const struct super_operations `sockfs_ops` = &#123;</span></span><br><span class="line"><span class="comment"> *.alloc_inode= `sock_alloc_inode`,</span></span><br><span class="line"><span class="comment"> *.destroy_inode= sock_destroy_inode,</span></span><br><span class="line"><span class="comment"> *.statfs= simple_statfs,</span></span><br><span class="line"><span class="comment"> *&#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (sb-&gt;s_op-&gt;alloc_inode)</span><br><span class="line">inode = `sb-&gt;s_op-&gt;alloc_inode`(sb);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">inode = kmem_cache_alloc(inode_cachep, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!inode)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  初始化 inode结构体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(inode_init_always(sb, inode))) &#123;</span><br><span class="line"><span class="keyword">if</span> (inode-&gt;i_sb-&gt;s_op-&gt;destroy_inode)</span><br><span class="line">inode-&gt;i_sb-&gt;s_op-&gt;destroy_inode(inode);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">kmem_cache_free(inode_cachep, inode);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> inode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2-1-1、sock-alloc-inode函数"><a href="#3-2-1-1、sock-alloc-inode函数" class="headerlink" title="3.2.1.1、sock_alloc_inode函数"></a><strong>3.2.1.1、sock_alloc_inode函数</strong></h6><p><code>sock_alloc_inode</code>函数     // net/socket.c        line:240</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct inode *<span class="title">sock_alloc_inode</span><span class="params">(struct super_block *sb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket_alloc</span> *<span class="title">ei</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * kmem_cache_alloc分配stuct socket_alloc结构体，如何分配？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ei = `kmem_cache_alloc`(sock_inode_cachep, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!ei)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">ei-&gt;socket.wq = kmalloc(<span class="keyword">sizeof</span>(struct socket_wq), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!ei-&gt;socket.wq) &#123;</span><br><span class="line">kmem_cache_free(sock_inode_cachep, ei);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">init_waitqueue_head(&amp;ei-&gt;socket.wq-&gt;wait);</span><br><span class="line">ei-&gt;socket.wq-&gt;fasync_list = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ei-&gt;socket.state = SS_UNCONNECTED;</span><br><span class="line">ei-&gt;socket.flags = <span class="number">0</span>;</span><br><span class="line">ei-&gt;socket.ops = <span class="literal">NULL</span>;</span><br><span class="line">ei-&gt;socket.sk = <span class="literal">NULL</span>;</span><br><span class="line">ei-&gt;socket.file = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;ei-&gt;vfs_inode; <span class="comment">//返回sturct inode `vfs_inode`;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　备注：在分配函数sock_alloc_inode中调用了<br>　　ei = <code>kmem_cache_alloc</code>(sock_inode_cachep,GFP_KERNEL);这里分配的大小为socket_alloc大小，下面分宜如何分配该大小?  <code>kmem_cache_create</code><br>　　<code>init_inodecache</code>函数中（net/socket.c），对其进行高速缓存的分配操作，定义在socket.c文件中，这里分配的大小为socket_alloc，但是返回时socket_alloc结构体中的struct indoe vfs_inode;变量。该函数在sock_init中被调用。</p><p><code>init_inodecache</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">init_inodecache</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sock_inode_cachep = `kmem_cache_create`(<span class="string">"sock_inode_cache"</span>,</span><br><span class="line">      <span class="keyword">sizeof</span>(struct socket_alloc),</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      (SLAB_HWCACHE_ALIGN |</span><br><span class="line">       SLAB_RECLAIM_ACCOUNT |</span><br><span class="line">       SLAB_MEM_SPREAD),</span><br><span class="line">      init_once);</span><br><span class="line"><span class="keyword">if</span> (sock_inode_cachep == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-2、-inode-add-to-lists函数"><a href="#3-2-2、-inode-add-to-lists函数" class="headerlink" title="3.2.2、__inode_add_to_lists函数"></a><strong>3.2.2、__inode_add_to_lists函数</strong></h5><p><code>__inode_add_to_lists</code>函数   // fs/inode.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">__inode_add_to_lists(struct super_block *sb, struct hlist_head *head,</span><br><span class="line">struct inode *inode)</span><br><span class="line">&#123;</span><br><span class="line">inodes_stat.nr_inodes++;</span><br><span class="line">list_add(&amp;inode-&gt;i_list, &amp;inode_in_use);</span><br><span class="line">list_add(&amp;inode-&gt;i_sb_list, &amp;sb-&gt;s_inodes);</span><br><span class="line"><span class="keyword">if</span> (head)</span><br><span class="line">hlist_add_head(&amp;inode-&gt;i_hash, head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、inet-create函数"><a href="#4、inet-create函数" class="headerlink" title="4、inet_create函数"></a><strong>4、inet_create函数</strong></h3><p>　　在socket_create函数中调用pf-&gt;create,这里的指针为inet_create。在文件net/ipv4/af_inet中。<br><code>socket_create</code>  // net/ipv4/af_inet.c        line:268</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Create an inet socket.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">inet_create</span><span class="params">(struct net *net, struct socket *sock, <span class="keyword">int</span> protocol,</span></span></span><br><span class="line"><span class="function"><span class="params">       <span class="keyword">int</span> kern)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> *<span class="title">answer</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proto</span> *<span class="title">answer_prot</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> answer_flags;</span><br><span class="line"><span class="keyword">char</span> answer_no_check;</span><br><span class="line"><span class="keyword">int</span> try_loading_module = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!inet_ehash_secret))</span><br><span class="line"><span class="keyword">if</span> (sock-&gt;type != SOCK_RAW &amp;&amp; sock-&gt;type != SOCK_DGRAM)</span><br><span class="line">build_ehash_secret();</span><br><span class="line"></span><br><span class="line">sock-&gt;state = SS_UNCONNECTED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Look for the requested type/protocol pair. */</span></span><br><span class="line">lookup_protocol:</span><br><span class="line">err = -ESOCKTNOSUPPORT;</span><br><span class="line">rcu_read_lock();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 从inetsw中根据类型，协议查找相应的socket interface即 inet_protosw *answer;</span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> * //  include/linux/rculist.h</span></span><br><span class="line"><span class="comment"> *#define list_for_each_entry_rcu(pos, head, member) \</span></span><br><span class="line"><span class="comment"> *  for (pos = list_entry_rcu((head)-&gt;next, typeof(*pos), member); \</span></span><br><span class="line"><span class="comment"> *       prefetch(pos-&gt;member.next), &amp;pos-&gt;member != (head); \</span></span><br><span class="line"><span class="comment"> *      pos = list_entry_rcu(pos-&gt;member.next, typeof(*pos), member))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">list_for_each_entry_rcu(answer, &amp;inetsw[sock-&gt;type], <span class="built_in">list</span>) &#123;</span><br><span class="line"></span><br><span class="line">err = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* Check the non-wild match. */</span></span><br><span class="line"><span class="keyword">if</span> (protocol == answer-&gt;protocol) &#123;</span><br><span class="line"><span class="keyword">if</span> (protocol != IPPROTO_IP)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* Check for the two wild cases. */</span></span><br><span class="line"><span class="keyword">if</span> (IPPROTO_IP == protocol) &#123;</span><br><span class="line">protocol = answer-&gt;protocol;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (IPPROTO_IP == answer-&gt;protocol)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">err = -EPROTONOSUPPORT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果没找到，尝试加载模块 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(err)) &#123;</span><br><span class="line"><span class="keyword">if</span> (try_loading_module &lt; <span class="number">2</span>) &#123;</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Be more specific, e.g. net-pf-2-proto-132-type-1</span></span><br><span class="line"><span class="comment"> * (net-pf-PF_INET-proto-IPPROTO_SCTP-type-SOCK_STREAM)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (++try_loading_module == <span class="number">1</span>)</span><br><span class="line">request_module(<span class="string">"net-pf-%d-proto-%d-type-%d"</span>,</span><br><span class="line">       PF_INET, protocol, sock-&gt;type);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Fall back to generic, e.g. net-pf-2-proto-132</span></span><br><span class="line"><span class="comment"> * (net-pf-PF_INET-proto-IPPROTO_SCTP)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">request_module(<span class="string">"net-pf-%d-proto-%d"</span>,</span><br><span class="line">       PF_INET, protocol);</span><br><span class="line"><span class="keyword">goto</span> lookup_protocol;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">goto</span> out_rcu_unlock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = -EPERM;</span><br><span class="line"><span class="keyword">if</span> (sock-&gt;type == SOCK_RAW &amp;&amp; !kern &amp;&amp; !capable(CAP_NET_RAW))</span><br><span class="line"><span class="keyword">goto</span> out_rcu_unlock;</span><br><span class="line"></span><br><span class="line">err = -EAFNOSUPPORT;</span><br><span class="line"><span class="keyword">if</span> (!inet_netns_ok(net, protocol))</span><br><span class="line"><span class="keyword">goto</span> out_rcu_unlock;</span><br><span class="line"></span><br><span class="line">sock-&gt;ops = answer-&gt;ops;</span><br><span class="line">answer_prot = answer-&gt;prot;</span><br><span class="line">answer_no_check = answer-&gt;no_check;</span><br><span class="line">answer_flags = answer-&gt;flags;</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"></span><br><span class="line">WARN_ON(answer_prot-&gt;slab == <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">err = -ENOBUFS;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sk_alloc表面上看是生成sock的结构体，但是实际上对于tcp来说是tcp_sock的大小的结构体，这样就可以使用inet_sk(sk);进行强制的类型转换，具体如何分配tcp_sock大小？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sk = `sk_alloc`(net, PF_INET, GFP_KERNEL, answer_prot);</span><br><span class="line"><span class="keyword">if</span> (sk == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">err = <span class="number">0</span>;</span><br><span class="line">sk-&gt;sk_no_check = answer_no_check;</span><br><span class="line"><span class="keyword">if</span> (INET_PROTOSW_REUSE &amp; answer_flags)</span><br><span class="line">sk-&gt;sk_reuse = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">inet = inet_sk(sk);</span><br><span class="line">inet-&gt;is_icsk = (INET_PROTOSW_ICSK &amp; answer_flags) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">inet-&gt;nodefrag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCK_RAW == sock-&gt;type) &#123;</span><br><span class="line">inet-&gt;inet_num = protocol;</span><br><span class="line"><span class="keyword">if</span> (IPPROTO_RAW == protocol)</span><br><span class="line">inet-&gt;hdrincl = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ipv4_config.no_pmtu_disc)</span><br><span class="line">inet-&gt;pmtudisc = IP_PMTUDISC_DONT;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">inet-&gt;pmtudisc = IP_PMTUDISC_WANT;</span><br><span class="line"></span><br><span class="line">inet-&gt;inet_id = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * sk结构体变量进行初始化。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">`sock_init_data`(sock, sk);</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_destruct   = inet_sock_destruct;</span><br><span class="line">sk-&gt;sk_protocol   = protocol;</span><br><span class="line">sk-&gt;sk_backlog_rcv = sk-&gt;sk_prot-&gt;backlog_rcv;</span><br><span class="line"></span><br><span class="line">inet-&gt;uc_ttl= <span class="number">-1</span>;</span><br><span class="line">inet-&gt;mc_loop= <span class="number">1</span>;</span><br><span class="line">inet-&gt;mc_ttl= <span class="number">1</span>;</span><br><span class="line">inet-&gt;mc_all= <span class="number">1</span>;</span><br><span class="line">inet-&gt;mc_index= <span class="number">0</span>;</span><br><span class="line">inet-&gt;mc_list= <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">sk_refcnt_debug_inc(sk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inet-&gt;inet_num) &#123;</span><br><span class="line"><span class="comment">/* It assumes that any protocol which allows</span></span><br><span class="line"><span class="comment"> * the user to assign a number at socket</span></span><br><span class="line"><span class="comment"> * creation time automatically</span></span><br><span class="line"><span class="comment"> * shares.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">inet-&gt;inet_sport = htons(inet-&gt;inet_num);</span><br><span class="line"><span class="comment">/* Add to protocol hash chains. */</span></span><br><span class="line">sk-&gt;sk_prot-&gt;hash(sk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sk-&gt;sk_prot-&gt;init) &#123;</span><br><span class="line">err = `sk-&gt;sk_prot-&gt;init(sk)`; <span class="comment">//如果tcp  这里为tcp_v4_init_sock</span></span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line">sk_common_release(sk);</span><br><span class="line">&#125;</span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">out_rcu_unlock:</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1、sk-alloc函数"><a href="#4-1、sk-alloc函数" class="headerlink" title="4.1、sk_alloc函数"></a><strong>4.1、sk_alloc函数</strong></h4><p><code>sk_alloc</code>函数  // net/core/sock.c        line:1096</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *sk_alloc - All socket objects are allocated here</span></span><br><span class="line"><span class="comment"> *@net: the applicable net namespace</span></span><br><span class="line"><span class="comment"> *@family: protocol family</span></span><br><span class="line"><span class="comment"> *@priority: for allocation (%GFP_KERNEL, %GFP_ATOMIC, etc)</span></span><br><span class="line"><span class="comment"> *@prot: struct proto associated with this new sock instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct sock *<span class="title">sk_alloc</span><span class="params">(struct net *net, <span class="keyword">int</span> family, <span class="keyword">gfp_t</span> priority,</span></span></span><br><span class="line"><span class="function"><span class="params">      struct proto *prot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></span><br><span class="line"></span><br><span class="line">sk = `sk_prot_alloc`(prot, priority | __GFP_ZERO, family);</span><br><span class="line"><span class="keyword">if</span> (sk) &#123;</span><br><span class="line">sk-&gt;sk_family = family;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * See comment in struct sock definition to understand</span></span><br><span class="line"><span class="comment"> * why we need sk_prot_creator -acme</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sk-&gt;sk_prot = sk-&gt;sk_prot_creator = prot;</span><br><span class="line">sock_lock_init(sk);</span><br><span class="line">sock_net_set(sk, get_net(net));</span><br><span class="line">atomic_set(&amp;sk-&gt;sk_wmem_alloc, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">sock_update_classid(sk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-1、sk-prot-alloc函数"><a href="#4-1-1、sk-prot-alloc函数" class="headerlink" title="4.1.1、sk_prot_alloc函数"></a><strong>4.1.1、sk_prot_alloc函数</strong></h5><p><code>sk_prot_alloc</code>函数        //net/core/sock.c    line:1012</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct sock *<span class="title">sk_prot_alloc</span><span class="params">(struct `proto *prot`, <span class="keyword">gfp_t</span> priority,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> family)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">slab</span>;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 下面分配内存空间时，分两种情况：`1`、从高速缓冲中分配，`2`、普通的分配</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">`slab = prot-&gt;slab`;</span><br><span class="line"><span class="keyword">if</span> (slab != <span class="literal">NULL</span>) &#123;</span><br><span class="line">sk = `kmem_cache_alloc`(slab, priority &amp; ~__GFP_ZERO);  <span class="comment">// 第一种分配方式</span></span><br><span class="line"><span class="keyword">if</span> (!sk)</span><br><span class="line"><span class="keyword">return</span> sk;</span><br><span class="line"><span class="keyword">if</span> (priority &amp; __GFP_ZERO) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * caches using SLAB_DESTROY_BY_RCU should let</span></span><br><span class="line"><span class="comment"> * sk_node.next un-modified. Special care is taken</span></span><br><span class="line"><span class="comment"> * when initializing object to zero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (offsetof(struct sock, sk_node.next) != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">memset</span>(sk, <span class="number">0</span>, offsetof(struct sock, sk_node.next));</span><br><span class="line"><span class="built_in">memset</span>(&amp;sk-&gt;sk_node.pprev, <span class="number">0</span>,</span><br><span class="line">       prot-&gt;obj_size - offsetof(struct sock,</span><br><span class="line"> sk_node.pprev));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sk = `kmalloc`(prot-&gt;obj_size, priority);  <span class="comment">//第二种分配方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sk != <span class="literal">NULL</span>) &#123;</span><br><span class="line">kmemcheck_annotate_bitfield(sk, flags);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (security_sk_alloc(sk, family, priority))</span><br><span class="line"><span class="keyword">goto</span> out_free;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!try_module_get(prot-&gt;owner))</span><br><span class="line"><span class="keyword">goto</span> out_free_sec;</span><br><span class="line">sk_tx_queue_clear(sk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sk;</span><br><span class="line"></span><br><span class="line">out_free_sec:</span><br><span class="line">security_sk_free(sk);</span><br><span class="line">out_free:</span><br><span class="line"><span class="keyword">if</span> (slab != <span class="literal">NULL</span>)</span><br><span class="line">kmem_cache_free(slab, sk);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">kfree(sk);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　sk_prot_alloc函数中包括内存空间的分配过程，存在两种分配方式，而第一种分配方式涉及到slab是否为空，slab=prot-&gt;slab;而prot为sk_prot_alloc的传入参数，其结构体为struct proto *prot;  sk_prot_alloc参数prot由sk_alloc传入，sk_alloc参数prot 为inet_create 函数出入的answer_prot；answer_prot = answer-&gt;prot，即sk_prot_alloc中的prot为inet_create中的answer结构体重的prot成员变量。answer为inet_create函数中变量，其结构体为struct inet_protosw *answer;关于answer初始化赋值list_for_each_entry_rcu；<a href="#wow_1_5"><code>详看第5小结</code></a>。<br>　　第二种内存分配机制：主要是prot-&gt;obj_size;就是struct proto tcp_prot中初始化的.obj_size = sizeof(struct tcp_sock); 。 sk = kmalloc(prot-&gt;obj_size,priority);<br>　　下图为5个相关的数据结构，tcp_sock结构体占用的空间是最大的，所有在分配内存控件是，都是分配的tcp_sock的大小，这样在后面进行强制转换的过程中可以保证正确：</p><div align="center">![](/img/note_0b/01.png)</div><h4 id="4-2、sock-init-data函数"><a href="#4-2、sock-init-data函数" class="headerlink" title="4.2、sock_init_data函数"></a><strong>4.2、sock_init_data函数</strong></h4><p><code>sock_init_data</code>函数    // net/core/sock.c   line:1937</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sock_init_data</span><span class="params">(struct socket *sock, struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">skb_queue_head_init(&amp;sk-&gt;sk_receive_queue);</span><br><span class="line">skb_queue_head_init(&amp;sk-&gt;sk_write_queue);</span><br><span class="line">skb_queue_head_init(&amp;sk-&gt;sk_error_queue);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NET_DMA</span></span><br><span class="line">skb_queue_head_init(&amp;sk-&gt;sk_async_wait_queue);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">sk-&gt;sk_send_head=<span class="literal">NULL</span>;</span><br><span class="line">   </span><br><span class="line">init_timer(&amp;sk-&gt;sk_timer); <span class="comment">// 初始化sk定时器</span></span><br><span class="line"></span><br><span class="line">sk-&gt;sk_allocation=GFP_KERNEL;</span><br><span class="line">sk-&gt;sk_rcvbuf=sysctl_rmem_default;</span><br><span class="line">sk-&gt;sk_sndbuf=sysctl_wmem_default;</span><br><span class="line">sk-&gt;sk_state=TCP_CLOSE; <span class="comment">// 初始化sk_state = TCP_CLOSE状态，为后面在系统调用中会进行判断</span></span><br><span class="line">sk_set_socket(sk, sock);  <span class="comment">// sk-&gt;sk_socket = sock; 设置sk中指向socket的指针</span></span><br><span class="line"></span><br><span class="line">sock_set_flag(sk, SOCK_ZAPPED); <span class="comment">// 设置 SOCKET的flag位，表明该socket已经绑定一个名字，该标志什么意思？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sock) &#123;</span><br><span class="line">sk-&gt;sk_type=sock-&gt;type;</span><br><span class="line">sk-&gt;sk_wq=sock-&gt;wq;</span><br><span class="line">sock-&gt;sk=sk; </span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">sk-&gt;sk_wq=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">spin_lock_init(&amp;sk-&gt;sk_dst_lock);</span><br><span class="line">rwlock_init(&amp;sk-&gt;sk_callback_lock);</span><br><span class="line">lockdep_set_class_and_name(&amp;sk-&gt;sk_callback_lock,</span><br><span class="line">af_callback_keys + sk-&gt;sk_family,</span><br><span class="line">af_family_clock_key_strings[sk-&gt;sk_family]);</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_state_change=sock_def_wakeup;</span><br><span class="line">sk-&gt;sk_data_ready=sock_def_readable;</span><br><span class="line">sk-&gt;sk_write_space=sock_def_write_space;</span><br><span class="line">sk-&gt;sk_error_report=sock_def_error_report;</span><br><span class="line">sk-&gt;sk_destruct=sock_def_destruct;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_sndmsg_page=<span class="literal">NULL</span>;</span><br><span class="line">sk-&gt;sk_sndmsg_off=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_peer_pid =<span class="literal">NULL</span>;</span><br><span class="line">sk-&gt;sk_peer_cred=<span class="literal">NULL</span>;</span><br><span class="line">sk-&gt;sk_write_pending=<span class="number">0</span>;</span><br><span class="line">sk-&gt;sk_rcvlowat=<span class="number">1</span>;</span><br><span class="line">sk-&gt;sk_rcvtimeo=MAX_SCHEDULE_TIMEOUT;</span><br><span class="line">sk-&gt;sk_sndtimeo=MAX_SCHEDULE_TIMEOUT;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_stamp = ktime_set(<span class="number">-1L</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Before updating sk_refcnt, we must commit prior changes to memory</span></span><br><span class="line"><span class="comment"> * (Documentation/RCU/rculist_nulls.txt for details)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">smp_wmb();</span><br><span class="line">atomic_set(&amp;sk-&gt;sk_refcnt, <span class="number">1</span>); <span class="comment">// sk的引用计数+1</span></span><br><span class="line">atomic_set(&amp;sk-&gt;sk_drops, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　备注：思考 sock 与socket<br>　　参考资料：<br>　　　　<a href="http://blog.csdn.net/wangpengqi/article/details/9156083" target="_blank" rel="noopener">struct sk_buff与struct socket及struct sock 结构体分析</a><br>　　　　<a href="http://www.cnblogs.com/image-eye/archive/2012/01/05/2313383.html" target="_blank" rel="noopener">sock结构体</a><br>　　　　<a href="http://anders0913.iteye.com/blog/411986" target="_blank" rel="noopener">struct socket 结构详解</a><br>　　　　<a href="http://blog.51cto.com/weiguozhihui/1585297" target="_blank" rel="noopener">struct socket结构体详解</a><br>　　　　<a href="http://blog.51cto.com/weiguozhihui/1586777" target="_blank" rel="noopener">struct sk_buff结构体详解</a></p><h4 id="4-3、tcp-v4-init-sock函数"><a href="#4-3、tcp-v4-init-sock函数" class="headerlink" title="4.3、tcp_v4_init_sock函数"></a><strong>4.3、tcp_v4_init_sock函数</strong></h4><p><code>tcp_v4_init_sock</code>函数    // net/ipv4/tcp_ipv4.c    line:1857</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* <span class="doctag">NOTE:</span> A lot of things set to zero explicitly by call to</span></span><br><span class="line"><span class="comment"> *       sk_alloc() so need not be done here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tcp_v4_init_sock</span><span class="params">(struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock</span> *<span class="title">icsk</span> = <span class="title">inet_csk</span>(<span class="title">sk</span>);</span>  <span class="comment">// 强制类型转换  return (struct inet_connection_sock *)sk;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span> <span class="comment">// `强制类型转换  return (struct tcp_sock *)sk`;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  tcp 相关变量初始化工作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">skb_queue_head_init(&amp;tp-&gt;out_of_order_queue);</span><br><span class="line">tcp_init_xmit_timers(sk);</span><br><span class="line">tcp_prequeue_init(tp);</span><br><span class="line"></span><br><span class="line">icsk-&gt;icsk_rto = TCP_TIMEOUT_INIT;</span><br><span class="line">tp-&gt;mdev = TCP_TIMEOUT_INIT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* So many TCP implementations out there (incorrectly) count the</span></span><br><span class="line"><span class="comment"> * initial SYN frame in their delayed-ACK and congestion control</span></span><br><span class="line"><span class="comment"> * algorithms that we must have the following bandaid to talk</span></span><br><span class="line"><span class="comment"> * efficiently to them.  -DaveM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tp-&gt;snd_cwnd = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* See draft-stevens-tcpca-spec-01 for discussion of the</span></span><br><span class="line"><span class="comment"> * initialization of these values.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tp-&gt;snd_ssthresh = TCP_INFINITE_SSTHRESH;</span><br><span class="line">tp-&gt;snd_cwnd_clamp = ~<span class="number">0</span>;</span><br><span class="line">tp-&gt;mss_cache = TCP_MSS_DEFAULT;</span><br><span class="line"></span><br><span class="line">tp-&gt;reordering = sysctl_tcp_reordering;</span><br><span class="line">icsk-&gt;icsk_ca_ops = &amp;tcp_init_congestion_ops;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_state = TCP_CLOSE;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_write_space = sk_stream_write_space;</span><br><span class="line">sock_set_flag(sk, SOCK_USE_WRITE_QUEUE);</span><br><span class="line"></span><br><span class="line">icsk-&gt;icsk_af_ops = &amp;ipv4_specific;</span><br><span class="line">icsk-&gt;icsk_sync_mss = tcp_sync_mss;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_TCP_MD5SIG</span></span><br><span class="line">tp-&gt;af_specific = &amp;tcp_sock_ipv4_specific;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* TCP Cookie Transactions */</span></span><br><span class="line"><span class="keyword">if</span> (sysctl_tcp_cookie_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* Default, cookies without s_data_payload. */</span></span><br><span class="line">tp-&gt;cookie_values =</span><br><span class="line">kzalloc(<span class="keyword">sizeof</span>(*tp-&gt;cookie_values),</span><br><span class="line">sk-&gt;sk_allocation);</span><br><span class="line"><span class="keyword">if</span> (tp-&gt;cookie_values != <span class="literal">NULL</span>)</span><br><span class="line">kref_init(&amp;tp-&gt;cookie_values-&gt;kref);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Presumed zeroed, in order of appearance:</span></span><br><span class="line"><span class="comment"> *cookie_in_always, cookie_out_never,</span></span><br><span class="line"><span class="comment"> *s_data_constant, s_data_in, s_data_out</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sk-&gt;sk_sndbuf = sysctl_tcp_wmem[<span class="number">1</span>];</span><br><span class="line">sk-&gt;sk_rcvbuf = sysctl_tcp_rmem[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">local_bh_disable();</span><br><span class="line">percpu_counter_inc(&amp;tcp_sockets_allocated);</span><br><span class="line">local_bh_enable();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><p><img src="/img/note_0b/02.png" alt></p></div><h3 id="5、sk-prot-alloc参数prot"><a href="#5、sk-prot-alloc参数prot" class="headerlink" title="5、sk_prot_alloc参数prot"></a><strong>5、sk_prot_alloc参数prot</strong></h3><p>　　由第4小结中的sk_prot_alloc函数解释，可知sk_prot_alloc中使用的prot变量，其作为参数传入，最早定义在inet_create函数中answer结构体。answer初始化详看以下代码<br><code>inet_create</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Create an inet socket.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">inet_create</span><span class="params">(struct net *net, struct socket *sock, <span class="keyword">int</span> protocol,</span></span></span><br><span class="line"><span class="function"><span class="params">       <span class="keyword">int</span> kern)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> *<span class="title">answer</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proto</span> *<span class="title">answer_prot</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> answer_flags;</span><br><span class="line"><span class="keyword">char</span> answer_no_check;</span><br><span class="line"><span class="keyword">int</span> try_loading_module = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!inet_ehash_secret))</span><br><span class="line"><span class="keyword">if</span> (sock-&gt;type != SOCK_RAW &amp;&amp; sock-&gt;type != SOCK_DGRAM)</span><br><span class="line">build_ehash_secret();</span><br><span class="line"></span><br><span class="line">sock-&gt;state = SS_UNCONNECTED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Look for the requested type/protocol pair. */</span></span><br><span class="line">lookup_protocol:</span><br><span class="line">err = -ESOCKTNOSUPPORT;</span><br><span class="line">rcu_read_lock();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 从inetsw中根据类型，协议查找相应的socket interface即 inet_protosw *answer;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *//  include/linux/rculist.h</span></span><br><span class="line"><span class="comment"> *#define list_for_each_entry_rcu(pos, head, member) \</span></span><br><span class="line"><span class="comment"> *for (pos = list_entry_rcu((head)-&gt;next, typeof(*pos), member); \</span></span><br><span class="line"><span class="comment"> *prefetch(pos-&gt;member.next), &amp;pos-&gt;member != (head); \</span></span><br><span class="line"><span class="comment"> *pos = list_entry_rcu(pos-&gt;member.next, typeof(*pos), member))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">`list_for_each_entry_rcu`(answer, &amp;inetsw[sock-&gt;type], <span class="built_in">list</span>) &#123;</span><br><span class="line"></span><br><span class="line">err = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* Check the non-wild match. */</span></span><br><span class="line"><span class="keyword">if</span> (protocol == answer-&gt;protocol) &#123;</span><br><span class="line"><span class="keyword">if</span> (protocol != IPPROTO_IP)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* Check for the two wild cases. */</span></span><br><span class="line"><span class="keyword">if</span> (IPPROTO_IP == protocol) &#123;</span><br><span class="line">protocol = answer-&gt;protocol;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (IPPROTO_IP == answer-&gt;protocol)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">err = -EPROTONOSUPPORT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果没找到，尝试加载模块 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(err)) &#123;</span><br><span class="line"><span class="keyword">if</span> (try_loading_module &lt; <span class="number">2</span>) &#123;</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Be more specific, e.g. net-pf-2-proto-132-type-1</span></span><br><span class="line"><span class="comment"> * (net-pf-PF_INET-proto-IPPROTO_SCTP-type-SOCK_STREAM)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (++try_loading_module == <span class="number">1</span>)</span><br><span class="line">request_module(<span class="string">"net-pf-%d-proto-%d-type-%d"</span>,</span><br><span class="line">       PF_INET, protocol, sock-&gt;type);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Fall back to generic, e.g. net-pf-2-proto-132</span></span><br><span class="line"><span class="comment"> * (net-pf-PF_INET-proto-IPPROTO_SCTP)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">request_module(<span class="string">"net-pf-%d-proto-%d"</span>,</span><br><span class="line">       PF_INET, protocol);</span><br><span class="line"><span class="keyword">goto</span> lookup_protocol;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">goto</span> out_rcu_unlock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = -EPERM;</span><br><span class="line"><span class="keyword">if</span> (sock-&gt;type == SOCK_RAW &amp;&amp; !kern &amp;&amp; !capable(CAP_NET_RAW))</span><br><span class="line"><span class="keyword">goto</span> out_rcu_unlock;</span><br><span class="line"></span><br><span class="line">err = -EAFNOSUPPORT;</span><br><span class="line"><span class="keyword">if</span> (!inet_netns_ok(net, protocol))</span><br><span class="line"><span class="keyword">goto</span> out_rcu_unlock;</span><br><span class="line"></span><br><span class="line">sock-&gt;ops = answer-&gt;ops;</span><br><span class="line">answer_prot = answer-&gt;prot;</span><br><span class="line">answer_no_check = answer-&gt;no_check;</span><br><span class="line">answer_flags = answer-&gt;flags;</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"></span><br><span class="line">WARN_ON(answer_prot-&gt;slab == <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">err = -ENOBUFS;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sk_alloc表面上式生成sock的结构体，但是实际上对于tcp来说是tcp_sock的大小的结构体，这样就可以使用inet_sk(sk);进行强制的类型转换，具体如何分配tcp_sock大小？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sk = `sk_alloc`(net, PF_INET, GFP_KERNEL, answer_prot);</span><br><span class="line"><span class="keyword">if</span> (sk == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">err = <span class="number">0</span>;</span><br><span class="line">sk-&gt;sk_no_check = answer_no_check;</span><br><span class="line"><span class="keyword">if</span> (INET_PROTOSW_REUSE &amp; answer_flags)</span><br><span class="line">sk-&gt;sk_reuse = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">inet = inet_sk(sk);</span><br><span class="line">inet-&gt;is_icsk = (INET_PROTOSW_ICSK &amp; answer_flags) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">inet-&gt;nodefrag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCK_RAW == sock-&gt;type) &#123;</span><br><span class="line">inet-&gt;inet_num = protocol;</span><br><span class="line"><span class="keyword">if</span> (IPPROTO_RAW == protocol)</span><br><span class="line">inet-&gt;hdrincl = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ipv4_config.no_pmtu_disc)</span><br><span class="line">inet-&gt;pmtudisc = IP_PMTUDISC_DONT;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">inet-&gt;pmtudisc = IP_PMTUDISC_WANT;</span><br><span class="line"></span><br><span class="line">inet-&gt;inet_id = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * sk结构体变量进行初始化。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">sock_init_data(sock, sk);</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_destruct   = inet_sock_destruct;</span><br><span class="line">sk-&gt;sk_protocol   = protocol;</span><br><span class="line">sk-&gt;sk_backlog_rcv = sk-&gt;sk_prot-&gt;backlog_rcv;</span><br><span class="line"></span><br><span class="line">inet-&gt;uc_ttl= <span class="number">-1</span>;</span><br><span class="line">inet-&gt;mc_loop= <span class="number">1</span>;</span><br><span class="line">inet-&gt;mc_ttl= <span class="number">1</span>;</span><br><span class="line">inet-&gt;mc_all= <span class="number">1</span>;</span><br><span class="line">inet-&gt;mc_index= <span class="number">0</span>;</span><br><span class="line">inet-&gt;mc_list= <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">sk_refcnt_debug_inc(sk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inet-&gt;inet_num) &#123;</span><br><span class="line"><span class="comment">/* It assumes that any protocol which allows</span></span><br><span class="line"><span class="comment"> * the user to assign a number at socket</span></span><br><span class="line"><span class="comment"> * creation time automatically</span></span><br><span class="line"><span class="comment"> * shares.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">inet-&gt;inet_sport = htons(inet-&gt;inet_num);</span><br><span class="line"><span class="comment">/* Add to protocol hash chains. */</span></span><br><span class="line">sk-&gt;sk_prot-&gt;hash(sk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sk-&gt;sk_prot-&gt;init) &#123;</span><br><span class="line">err = sk-&gt;sk_prot-&gt;init(sk); <span class="comment">//如果tcp  这里为`tcp_v4_init_sock`</span></span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line">sk_common_release(sk);</span><br><span class="line">&#125;</span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">out_rcu_unlock:</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　list_for_each_entry_rcu(<code>answer</code>, &amp;inetsw[sock-&gt;type], list)中的answer由<code>inetsw</code>遍历得出，其中inetsw的定义下面类型的数组如果是SOCK_STREAM类型的socket，这里的prot = tcp_prot;<br><code>inetsw_array</code>   // net/ipv4/af_inet.c </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Upon startup we insert all the elements in inetsw_array[] into</span></span><br><span class="line"><span class="comment"> * the linked list inetsw.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> `<span class="title">inetsw_array</span>`[] =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#123;</span><br><span class="line">.type =       SOCK_STREAM,</span><br><span class="line">.protocol =   IPPROTO_TCP,</span><br><span class="line">.prot =       &amp;`tcp_prot`,</span><br><span class="line">.ops =        &amp;inet_stream_ops,</span><br><span class="line">.no_check =   <span class="number">0</span>,</span><br><span class="line">.flags =      INET_PROTOSW_PERMANENT |</span><br><span class="line">      INET_PROTOSW_ICSK,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">.type =       SOCK_DGRAM,</span><br><span class="line">.protocol =   IPPROTO_UDP,</span><br><span class="line">.prot =       &amp;udp_prot,</span><br><span class="line">.ops =        &amp;inet_dgram_ops,</span><br><span class="line">.no_check =   UDP_CSUM_DEFAULT,</span><br><span class="line">.flags =      INET_PROTOSW_PERMANENT,</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#123;</span><br><span class="line">       .type =       SOCK_RAW,</span><br><span class="line">       .protocol =   IPPROTO_IP,<span class="comment">/* wild card */</span></span><br><span class="line">       .prot =       &amp;raw_prot,</span><br><span class="line">       .ops =        &amp;inet_sockraw_ops,</span><br><span class="line">       .no_check =   UDP_CSUM_DEFAULT,</span><br><span class="line">       .flags =      INET_PROTOSW_REUSE,</span><br><span class="line">       &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>tcp_prot</code>  // net/ipv4/tcp_ipv4.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proto</span> `<span class="title">tcp_prot</span>` = &#123;</span></span><br><span class="line">.name= <span class="string">"TCP"</span>,</span><br><span class="line">.owner= THIS_MODULE,</span><br><span class="line">.close= tcp_close,</span><br><span class="line">.connect= tcp_v4_connect,</span><br><span class="line">.disconnect= tcp_disconnect,</span><br><span class="line">.accept= inet_csk_accept,</span><br><span class="line">.ioctl= tcp_ioctl,</span><br><span class="line">.init= tcp_v4_init_sock,</span><br><span class="line">.destroy= tcp_v4_destroy_sock,</span><br><span class="line">.shutdown= tcp_shutdown,</span><br><span class="line">.setsockopt= tcp_setsockopt,</span><br><span class="line">.getsockopt= tcp_getsockopt,</span><br><span class="line">.recvmsg= tcp_recvmsg,</span><br><span class="line">.sendmsg= tcp_sendmsg,</span><br><span class="line">.sendpage= tcp_sendpage,</span><br><span class="line">.backlog_rcv= tcp_v4_do_rcv,</span><br><span class="line">.hash= inet_hash,</span><br><span class="line">.unhash= inet_unhash,</span><br><span class="line">.get_port= inet_csk_get_port,</span><br><span class="line">.enter_memory_pressure= tcp_enter_memory_pressure,</span><br><span class="line">.sockets_allocated= &amp;tcp_sockets_allocated,</span><br><span class="line">.orphan_count= &amp;tcp_orphan_count,</span><br><span class="line">.memory_allocated= &amp;tcp_memory_allocated,</span><br><span class="line">.memory_pressure= &amp;tcp_memory_pressure,</span><br><span class="line">.sysctl_mem= sysctl_tcp_mem,</span><br><span class="line">.sysctl_wmem= sysctl_tcp_wmem,</span><br><span class="line">.sysctl_rmem= sysctl_tcp_rmem,</span><br><span class="line">.max_header= MAX_TCP_HEADER,</span><br><span class="line">.`obj_size`= <span class="keyword">sizeof</span>(struct tcp_sock),</span><br><span class="line">.slab_flags= SLAB_DESTROY_BY_RCU,</span><br><span class="line">.twsk_prot= &amp;tcp_timewait_sock_ops,</span><br><span class="line">.rsk_prot= &amp;tcp_request_sock_ops,</span><br><span class="line">.h.hashinfo= &amp;tcp_hashinfo,</span><br><span class="line">.no_autobind= <span class="literal">true</span>,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_setsockopt= compat_tcp_setsockopt,</span><br><span class="line">.compat_getsockopt= compat_tcp_getsockopt,</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在inet_init函数中（af_inet.c文件）<br><code>inet_init</code>  // net/ipv4/af_inet.c    line:1609</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">inet_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sk_buff</span> *<span class="title">dummy_skb</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> *<span class="title">q</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">r</span>;</span></span><br><span class="line"><span class="keyword">int</span> rc = -EINVAL;</span><br><span class="line"></span><br><span class="line">BUILD_BUG_ON(<span class="keyword">sizeof</span>(struct inet_skb_parm) &gt; <span class="keyword">sizeof</span>(dummy_skb-&gt;cb));</span><br><span class="line"></span><br><span class="line">sysctl_local_reserved_ports = kzalloc(<span class="number">65536</span> / <span class="number">8</span>, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!sysctl_local_reserved_ports)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 该函数注册tcp_prot，在该函数中对tcp_prot-&gt;slab进行内存分配</span></span><br><span class="line">rc = `proto_register`(&amp;tcp_prot, <span class="number">1</span>);  <span class="comment">// 详见 ---[5.1]</span></span><br><span class="line"><span class="keyword">if</span> (rc)</span><br><span class="line"><span class="keyword">goto</span> out_free_reserved_ports;</span><br><span class="line"></span><br><span class="line">rc = proto_register(&amp;udp_prot, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (rc)</span><br><span class="line"><span class="keyword">goto</span> out_unregister_tcp_proto;</span><br><span class="line"></span><br><span class="line">rc = proto_register(&amp;raw_prot, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (rc)</span><br><span class="line"><span class="keyword">goto</span> out_unregister_udp_proto;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Tell SOCKET that we are alive...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">void</span>)sock_register(&amp;inet_family_ops);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SYSCTL</span></span><br><span class="line">ip_static_sysctl_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Add all the base protocols.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inet_add_protocol(&amp;icmp_protocol, IPPROTO_ICMP) &lt; <span class="number">0</span>)</span><br><span class="line">printk(KERN_CRIT <span class="string">"inet_init: Cannot add ICMP protocol\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (inet_add_protocol(&amp;udp_protocol, IPPROTO_UDP) &lt; <span class="number">0</span>)</span><br><span class="line">printk(KERN_CRIT <span class="string">"inet_init: Cannot add UDP protocol\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (inet_add_protocol(&amp;tcp_protocol, IPPROTO_TCP) &lt; <span class="number">0</span>)</span><br><span class="line">printk(KERN_CRIT <span class="string">"inet_init: Cannot add TCP protocol\n"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_IP_MULTICAST</span></span><br><span class="line"><span class="keyword">if</span> (inet_add_protocol(&amp;igmp_protocol, IPPROTO_IGMP) &lt; <span class="number">0</span>)</span><br><span class="line">printk(KERN_CRIT <span class="string">"inet_init: Cannot add IGMP protocol\n"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Register the socket-side information for inet_create. */</span></span><br><span class="line">    <span class="comment">// `inetsw 进行初始化操作 `</span></span><br><span class="line"><span class="keyword">for</span> (r = &amp;inetsw[<span class="number">0</span>]; r &lt; &amp;inetsw[SOCK_MAX]; ++r)</span><br><span class="line">`INIT_LIST_HEAD`(r);  <span class="comment">//详见------[5.2]</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// `将 inetsw_array加入到对应的inetsw链表中，就可以在inet_create函数中进行遍历`</span></span><br><span class="line"><span class="keyword">for</span> (q = inetsw_array; q &lt; &amp;inetsw_array[INETSW_ARRAY_LEN]; ++q)</span><br><span class="line">`inet_register_protosw`(q);  <span class="comment">// 详见------[5.3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Set the ARP module up</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">arp_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Set the IP module up</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">ip_init();</span><br><span class="line"></span><br><span class="line">tcp_v4_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Setup TCP slab cache for open requests. */</span></span><br><span class="line">tcp_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Setup UDP memory threshold */</span></span><br><span class="line">udp_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add UDP-Lite (RFC 3828) */</span></span><br><span class="line">udplite4_register();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Set the ICMP layer up</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (icmp_init() &lt; <span class="number">0</span>)</span><br><span class="line">panic(<span class="string">"Failed to create the ICMP control socket.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Initialise the multicast router</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CONFIG_IP_MROUTE)</span></span><br><span class="line"><span class="keyword">if</span> (ip_mr_init())</span><br><span class="line">printk(KERN_CRIT <span class="string">"inet_init: Cannot init ipv4 mroute\n"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Initialise per-cpu ipv4 mibs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (init_ipv4_mibs())</span><br><span class="line">printk(KERN_CRIT <span class="string">"inet_init: Cannot init ipv4 mibs\n"</span>);</span><br><span class="line"></span><br><span class="line">ipv4_proc_init();</span><br><span class="line"></span><br><span class="line">ipfrag_init();</span><br><span class="line"></span><br><span class="line">dev_add_pack(&amp;ip_packet_type);</span><br><span class="line"></span><br><span class="line">rc = <span class="number">0</span>;</span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> rc;</span><br><span class="line">out_unregister_udp_proto:</span><br><span class="line">proto_unregister(&amp;udp_prot);</span><br><span class="line">out_unregister_tcp_proto:</span><br><span class="line">proto_unregister(&amp;tcp_prot);</span><br><span class="line">out_free_reserved_ports:</span><br><span class="line">kfree(sysctl_local_reserved_ports);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1、proto-register"><a href="#5-1、proto-register" class="headerlink" title="*5.1、proto_register *"></a>*<em>5.1、proto_register *</em></h4><p><code>proto_register</code> 注册函数  // net/core/sock.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">proto_register</span><span class="params">(struct proto *prot, <span class="keyword">int</span> alloc_slab)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (alloc_slab) &#123;</span><br><span class="line">         <span class="comment">// prot-&gt;obj_size 为`.obj = sizeof(struct tcp_sock)`</span></span><br><span class="line">prot-&gt;slab = `kmem_cache_create`(prot-&gt;name, prot-&gt;obj_size, <span class="number">0</span>,</span><br><span class="line">SLAB_HWCACHE_ALIGN | prot-&gt;slab_flags,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prot-&gt;slab == <span class="literal">NULL</span>) &#123;</span><br><span class="line">printk(KERN_CRIT <span class="string">"%s: Can't create sock SLAB cache!\n"</span>,</span><br><span class="line">       prot-&gt;name);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prot-&gt;rsk_prot != <span class="literal">NULL</span>) &#123;</span><br><span class="line">prot-&gt;rsk_prot-&gt;slab_name = kasprintf(GFP_KERNEL, <span class="string">"request_sock_%s"</span>, prot-&gt;name);</span><br><span class="line"><span class="keyword">if</span> (prot-&gt;rsk_prot-&gt;slab_name == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">goto</span> out_free_sock_slab;</span><br><span class="line"></span><br><span class="line">prot-&gt;rsk_prot-&gt;slab = kmem_cache_create(prot-&gt;rsk_prot-&gt;slab_name,</span><br><span class="line"> prot-&gt;rsk_prot-&gt;obj_size, <span class="number">0</span>,</span><br><span class="line"> SLAB_HWCACHE_ALIGN, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prot-&gt;rsk_prot-&gt;slab == <span class="literal">NULL</span>) &#123;</span><br><span class="line">printk(KERN_CRIT <span class="string">"%s: Can't create request sock SLAB cache!\n"</span>,</span><br><span class="line">       prot-&gt;name);</span><br><span class="line"><span class="keyword">goto</span> out_free_request_sock_slab_name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prot-&gt;twsk_prot != <span class="literal">NULL</span>) &#123;</span><br><span class="line">prot-&gt;twsk_prot-&gt;twsk_slab_name = kasprintf(GFP_KERNEL, <span class="string">"tw_sock_%s"</span>, prot-&gt;name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prot-&gt;twsk_prot-&gt;twsk_slab_name == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">goto</span> out_free_request_sock_slab;</span><br><span class="line"></span><br><span class="line">prot-&gt;twsk_prot-&gt;twsk_slab =</span><br><span class="line">kmem_cache_create(prot-&gt;twsk_prot-&gt;twsk_slab_name,</span><br><span class="line">  prot-&gt;twsk_prot-&gt;twsk_obj_size,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  SLAB_HWCACHE_ALIGN |</span><br><span class="line">prot-&gt;slab_flags,</span><br><span class="line">  <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (prot-&gt;twsk_prot-&gt;twsk_slab == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">goto</span> out_free_timewait_sock_slab_name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">write_lock(&amp;proto_list_lock);</span><br><span class="line">list_add(&amp;prot-&gt;node, &amp;proto_list);</span><br><span class="line">assign_proto_idx(prot);</span><br><span class="line">write_unlock(&amp;proto_list_lock);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">out_free_timewait_sock_slab_name:</span><br><span class="line">kfree(prot-&gt;twsk_prot-&gt;twsk_slab_name);</span><br><span class="line">out_free_request_sock_slab:</span><br><span class="line"><span class="keyword">if</span> (prot-&gt;rsk_prot &amp;&amp; prot-&gt;rsk_prot-&gt;slab) &#123;</span><br><span class="line">kmem_cache_destroy(prot-&gt;rsk_prot-&gt;slab);</span><br><span class="line">prot-&gt;rsk_prot-&gt;slab = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">out_free_request_sock_slab_name:</span><br><span class="line"><span class="keyword">if</span> (prot-&gt;rsk_prot)</span><br><span class="line">kfree(prot-&gt;rsk_prot-&gt;slab_name);</span><br><span class="line">out_free_sock_slab:</span><br><span class="line">kmem_cache_destroy(prot-&gt;slab);</span><br><span class="line">prot-&gt;slab = <span class="literal">NULL</span>;</span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> -ENOBUFS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2、INIT-LIST-HEAD"><a href="#5-2、INIT-LIST-HEAD" class="headerlink" title="5.2、INIT_LIST_HEAD"></a><strong>5.2、INIT_LIST_HEAD</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">INIT_LIST_HEAD</span><span class="params">(struct list_head *<span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>-&gt;next = <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">list</span>-&gt;prev = <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3、inet-register-protosw"><a href="#5-3、inet-register-protosw" class="headerlink" title="5.3、inet_register_protosw"></a><strong>5.3、inet_register_protosw</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_register_protosw</span><span class="params">(struct inet_protosw *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">lh</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> *<span class="title">answer</span>;</span></span><br><span class="line"><span class="keyword">int</span> protocol = p-&gt;protocol;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">last_perm</span>;</span></span><br><span class="line"></span><br><span class="line">spin_lock_bh(&amp;inetsw_lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;type &gt;= SOCK_MAX)</span><br><span class="line"><span class="keyword">goto</span> out_illegal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we are trying to override a permanent protocol, bail. */</span></span><br><span class="line">answer = <span class="literal">NULL</span>;</span><br><span class="line">last_perm = &amp;inetsw[p-&gt;type];</span><br><span class="line">list_for_each(lh, &amp;inetsw[p-&gt;type]) &#123;</span><br><span class="line">answer = list_entry(lh, struct inet_protosw, <span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check only the non-wild match. */</span></span><br><span class="line"><span class="keyword">if</span> (INET_PROTOSW_PERMANENT &amp; answer-&gt;flags) &#123;</span><br><span class="line"><span class="keyword">if</span> (protocol == answer-&gt;protocol)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">last_perm = lh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">answer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (answer)</span><br><span class="line"><span class="keyword">goto</span> out_permanent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add the new entry after the last permanent entry if any, so that</span></span><br><span class="line"><span class="comment"> * the new entry does not override a permanent entry when matched with</span></span><br><span class="line"><span class="comment"> * a wild-card protocol. But it is allowed to override any existing</span></span><br><span class="line"><span class="comment"> * non-permanent entry.  This means that when we remove this entry, the</span></span><br><span class="line"><span class="comment"> * system automatically returns to the old behavior.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">list_add_rcu(&amp;p-&gt;<span class="built_in">list</span>, last_perm);</span><br><span class="line">out:</span><br><span class="line">spin_unlock_bh(&amp;inetsw_lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">out_permanent:</span><br><span class="line">printk(KERN_ERR <span class="string">"Attempt to override permanent protocol %d.\n"</span>,</span><br><span class="line">       protocol);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">out_illegal:</span><br><span class="line">printk(KERN_ERR</span><br><span class="line">       <span class="string">"Ignoring attempt to register invalid socket type %d.\n"</span>,</span><br><span class="line">       p-&gt;type);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><p><img src="/img/note_0b/03.png" alt></p></div><h3 id="6、sock-map-fd函数"><a href="#6、sock-map-fd函数" class="headerlink" title="6、sock_map_fd函数"></a><strong>6、sock_map_fd函数</strong></h3><p>　　在用户控件控件创建了一个socket后，返回值是一个文件描述符，下面分析一下创建socket时怎么和文件描述符联系，在SYSCLALL_DEFINE3(socket,int,family,int,<br>type,int,portocol)最后调用socke_map_fd进行关联，其中返回的retval就是用户控件获取的文件描述符fd,sock就是调用sock_create创建成功的socket。<br>　　sock_map_fd()主要用于对socket的<em>file指针初始化，经过sock_map_fd()操作后，socket就通过其</em>file指针与VFS管理的文件进行了关联，便可以进行文件的各种操作，如read,write,lessk,ioctl等。</p><p>　　retval = <code>sock_map_fd</code>(sock,flag&amp;(O_CLOEXEC|O_NOBLOCK));<br><code>sock_map_fd</code>函数   // net/socket.c    line:395</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_map_fd</span><span class="params">(struct socket *sock, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">newfile</span>;</span></span><br><span class="line"><span class="keyword">int</span> fd = `sock_alloc_file`(sock, &amp;newfile, flags);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (likely(fd &gt;= <span class="number">0</span>))</span><br><span class="line">fd_install(fd, newfile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-1、sock-alloc-file函数"><a href="#6-1、sock-alloc-file函数" class="headerlink" title="6.1、sock_alloc_file函数"></a><strong>6.1、sock_alloc_file函数</strong></h4><p><code>sock_alloc_file</code>函数   // net/socket.c        line:354</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Obtains the first available file descriptor and sets it up for use.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *These functions create file structures and maps them to fd space</span></span><br><span class="line"><span class="comment"> *of the current process. On success it returns file descriptor</span></span><br><span class="line"><span class="comment"> *and file struct implicitly stored in sock-&gt;file.</span></span><br><span class="line"><span class="comment"> *Note that another thread may close file descriptor before we return</span></span><br><span class="line"><span class="comment"> *from this function. We use the fact that now we do not refer</span></span><br><span class="line"><span class="comment"> *to socket after mapping. If one day we will need it, this</span></span><br><span class="line"><span class="comment"> *function will increment ref. count on file by 1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *In any case returned fd MAY BE not valid!</span></span><br><span class="line"><span class="comment"> *This race condition is unavoidable</span></span><br><span class="line"><span class="comment"> *with shared fd spaces, we cannot solve it inside kernel,</span></span><br><span class="line"><span class="comment"> *but we take care of internal coherence yet.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sock_alloc_file</span><span class="params">(struct socket *sock, struct file **f, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qstr</span> <span class="title">name</span> = &#123;</span> .name = <span class="string">""</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">path</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      *  #define get_unused_fd_flags(flags) `alloc_fd`(0, (flags))</span></span><br><span class="line"><span class="comment">      *  // include/linux/file.h</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">fd = `get_unused_fd_flags`(flags);  </span><br><span class="line"><span class="keyword">if</span> (unlikely(fd &lt; <span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line"></span><br><span class="line">path.dentry = d_alloc(sock_mnt-&gt;mnt_sb-&gt;s_root, &amp;name);</span><br><span class="line"><span class="keyword">if</span> (unlikely(!path.dentry)) &#123;</span><br><span class="line">put_unused_fd(fd);</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line">path.mnt = mntget(sock_mnt);</span><br><span class="line"></span><br><span class="line">path.dentry-&gt;d_op = &amp;sockfs_dentry_operations;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 将文件操作的函数绑定到inode,对于dentry是在socket_mount函数中socket_dentry_operations，该函数在sock_init中调用</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">d_instantiate(path.dentry, SOCK_INODE(sock));</span><br><span class="line">SOCK_INODE(sock)-&gt;i_fop = &amp;socket_file_ops;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 申请新的file,将path和file关联起来</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">file = alloc_file(&amp;path, FMODE_READ | FMODE_WRITE,</span><br><span class="line">  &amp;socket_file_ops);</span><br><span class="line"><span class="keyword">if</span> (unlikely(!file)) &#123;</span><br><span class="line"><span class="comment">/* drop dentry, keep inode */</span></span><br><span class="line">atomic_inc(&amp;path.dentry-&gt;d_inode-&gt;i_count);</span><br><span class="line">path_put(&amp;path);</span><br><span class="line">put_unused_fd(fd);</span><br><span class="line"><span class="keyword">return</span> -ENFILE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sock-&gt;file = file;</span><br><span class="line">file-&gt;f_flags = O_RDWR | (flags &amp; O_NONBLOCK);</span><br><span class="line">file-&gt;f_pos = <span class="number">0</span>;</span><br><span class="line">file-&gt;private_data = sock;</span><br><span class="line"></span><br><span class="line">*f = file;</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2、get-unused-fd-flags宏实现"><a href="#6-2、get-unused-fd-flags宏实现" class="headerlink" title="6.2、get_unused_fd_flags宏实现"></a><strong>6.2、get_unused_fd_flags宏实现</strong></h4><p><code>get_unused_fd_flags</code> 宏 // include/linux/file.h    line:36</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get_unused_fd_flags(flags) alloc_fd(0, (flags))</span></span><br></pre></td></tr></table></figure><p><code>alloc_fd</code>函数 // fs/file.c        line:427</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * allocate a file descriptor, mark it busy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">alloc_fd</span><span class="params">(<span class="keyword">unsigned</span> start, <span class="keyword">unsigned</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span> = <span class="title">current</span>-&gt;<span class="title">files</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">int</span> error;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></span><br><span class="line"></span><br><span class="line">spin_lock(&amp;files-&gt;file_lock);</span><br><span class="line">repeat:</span><br><span class="line"><span class="comment">/* 得到本进程的文件描述符 */</span></span><br><span class="line">fdt = `files_fdtable`(files);</span><br><span class="line">fd = start; <span class="comment">// 从start开始,这里start为0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * files-&gt;next_fd为上一次确定的下一个可用空闲的文件描述符，这里可以提高获取的效率，如果fd小于files-&gt;next_fd的话就可以直接使用next_fd;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (fd &lt; files-&gt;next_fd)</span><br><span class="line">fd = files-&gt;next_fd;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  当fd小于目前进程支持的最大的描述符号，那么可以通过fds_bit位图，从fd位开始查找，找到下一位0位，即下一个空闲描述符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (fd &lt; fdt-&gt;max_fds)</span><br><span class="line">fd = find_next_zero_bit(fdt-&gt;open_fds-&gt;fds_bits,</span><br><span class="line">   fdt-&gt;max_fds, fd);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如需要则扩展文件描述符表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">error = expand_files(files, fd);</span><br><span class="line"><span class="keyword">if</span> (error &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we needed to expand the fs array we</span></span><br><span class="line"><span class="comment"> * might have blocked - try again.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (error)</span><br><span class="line"><span class="keyword">goto</span> repeat;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 设置next_fd，用于下次加速查找空闲的fd</span></span><br><span class="line"><span class="comment">  * 当start大于next_fd时，不会设置next_fd以避免文件描述符的不连续。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">if</span> (start &lt;= files-&gt;next_fd)</span><br><span class="line">files-&gt;next_fd = fd + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将fd添加到一打开的文件描述符表中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FD_SET(fd, fdt-&gt;open_fds);</span><br><span class="line"><span class="keyword">if</span> (flags &amp; O_CLOEXEC)</span><br><span class="line">FD_SET(fd, fdt-&gt;close_on_exec);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">FD_CLR(fd, fdt-&gt;close_on_exec);</span><br><span class="line">error = fd;</span><br><span class="line"><span class="comment">/* Sanity check */</span></span><br><span class="line"><span class="keyword">if</span> (rcu_dereference_raw(fdt-&gt;fd[fd]) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">printk(KERN_WARNING <span class="string">"alloc_fd: slot %d not NULL!\n"</span>, fd);</span><br><span class="line">rcu_assign_pointer(fdt-&gt;fd[fd], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">spin_unlock(&amp;files-&gt;file_lock);</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><p><img src="/img/note_0b/04.png" alt></p></div><div align="center"><p><img src="/img/note_0b/05.png" alt></p></div><h2 id="二、绑定bind"><a href="#二、绑定bind" class="headerlink" title="二、绑定bind"></a><strong>二、绑定bind</strong></h2><h3 id="1、SYSCALL-DEFINE3-bind-…"><a href="#1、SYSCALL-DEFINE3-bind-…" class="headerlink" title="1、SYSCALL_DEFINE3(bind,…)"></a><strong>1、SYSCALL_DEFINE3(bind,…)</strong></h3><p>　　bind系统调用通过SYSCALL_DEFINE3调用各个协议不同的bind函数。<br>SYSCALL_DEFINE3(<code>bind</code>, int, fd, struct sockaddr __user *, umyaddr, int, addrlen)       // net/socket.c        line:1394</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE3(`bind`, <span class="keyword">int</span>, fd, struct sockaddr __user *, umyaddr, <span class="keyword">int</span>, addrlen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">address</span>;</span></span><br><span class="line"><span class="keyword">int</span> err, fput_needed;</span><br><span class="line">sock = `sockfd_lookup_light`(fd, &amp;err, &amp;fput_needed); <span class="comment">// 根据文件描述符fd,查找相应套接字socket </span></span><br><span class="line"><span class="keyword">if</span> (sock) &#123;</span><br><span class="line">err = `move_addr_to_kernel`(umyaddr, addrlen, (struct sockaddr *)&amp;address);</span><br><span class="line"><span class="keyword">if</span> (err &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">err = security_socket_bind(sock,</span><br><span class="line">   (struct sockaddr *)&amp;address,</span><br><span class="line">   addrlen);</span><br><span class="line"><span class="keyword">if</span> (!err)</span><br><span class="line">err = `sock-&gt;ops-&gt;bind`(sock,</span><br><span class="line">      (struct sockaddr *)</span><br><span class="line">      &amp;address, addrlen);</span><br><span class="line">&#125;</span><br><span class="line">fput_light(sock-&gt;file, fput_needed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、sockfd-lookup-light函数"><a href="#2、sockfd-lookup-light函数" class="headerlink" title="2、sockfd_lookup_light函数"></a><strong>2、sockfd_lookup_light函数</strong></h3><p><code>sockfd_lookup_light</code>函数     //net/socket.c        line:447</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct socket *<span class="title">sockfd_lookup_light</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> *err, <span class="keyword">int</span> *fput_needed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></span><br><span class="line"></span><br><span class="line">*err = -EBADF;</span><br><span class="line">file = `fget_light`(fd, fput_needed); <span class="comment">//通过fd获取struct file结构体</span></span><br><span class="line"><span class="keyword">if</span> (file) &#123;</span><br><span class="line">sock = `sock_from_file`(file, err); <span class="comment">//返回套接字所对应的存储在file-&gt;private_date;在sock_aloc_file函数中对其进行赋值</span></span><br><span class="line"><span class="keyword">if</span> (sock)</span><br><span class="line"><span class="keyword">return</span> sock;</span><br><span class="line">fput_light(file, *fput_needed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、inet-bind函数"><a href="#3、inet-bind函数" class="headerlink" title="3、inet_bind函数"></a><strong>3、inet_bind函数</strong></h3><p>　　sock-&gt;ops-&gt;bind实际调用为inet_bind。sock-&gt;ops-&gt;bind赋值过程。<br>　　在创建TCP类型的socket时，进行了下面的赋值初始化操作，这里的bind定义为inet_bind()函数。<br><code>inetsw_array</code>结构体数组  //  net/ipv4/af_inet.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> `<span class="title">inetsw_array</span>`[] =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#123;</span><br><span class="line">.type =       SOCK_STREAM,</span><br><span class="line">.protocol =   IPPROTO_TCP,</span><br><span class="line">.prot =       &amp;tcp_prot,</span><br><span class="line">.`ops =        &amp;inet_stream_ops`,</span><br><span class="line">.no_check =   <span class="number">0</span>,</span><br><span class="line">.flags =      INET_PROTOSW_PERMANENT |</span><br><span class="line">      INET_PROTOSW_ICSK,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">.type =       SOCK_DGRAM,</span><br><span class="line">.protocol =   IPPROTO_UDP,</span><br><span class="line">.prot =       &amp;udp_prot,</span><br><span class="line">.ops =        &amp;inet_dgram_ops,</span><br><span class="line">.no_check =   UDP_CSUM_DEFAULT,</span><br><span class="line">.flags =      INET_PROTOSW_PERMANENT,</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#123;</span><br><span class="line">       .type =       SOCK_RAW,</span><br><span class="line">       .protocol =   IPPROTO_IP,<span class="comment">/* wild card */</span></span><br><span class="line">       .prot =       &amp;raw_prot,</span><br><span class="line">       .ops =        &amp;inet_sockraw_ops,</span><br><span class="line">       .no_check =   UDP_CSUM_DEFAULT,</span><br><span class="line">       .flags =      INET_PROTOSW_REUSE,</span><br><span class="line">       &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>inet_stream_ops</code>  //  net/ipv4/af_inet.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">proto_ops</span> <span class="title">inet_stream_ops</span> = &#123;</span></span><br><span class="line">.family   = PF_INET,</span><br><span class="line">.owner   = THIS_MODULE,</span><br><span class="line">.release   = inet_release,</span><br><span class="line">.`bind   = inet_bind`,</span><br><span class="line">.connect   = inet_stream_connect,</span><br><span class="line">.socketpair   = sock_no_socketpair,</span><br><span class="line">.accept   = inet_accept,</span><br><span class="line">.getname   = inet_getname,</span><br><span class="line">.poll   = tcp_poll,</span><br><span class="line">.ioctl   = inet_ioctl,</span><br><span class="line">.listen   = inet_listen,</span><br><span class="line">.shutdown   = inet_shutdown,</span><br><span class="line">.setsockopt   = sock_common_setsockopt,</span><br><span class="line">.getsockopt   = sock_common_getsockopt,</span><br><span class="line">.sendmsg   = inet_sendmsg,</span><br><span class="line">.recvmsg   = inet_recvmsg,</span><br><span class="line">.mmap   = sock_no_mmap,</span><br><span class="line">.sendpage   = inet_sendpage,</span><br><span class="line">.splice_read   = tcp_splice_read,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_setsockopt = compat_sock_common_setsockopt,</span><br><span class="line">.compat_getsockopt = compat_sock_common_getsockopt,</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>inet_dgram_ops</code>   //  net/ipv4/af_inet.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">proto_ops</span> <span class="title">inet_dgram_ops</span> = &#123;</span></span><br><span class="line">.family   = PF_INET,</span><br><span class="line">.owner   = THIS_MODULE,</span><br><span class="line">.release   = inet_release,</span><br><span class="line">.`bind   = inet_bind`,</span><br><span class="line">.connect   = inet_dgram_connect,</span><br><span class="line">.socketpair   = sock_no_socketpair,</span><br><span class="line">.accept   = sock_no_accept,</span><br><span class="line">.getname   = inet_getname,</span><br><span class="line">.poll   = udp_poll,</span><br><span class="line">.ioctl   = inet_ioctl,</span><br><span class="line">.listen   = sock_no_listen,</span><br><span class="line">.shutdown   = inet_shutdown,</span><br><span class="line">.setsockopt   = sock_common_setsockopt,</span><br><span class="line">.getsockopt   = sock_common_getsockopt,</span><br><span class="line">.sendmsg   = inet_sendmsg,</span><br><span class="line">.recvmsg   = inet_recvmsg,</span><br><span class="line">.mmap   = sock_no_mmap,</span><br><span class="line">.sendpage   = inet_sendpage,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_setsockopt = compat_sock_common_setsockopt,</span><br><span class="line">.compat_getsockopt = compat_sock_common_getsockopt,</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>inet_sockraw_ops</code> //  net/ipv4/af_inet.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">proto_ops</span> <span class="title">inet_sockraw_ops</span> = &#123;</span></span><br><span class="line">.family   = PF_INET,</span><br><span class="line">.owner   = THIS_MODULE,</span><br><span class="line">.release   = inet_release,</span><br><span class="line">.`bind   = inet_bind`,</span><br><span class="line">.connect   = inet_dgram_connect,</span><br><span class="line">.socketpair   = sock_no_socketpair,</span><br><span class="line">.accept   = sock_no_accept,</span><br><span class="line">.getname   = inet_getname,</span><br><span class="line">.poll   = datagram_poll,</span><br><span class="line">.ioctl   = inet_ioctl,</span><br><span class="line">.listen   = sock_no_listen,</span><br><span class="line">.shutdown   = inet_shutdown,</span><br><span class="line">.setsockopt   = sock_common_setsockopt,</span><br><span class="line">.getsockopt   = sock_common_getsockopt,</span><br><span class="line">.sendmsg   = inet_sendmsg,</span><br><span class="line">.recvmsg   = inet_recvmsg,</span><br><span class="line">.mmap   = sock_no_mmap,</span><br><span class="line">.sendpage   = inet_sendpage,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_setsockopt = compat_sock_common_setsockopt,</span><br><span class="line">.compat_getsockopt = compat_sock_common_getsockopt,</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-1、inet-bind函数"><a href="#3-1、inet-bind函数" class="headerlink" title="3.1、inet_bind函数"></a><strong>3.1、inet_bind函数</strong></h4><p><code>inet_bind</code>函数    // net/ipv4/af_inet.c    line:453</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_bind</span><span class="params">(struct socket *sock, struct sockaddr *uaddr, <span class="keyword">int</span> addr_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">addr</span> = (<span class="title">struct</span> <span class="title">sockaddr_in</span> *)<span class="title">uaddr</span>;</span>  <span class="comment">//要绑定的sockaddr_in结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span> = <span class="title">inet_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> snum;   <span class="comment">//绑定的端口</span></span><br><span class="line"><span class="keyword">int</span> chk_addr_ret;  <span class="comment">//地址类型</span></span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If the socket has its own bind function then use it. (RAW) */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对于RAW类型的socket，调用raw socket自己的bind函数 raw_bind</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (`sk-&gt;sk_prot-&gt;bind`) &#123;</span><br><span class="line">err = sk-&gt;sk_prot-&gt;bind(sk, uaddr, addr_len);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line">err = -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (addr_len &lt; <span class="keyword">sizeof</span>(struct sockaddr_in)) <span class="comment">// sockaddr_in长度错误</span></span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">chk_addr_ret = inet_addr_type(sock_net(sk), addr-&gt;sin_addr.s_addr); <span class="comment">//地址类型检查，看看是否回环地址，多播地址，组播地址，在下面的判断中需要使用到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Not specified by any standard per-se, however it breaks too</span></span><br><span class="line"><span class="comment"> * many applications when removed.  It is unfortunate since</span></span><br><span class="line"><span class="comment"> * allowing applications to make a non-local bind solves</span></span><br><span class="line"><span class="comment"> * several problems with systems using dynamic addressing.</span></span><br><span class="line"><span class="comment"> * (ie. your servers still start up even if your ISDN link</span></span><br><span class="line"><span class="comment"> *  is temporarily down)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">err = -EADDRNOTAVAIL;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sysctl_ip_nonlocal_bind表明是否允许绑定非本地的IP地址，默认为0，不允许绑定</span></span><br><span class="line"><span class="comment">  *   # cd /proc/sys/net/ipv4</span></span><br><span class="line"><span class="comment"> *   # cat ip_nonlocal_bind   0</span></span><br><span class="line"><span class="comment"> *  以上注释说明了使用费本地地址绑定可以解决一些使用动态地址绑定的服务器程</span></span><br><span class="line"><span class="comment"> *  序，所有这个实现还是有实际意义的。</span></span><br><span class="line"><span class="comment">  *  inet-&gt;freebind是通过do_ip_setsockopt函数进行设置的，默认值为1，改值表示允许</span></span><br><span class="line"><span class="comment">  *  绑定一个非本地IP地址和不存在的IP地址，可以通过IP_FREEBIND设置</span></span><br><span class="line"><span class="comment">  *   inet-&gt;tarnsparent 含义就是可以使用一个服务器程序监听所有的IP地址，哪怕不是</span></span><br><span class="line"><span class="comment">  *   本地的IP地址</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">if</span> (!sysctl_ip_nonlocal_bind &amp;&amp;</span><br><span class="line">    !(inet-&gt;freebind || inet-&gt;transparent) &amp;&amp;</span><br><span class="line">    addr-&gt;sin_addr.s_addr != htonl(INADDR_ANY) &amp;&amp;</span><br><span class="line">    chk_addr_ret != RTN_LOCAL &amp;&amp;</span><br><span class="line">    chk_addr_ret != RTN_MULTICAST &amp;&amp;</span><br><span class="line">    chk_addr_ret != RTN_BROADCAST)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">snum = ntohs(addr-&gt;sin_port); <span class="comment">//获取绑定端口号</span></span><br><span class="line">err = -EACCES;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 如果要绑定`0-1023`之内的端口号，需要用户具有CAP_NET_BIND_SERVICE权限，PROT_SOCK就是1024 </span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">if</span> (snum &amp;&amp; snum &lt; PROT_SOCK &amp;&amp; !capable(CAP_NET_BIND_SERVICE))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*      We keep a pair of addresses. rcv_saddr is the one</span></span><br><span class="line"><span class="comment"> *      used by hash lookups, and saddr is used for transmit.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      In the BSD API these are the same except where it</span></span><br><span class="line"><span class="comment"> *      would be illegal to use them (multicast/broadcast) in</span></span><br><span class="line"><span class="comment"> *      which case the sending device address is used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">lock_sock(sk);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check these errors (active socket, double bind). */</span></span><br><span class="line">err = -EINVAL;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 判断sk_state的状态十分为TCP_CLOSE,在创建socket时，sk_state初始为TCP_CLOSE，如果不等于TCP_CLOSE说明已经bind过，而num只有当raw socket时才不为0</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">if</span> (sk-&gt;sk_state != TCP_CLOSE || inet-&gt;inet_num) </span><br><span class="line"><span class="keyword">goto</span> out_release_sock;</span><br><span class="line"></span><br><span class="line">inet-&gt;inet_rcv_saddr = inet-&gt;inet_saddr = addr-&gt;sin_addr.s_addr; <span class="comment">//需要绑定的地址</span></span><br><span class="line"><span class="keyword">if</span> (chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST)</span><br><span class="line">inet-&gt;inet_saddr = <span class="number">0</span>;  <span class="comment">/* Use device */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Make sure we are allowed to bind here. */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 调用四层的bind函数，对于TCP来说，就是inet_csk_get_port </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">if</span> (`sk-&gt;sk_prot-&gt;get_port`(sk, snum)) &#123;</span><br><span class="line">inet-&gt;inet_saddr = inet-&gt;inet_rcv_saddr = <span class="number">0</span>;</span><br><span class="line">err = -EADDRINUSE;</span><br><span class="line"><span class="keyword">goto</span> out_release_sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inet-&gt;inet_rcv_saddr)</span><br><span class="line">sk-&gt;sk_userlocks |= SOCK_BINDADDR_LOCK;  <span class="comment">//设置sk中的sk-&gt;userlocks表示绑定地址</span></span><br><span class="line"><span class="keyword">if</span> (snum)</span><br><span class="line">sk-&gt;sk_userlocks |= SOCK_BINDPORT_LOCK;  <span class="comment">//设置sk中的sk-&gt;userlocks表示绑定端口</span></span><br><span class="line">inet-&gt;inet_sport = htons(inet-&gt;inet_num);</span><br><span class="line">inet-&gt;inet_daddr = <span class="number">0</span>;</span><br><span class="line">inet-&gt;inet_dport = <span class="number">0</span>;</span><br><span class="line">sk_dst_reset(sk);</span><br><span class="line">err = <span class="number">0</span>;</span><br><span class="line">out_release_sock:</span><br><span class="line">release_sock(sk);</span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> err;</span><br></pre></td></tr></table></figure><h4 id="3-2、sk-gt-sk-prot-gt-bind赋值"><a href="#3-2、sk-gt-sk-prot-gt-bind赋值" class="headerlink" title="3.2、sk-&gt;sk_prot-&gt;bind赋值"></a><strong>3.2、sk-&gt;sk_prot-&gt;bind赋值</strong></h4><p>　　sk-&gt;sk_prot-&gt;bind成员赋值，由以下tcp_prot、udp_prot和raw_prot三个proto结构体变量的各个成员赋值可值，tcp_prot和udp_prot变量不存在bind成员赋值，只有raw_prot变量存在bind成员赋值且.bind = raw_bind。<br><code>tcp_prot</code>         // net/ipv4/tcp_ipv4.c        line:2601</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proto</span> <span class="title">tcp_prot</span> = &#123;</span></span><br><span class="line">.name= `<span class="string">"TCP"</span>`,</span><br><span class="line">.owner= THIS_MODULE,</span><br><span class="line">.close= tcp_close,</span><br><span class="line">.connect= tcp_v4_connect,</span><br><span class="line">.disconnect= tcp_disconnect,</span><br><span class="line">.accept= inet_csk_accept,</span><br><span class="line">.ioctl= tcp_ioctl,</span><br><span class="line">.init= tcp_v4_init_sock,</span><br><span class="line">.destroy= tcp_v4_destroy_sock,</span><br><span class="line">.shutdown= tcp_shutdown,</span><br><span class="line">.setsockopt= tcp_setsockopt,</span><br><span class="line">.getsockopt= tcp_getsockopt,</span><br><span class="line">.recvmsg= tcp_recvmsg,</span><br><span class="line">.sendmsg= tcp_sendmsg,</span><br><span class="line">.sendpage= tcp_sendpage,</span><br><span class="line">.backlog_rcv= tcp_v4_do_rcv,</span><br><span class="line">.hash= inet_hash,</span><br><span class="line">.unhash= inet_unhash,</span><br><span class="line">.`get_port= inet_csk_get_port`,</span><br><span class="line">.enter_memory_pressure= tcp_enter_memory_pressure,</span><br><span class="line">.sockets_allocated= &amp;tcp_sockets_allocated,</span><br><span class="line">.orphan_count= &amp;tcp_orphan_count,</span><br><span class="line">.memory_allocated= &amp;tcp_memory_allocated,</span><br><span class="line">.memory_pressure= &amp;tcp_memory_pressure,</span><br><span class="line">.sysctl_mem= sysctl_tcp_mem,</span><br><span class="line">.sysctl_wmem= sysctl_tcp_wmem,</span><br><span class="line">.sysctl_rmem= sysctl_tcp_rmem,</span><br><span class="line">.max_header= MAX_TCP_HEADER,</span><br><span class="line">.obj_size= <span class="keyword">sizeof</span>(struct tcp_sock),</span><br><span class="line">.slab_flags= SLAB_DESTROY_BY_RCU,</span><br><span class="line">.twsk_prot= &amp;tcp_timewait_sock_ops,</span><br><span class="line">.rsk_prot= &amp;tcp_request_sock_ops,</span><br><span class="line">.h.hashinfo= &amp;tcp_hashinfo,</span><br><span class="line">.no_autobind= <span class="literal">true</span>,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_setsockopt= compat_tcp_setsockopt,</span><br><span class="line">.compat_getsockopt= compat_tcp_getsockopt,</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>udp_prot</code>        // net/ipv4/udp.c    line:1860</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proto</span> <span class="title">udp_prot</span> = &#123;</span></span><br><span class="line">.name   = `<span class="string">"UDP"</span>`,</span><br><span class="line">.owner   = THIS_MODULE,</span><br><span class="line">.close   = udp_lib_close,</span><br><span class="line">.connect   = ip4_datagram_connect,</span><br><span class="line">.disconnect   = udp_disconnect,</span><br><span class="line">.ioctl   = udp_ioctl,</span><br><span class="line">.destroy   = udp_destroy_sock,</span><br><span class="line">.setsockopt   = udp_setsockopt,</span><br><span class="line">.getsockopt   = udp_getsockopt,</span><br><span class="line">.sendmsg   = udp_sendmsg,</span><br><span class="line">.recvmsg   = udp_recvmsg,</span><br><span class="line">.sendpage   = udp_sendpage,</span><br><span class="line">.backlog_rcv   = __udp_queue_rcv_skb,</span><br><span class="line">.hash   = udp_lib_hash,</span><br><span class="line">.unhash   = udp_lib_unhash,</span><br><span class="line">.rehash   = udp_v4_rehash,</span><br><span class="line">.`get_port   = udp_v4_get_port`,</span><br><span class="line">.memory_allocated  = &amp;udp_memory_allocated,</span><br><span class="line">.sysctl_mem   = sysctl_udp_mem,</span><br><span class="line">.sysctl_wmem   = &amp;sysctl_udp_wmem_min,</span><br><span class="line">.sysctl_rmem   = &amp;sysctl_udp_rmem_min,</span><br><span class="line">.obj_size   = <span class="keyword">sizeof</span>(struct udp_sock),</span><br><span class="line">.slab_flags   = SLAB_DESTROY_BY_RCU,</span><br><span class="line">.h.udp_table   = &amp;udp_table,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_setsockopt = compat_udp_setsockopt,</span><br><span class="line">.compat_getsockopt = compat_udp_getsockopt,</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>raw_port</code>        //net/ipv4/raw.c  line:842</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proto</span> <span class="title">raw_prot</span> = &#123;</span></span><br><span class="line">.name   = `<span class="string">"RAW"</span>`,</span><br><span class="line">.owner   = THIS_MODULE,</span><br><span class="line">.close   = raw_close,</span><br><span class="line">.destroy   = raw_destroy,</span><br><span class="line">.connect   = ip4_datagram_connect,</span><br><span class="line">.disconnect   = udp_disconnect,</span><br><span class="line">.ioctl   = raw_ioctl,</span><br><span class="line">.init   = raw_init,</span><br><span class="line">.setsockopt   = raw_setsockopt,</span><br><span class="line">.getsockopt   = raw_getsockopt,</span><br><span class="line">.sendmsg   = raw_sendmsg,</span><br><span class="line">.recvmsg   = raw_recvmsg,</span><br><span class="line">.`bind   = raw_bind`,</span><br><span class="line">.backlog_rcv   = raw_rcv_skb,</span><br><span class="line">.hash   = raw_hash_sk,</span><br><span class="line">.unhash   = raw_unhash_sk,</span><br><span class="line">.obj_size   = <span class="keyword">sizeof</span>(struct raw_sock),</span><br><span class="line">.h.raw_hash   = &amp;raw_v4_hashinfo,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_setsockopt = compat_raw_setsockopt,</span><br><span class="line">.compat_getsockopt = compat_raw_getsockopt,</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　通过以上tcp_prot、udp_prot和raw_prot发现，在tcp_prot和udp_prot不存在bind成员，而存在get_prot成员。raw_prot中存在bind成员。这也是inet_bind函数中判断<code>sk-&gt;sk_prot-&gt;bind</code>是否存在，存在则调用自身的bind函数。对于tcp和udp socket，inet_bind函数随后会调用<code>sk-&gt;sk_prot-&gt;get_port</code>即inet_csk_get_port（tcp）或udp_v4_get_port(udp);</p><h3 id="4、inet-csk-get-port函数"><a href="#4、inet-csk-get-port函数" class="headerlink" title="4、inet_csk_get_port函数"></a><strong>4、inet_csk_get_port函数</strong></h3><p>　　inet_csk_get_port函数为TCP套接字sk-&gt;sk_prot-&gt;get_port的赋值。<br><code>inet_csk_get_port</code>         // net/ipv4/tcp_ipv4.c line:2621</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Obtain a reference to a local port for the given sock,</span></span><br><span class="line"><span class="comment"> * if snum is zero it means select any available local port.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_csk_get_port</span><span class="params">(struct sock *sk, <span class="keyword">unsigned</span> <span class="keyword">short</span> snum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * TCP散列表管理结构实例tcp_hashinfo,在tcp.c文件中tcp_init函数中进行初始化</span></span><br><span class="line"><span class="comment"> * 工作，在tcp_ipv4.c文件中，struct proto tcp_prot结构体对其进行赋值</span></span><br><span class="line"><span class="comment"> * .h.hasinfo=&amp;tcp_hashinfo;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_hashinfo</span> *<span class="title">hashinfo</span> = <span class="title">sk</span>-&gt;<span class="title">sk_prot</span>-&gt;<span class="title">h</span>.<span class="title">hashinfo</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> `<span class="title">inet_bind_hashbucket</span>` *<span class="title">head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">node</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_bind_bucket</span> *<span class="title">tb</span>;</span></span><br><span class="line"><span class="keyword">int</span> ret, attempts = <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span> = <span class="title">sock_net</span>(<span class="title">sk</span>);</span></span><br><span class="line"><span class="keyword">int</span> smallest_size = <span class="number">-1</span>, smallest_rover;</span><br><span class="line"></span><br><span class="line">local_bh_disable();</span><br><span class="line"><span class="keyword">if</span> (!snum) &#123; <span class="comment">//如果用户绑定端口为0，就选择一个可用的本地端口</span></span><br><span class="line"><span class="keyword">int</span> remaining, rover, low, high;</span><br><span class="line"></span><br><span class="line">again:</span><br><span class="line">`inet_get_local_port_range`(&amp;low, &amp;high); <span class="comment">//获取本地可以使用的端口范围</span></span><br><span class="line">remaining = (high - low) + <span class="number">1</span>; <span class="comment">//最大重新分配次数</span></span><br><span class="line">smallest_rover = rover = net_random() % remaining + low; <span class="comment">// 随机生成端口号赋值给rover</span></span><br><span class="line"></span><br><span class="line">smallest_size = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * while循环代码是根据获取到的空闲的端口号和bhash_size从bhash上取得HASH值对应</span></span><br><span class="line"><span class="comment"> * 的链表，然后遍历链表，对比链表中是否有获取到的空闲端口，如果存在该端口，说明</span></span><br><span class="line"><span class="comment"> * 获取的该端口号已经被占用，如果已经被占用就将获取的+1,如果大于最大值，则从最</span></span><br><span class="line"><span class="comment"> * 小值开始重新遍历端口列表，知道尝试成功次数为remaining</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (inet_is_reserved_local_port(rover)) <span class="comment">//如果是保留端口直接寻找下一接口</span></span><br><span class="line"><span class="keyword">goto</span> next_nolock;</span><br><span class="line">head = &amp;hashinfo-&gt;bhash[inet_bhashfn(net, rover,</span><br><span class="line">hashinfo-&gt;bhash_size)];</span><br><span class="line">spin_lock(&amp;head-&gt;lock);</span><br><span class="line">inet_bind_bucket_for_each(tb, node, &amp;head-&gt;chain)</span><br><span class="line"><span class="keyword">if</span> (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == rover) &#123;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 判断端口是否可以被复用，如果可以被复用即使在绑定表中，</span></span><br><span class="line"><span class="comment">*也优先使用可以复用的端口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (`tb`-&gt;fastreuse &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    sk-&gt;sk_reuse &amp;&amp;</span><br><span class="line">    sk-&gt;sk_state != TCP_LISTEN &amp;&amp;</span><br><span class="line">    (tb-&gt;num_owners &lt; smallest_size || smallest_size == <span class="number">-1</span>)) &#123;</span><br><span class="line">smallest_size = tb-&gt;num_owners; <span class="comment">//记录端口使用者的次数</span></span><br><span class="line">smallest_rover = rover;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果绑定端口的个数大于端口的可用个数，就回判断是否绑定冲突</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (atomic_read(&amp;hashinfo-&gt;bsockets) &gt; (high - low) + <span class="number">1</span>) &#123;</span><br><span class="line">spin_unlock(&amp;head-&gt;lock);</span><br><span class="line">snum = smallest_rover;</span><br><span class="line"><span class="keyword">goto</span> have_snum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">next:</span><br><span class="line">spin_unlock(&amp;head-&gt;lock);</span><br><span class="line">next_nolock:</span><br><span class="line"><span class="keyword">if</span> (++rover &gt; high)</span><br><span class="line">rover = low;</span><br><span class="line">&#125; <span class="keyword">while</span> (--remaining &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Exhausted local port range during search?  It is not</span></span><br><span class="line"><span class="comment"> * possible for us to be holding one of the bind hash</span></span><br><span class="line"><span class="comment"> * locks if this test triggers, because if 'remaining'</span></span><br><span class="line"><span class="comment"> * drops to zero, we broke out of the do/while loop at</span></span><br><span class="line"><span class="comment"> * the top level, not from the 'break;' statement.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123; <span class="comment">//如果没有查找到，再给次机会</span></span><br><span class="line"><span class="keyword">if</span> (smallest_size != <span class="number">-1</span>) &#123;</span><br><span class="line">snum = smallest_rover;</span><br><span class="line"><span class="keyword">goto</span> have_snum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* OK, here is the one we will use.  HEAD is</span></span><br><span class="line"><span class="comment"> * non-NULL and we hold it's mutex.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">snum = rover;  <span class="comment">//找到绑定端口号</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  <span class="comment">//如果指定端口号，则在相应的链表中进行查询</span></span><br><span class="line">have_snum:</span><br><span class="line">head = &amp;hashinfo-&gt;bhash[inet_bhashfn(net, snum,</span><br><span class="line">hashinfo-&gt;bhash_size)];</span><br><span class="line">spin_lock(&amp;head-&gt;lock);</span><br><span class="line">inet_bind_bucket_for_each(tb, node, &amp;head-&gt;chain)</span><br><span class="line"><span class="keyword">if</span> (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == snum)</span><br><span class="line"><span class="keyword">goto</span> tb_found;  <span class="comment">// 在绑定表中查找，表示该端口已经绑定</span></span><br><span class="line">&#125;</span><br><span class="line">tb = <span class="literal">NULL</span>;  <span class="comment">//如果指定的端口在绑定表中没有发现，直接创建</span></span><br><span class="line"><span class="keyword">goto</span> tb_not_found;</span><br><span class="line">tb_found:</span><br><span class="line"><span class="keyword">if</span> (!hlist_empty(&amp;tb-&gt;owners)) &#123;</span><br><span class="line"><span class="keyword">if</span> (tb-&gt;fastreuse &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN &amp;&amp;</span><br><span class="line">    smallest_size == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">goto</span> success; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (`inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict`(sk, tb)) &#123; <span class="comment">// 调用inet_csk_bind_conflict 函数</span></span><br><span class="line"><span class="keyword">if</span> (sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN &amp;&amp;</span><br><span class="line">    smallest_size != <span class="number">-1</span> &amp;&amp; --attempts &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">spin_unlock(&amp;head-&gt;lock);</span><br><span class="line"><span class="keyword">goto</span> again;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> fail_unlock;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tb_not_found:</span><br><span class="line">ret = <span class="number">1</span>; <span class="comment">//如果在绑定表中没有发现，则创建</span></span><br><span class="line"><span class="keyword">if</span> (!tb &amp;&amp; (tb = `inet_bind_bucket_create`(hashinfo-&gt;bind_bucket_cachep,</span><br><span class="line">net, head, snum)) == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">goto</span> fail_unlock;</span><br><span class="line"><span class="keyword">if</span> (hlist_empty(&amp;tb-&gt;owners)) &#123; <span class="comment">//如果没有绑定socket</span></span><br><span class="line"><span class="keyword">if</span> (sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN) </span><br><span class="line">tb-&gt;fastreuse = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">tb-&gt;fastreuse = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tb-&gt;fastreuse &amp;&amp;</span><br><span class="line">   (!sk-&gt;sk_reuse || sk-&gt;sk_state == TCP_LISTEN))</span><br><span class="line">tb-&gt;fastreuse = <span class="number">0</span>;</span><br><span class="line">success: <span class="comment">//如果成功找到一个可用的端口，添加到绑定表中</span></span><br><span class="line"><span class="keyword">if</span> (!inet_csk(sk)-&gt;icsk_bind_hash)</span><br><span class="line">`inet_bind_hash`(sk, tb, snum); <span class="comment">// 把当前的sock插入到woers</span></span><br><span class="line">WARN_ON(inet_csk(sk)-&gt;icsk_bind_hash != tb);</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fail_unlock:</span><br><span class="line">spin_unlock(&amp;head-&gt;lock);</span><br><span class="line">fail:</span><br><span class="line">local_bh_enable();</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1、inet-get-local-port-range函数"><a href="#4-1、inet-get-local-port-range函数" class="headerlink" title="4.1、inet_get_local_port_range函数"></a><strong>4.1、inet_get_local_port_range函数</strong></h4><p><code>inet_get_local_port_range</code>  //  net/ipv4/inet_connection_sock.c         line:43</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_get_local_port_range</span><span class="params">(<span class="keyword">int</span> *low, <span class="keyword">int</span> *high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> seq;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">seq = read_seqbegin(&amp;sysctl_local_ports.lock);</span><br><span class="line"></span><br><span class="line">*low = sysctl_local_ports.range[<span class="number">0</span>];</span><br><span class="line">*high = sysctl_local_ports.range[<span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">while</span> (read_seqretry(&amp;sysctl_local_ports.lock, seq));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sysctl_local_ports</code>    // net/ipv4/inet_connection_sock.c    line:35</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This struct holds the first and last local port number.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">local_ports</span> <span class="title">sysctl_local_ports</span> __<span class="title">read_mostly</span> = &#123;</span></span><br><span class="line">.lock = SEQLOCK_UNLOCKED,</span><br><span class="line">.range = &#123; <span class="number">32768</span>, <span class="number">61000</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　inet_get_local_port_range()获取本地可用端口的范围，由sysctl_local_ports定义可以知道端口的范围为32768-61000。如果用户控件绑定的本地端口为0的话，会自动为套接字分配一个可以的端口。</p><h4 id="4-2、本地端口可以被复用的条件"><a href="#4-2、本地端口可以被复用的条件" class="headerlink" title="4.2、本地端口可以被复用的条件"></a><strong>4.2、本地端口可以被复用的条件</strong></h4><p>本地端口可以被复用的几个条件如下：</p><ul><li>1、绑定到不同接口的Sockets可以复用本地端口</li><li>2、如果所有Sockets都设置sk-&gt;sk_reuse,并且都不在TCP_LISTEN状态，可以复用端口</li><li>3、如果所有Socket绑定在一个特定的inet_sk(sk)-&gt;rcv_saddr本地地址，并且地址都不相同，可以复用</li></ul><p><code>inet_bind_bucket</code>结构体  // include/net/inet_hashtables.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* There are a few simple rules, which allow for local port reuse by</span></span><br><span class="line"><span class="comment"> * an application.  In essence:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *1) Sockets bound to different interfaces may share a local port.</span></span><br><span class="line"><span class="comment"> *   Failing that, goto test 2.</span></span><br><span class="line"><span class="comment"> *2) If all sockets have sk-&gt;sk_reuse set, and none of them are in</span></span><br><span class="line"><span class="comment"> *   TCP_LISTEN state, the port may be shared.</span></span><br><span class="line"><span class="comment"> *   Failing that, goto test 3.</span></span><br><span class="line"><span class="comment"> *3) If all sockets are bound to a specific inet_sk(sk)-&gt;rcv_saddr local</span></span><br><span class="line"><span class="comment"> *   address, and none of them are the same, the port may be</span></span><br><span class="line"><span class="comment"> *   shared.</span></span><br><span class="line"><span class="comment"> *   Failing this, the port cannot be shared.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The interesting point, is test #2.  This is what an FTP server does</span></span><br><span class="line"><span class="comment"> * all day.  To optimize this case we use a specific flag bit defined</span></span><br><span class="line"><span class="comment"> * below.  As we add sockets to a bind bucket list, we perform a</span></span><br><span class="line"><span class="comment"> * check of: (newsk-&gt;sk_reuse &amp;&amp; (newsk-&gt;sk_state != TCP_LISTEN))</span></span><br><span class="line"><span class="comment"> * As long as all sockets added to a bind bucket pass this test,</span></span><br><span class="line"><span class="comment"> * the flag bit will be set.</span></span><br><span class="line"><span class="comment"> * The resulting situation is that tcp_v[46]_verify_bind() can just check</span></span><br><span class="line"><span class="comment"> * for this flag bit, if it is set and the socket trying to bind has</span></span><br><span class="line"><span class="comment"> * sk-&gt;sk_reuse set, we don't even have to walk the owners list at all,</span></span><br><span class="line"><span class="comment"> * we return that it is ok to bind this socket to the requested local port.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Sounds like a lot of work, but it is worth it.  In a more naive</span></span><br><span class="line"><span class="comment"> * implementation (ie. current FreeBSD etc.) the entire list of ports</span></span><br><span class="line"><span class="comment"> * must be walked for each data port opened by an ftp server.  Needless</span></span><br><span class="line"><span class="comment"> * to say, this does not scale at all.  With a couple thousand FTP</span></span><br><span class="line"><span class="comment"> * users logged onto your box, isn't it nice to know that new data</span></span><br><span class="line"><span class="comment"> * ports are created in O(1) time?  I thought so. ;-)-DaveM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_bind_bucket</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NET_NS</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net</span>*<span class="title">ib_net</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span>port;</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">short</span>fastreuse;</span><br><span class="line"><span class="keyword">int</span>num_owners;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span><span class="title">node</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span><span class="title">owners</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-3、inet-csk-sk-gt-icsk-af-ops-gt-bind-conflict-sk-tb-调用"><a href="#4-3、inet-csk-sk-gt-icsk-af-ops-gt-bind-conflict-sk-tb-调用" class="headerlink" title="4.3、inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb)调用"></a><strong>4.3、inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb)调用</strong></h4><p><code>bind_conflict</code>赋值   // net/ipv4/tcp_ipv4.c  line:1825</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock_af_ops</span> `<span class="title">ipv4_specific</span>` = &#123;</span></span><br><span class="line">.queue_xmit   = ip_queue_xmit,</span><br><span class="line">.send_check   = tcp_v4_send_check,</span><br><span class="line">.rebuild_header   = inet_sk_rebuild_header,</span><br><span class="line">.conn_request   = tcp_v4_conn_request,</span><br><span class="line">.syn_recv_sock   = tcp_v4_syn_recv_sock,</span><br><span class="line">.remember_stamp   = tcp_v4_remember_stamp,</span><br><span class="line">.net_header_len   = <span class="keyword">sizeof</span>(struct iphdr),</span><br><span class="line">.setsockopt   = ip_setsockopt,</span><br><span class="line">.getsockopt   = ip_getsockopt,</span><br><span class="line">.addr2sockaddr   = inet_csk_addr2sockaddr,</span><br><span class="line">.sockaddr_len   = <span class="keyword">sizeof</span>(struct sockaddr_in),</span><br><span class="line">`.bind_conflict   = inet_csk_bind_conflict`, </span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_setsockopt = compat_ip_setsockopt,</span><br><span class="line">.compat_getsockopt = compat_ip_getsockopt,</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　由<a href="#wow1_4_3"><code>第一章4.3节</code></a>中tcp_v4_init_sock函数可知ipv4_specific被赋值于icsk-&gt;icsk_af_ops = &ipv4_specific;而struct inet_connection_sock *icsk = inet_csk(sk);    代码如下：</p><p><code>tcp_v4_init_sock</code>函数同第一章4.3节  // net/ipv4/tcp_ipv4.c    line:1857</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* <span class="doctag">NOTE:</span> A lot of things set to zero explicitly by call to</span></span><br><span class="line"><span class="comment"> *       sk_alloc() so need not be done here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tcp_v4_init_sock</span><span class="params">(struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock</span> `*<span class="title">icsk</span> = <span class="title">inet_csk</span>(<span class="title">sk</span>)`;</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line"></span><br><span class="line">skb_queue_head_init(&amp;tp-&gt;out_of_order_queue);</span><br><span class="line">tcp_init_xmit_timers(sk);</span><br><span class="line">tcp_prequeue_init(tp);</span><br><span class="line"></span><br><span class="line">icsk-&gt;icsk_rto = TCP_TIMEOUT_INIT;</span><br><span class="line">tp-&gt;mdev = TCP_TIMEOUT_INIT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* So many TCP implementations out there (incorrectly) count the</span></span><br><span class="line"><span class="comment"> * initial SYN frame in their delayed-ACK and congestion control</span></span><br><span class="line"><span class="comment"> * algorithms that we must have the following bandaid to talk</span></span><br><span class="line"><span class="comment"> * efficiently to them.  -DaveM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tp-&gt;snd_cwnd = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* See draft-stevens-tcpca-spec-01 for discussion of the</span></span><br><span class="line"><span class="comment"> * initialization of these values.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tp-&gt;snd_ssthresh = TCP_INFINITE_SSTHRESH;</span><br><span class="line">tp-&gt;snd_cwnd_clamp = ~<span class="number">0</span>;</span><br><span class="line">tp-&gt;mss_cache = TCP_MSS_DEFAULT;</span><br><span class="line"></span><br><span class="line">tp-&gt;reordering = sysctl_tcp_reordering;</span><br><span class="line">icsk-&gt;icsk_ca_ops = &amp;tcp_init_congestion_ops;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_state = TCP_CLOSE;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_write_space = sk_stream_write_space;</span><br><span class="line">sock_set_flag(sk, SOCK_USE_WRITE_QUEUE);</span><br><span class="line"></span><br><span class="line">`icsk-&gt;icsk_af_ops = &amp;ipv4_specific;`</span><br><span class="line">icsk-&gt;icsk_sync_mss = tcp_sync_mss;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_TCP_MD5SIG</span></span><br><span class="line">tp-&gt;af_specific = &amp;tcp_sock_ipv4_specific;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* TCP Cookie Transactions */</span></span><br><span class="line"><span class="keyword">if</span> (sysctl_tcp_cookie_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* Default, cookies without s_data_payload. */</span></span><br><span class="line">tp-&gt;cookie_values =</span><br><span class="line">kzalloc(<span class="keyword">sizeof</span>(*tp-&gt;cookie_values),</span><br><span class="line">sk-&gt;sk_allocation);</span><br><span class="line"><span class="keyword">if</span> (tp-&gt;cookie_values != <span class="literal">NULL</span>)</span><br><span class="line">kref_init(&amp;tp-&gt;cookie_values-&gt;kref);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Presumed zeroed, in order of appearance:</span></span><br><span class="line"><span class="comment"> *cookie_in_always, cookie_out_never,</span></span><br><span class="line"><span class="comment"> *s_data_constant, s_data_in, s_data_out</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sk-&gt;sk_sndbuf = sysctl_tcp_wmem[<span class="number">1</span>];</span><br><span class="line">sk-&gt;sk_rcvbuf = sysctl_tcp_rmem[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">local_bh_disable();</span><br><span class="line">percpu_counter_inc(&amp;tcp_sockets_allocated);</span><br><span class="line">local_bh_enable();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　由以上代码可知inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb)真正调用的为：inet_csk_bind_conflict函数。<br>　　inet_csk_bind_conflict 检查端口是否冲突，返回0表示可以绑定，不冲突，返回1表示无法绑定该端口。<br><code>inet_csk_bind_conflict</code>函数     // net/ipv4/inet_connection_sock.c    line:57</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_csk_bind_conflict</span><span class="params">(<span class="keyword">const</span> struct sock *sk,</span></span></span><br><span class="line"><span class="function"><span class="params">   <span class="keyword">const</span> struct inet_bind_bucket *tb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> __be32 sk_rcv_saddr = inet_rcv_saddr(sk);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">node</span>;</span></span><br><span class="line"><span class="keyword">int</span> reuse = sk-&gt;sk_reuse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Unlike other sk lookup places we do not check</span></span><br><span class="line"><span class="comment"> * for sk_net here, since _all_ the socks listed</span></span><br><span class="line"><span class="comment"> * in tb-&gt;owners list belong to the same net - the</span></span><br><span class="line"><span class="comment"> * one this bucket belongs to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">sk_for_each_bound(sk2, node, &amp;tb-&gt;owners) &#123;</span><br><span class="line"><span class="keyword">if</span> (sk != sk2 &amp;&amp;</span><br><span class="line">    !inet_v6_ipv6only(sk2) &amp;&amp;</span><br><span class="line">    (!sk-&gt;sk_bound_dev_if ||</span><br><span class="line">     !sk2-&gt;sk_bound_dev_if ||</span><br><span class="line">     sk-&gt;sk_bound_dev_if == sk2-&gt;sk_bound_dev_if)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!reuse || !sk2-&gt;sk_reuse ||</span><br><span class="line">    sk2-&gt;sk_state == TCP_LISTEN) &#123;</span><br><span class="line"><span class="keyword">const</span> __be32 sk2_rcv_saddr = inet_rcv_saddr(sk2);</span><br><span class="line"><span class="keyword">if</span> (!sk2_rcv_saddr || !sk_rcv_saddr ||</span><br><span class="line">    sk2_rcv_saddr == sk_rcv_saddr)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4、inet-bind-bucket-create"><a href="#4-4、inet-bind-bucket-create" class="headerlink" title="4.4、inet_bind_bucket_create"></a><strong>4.4、inet_bind_bucket_create</strong></h4><p>　　inet_bind_bucket_create函数分配一个inet_bind_bucket结构体实例并进行初始化操作，然后绑定到已绑定端口的散列表中。<br><code>inet_bind_bucket_create</code>函数    // net/ipv4/inet_hashtables.c     line:33</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Allocate and initialize a new local port bind bucket.</span></span><br><span class="line"><span class="comment"> * The bindhash mutex for snum's hash chain must be held here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct inet_bind_bucket *<span class="title">inet_bind_bucket_create</span><span class="params">(struct kmem_cache *cachep,</span></span></span><br><span class="line"><span class="function"><span class="params"> struct net *net,</span></span></span><br><span class="line"><span class="function"><span class="params"> struct inet_bind_hashbucket *head,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> snum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_bind_bucket</span> *<span class="title">tb</span> = <span class="title">kmem_cache_alloc</span>(<span class="title">cachep</span>, <span class="title">GFP_ATOMIC</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tb != <span class="literal">NULL</span>) &#123;</span><br><span class="line">write_pnet(&amp;tb-&gt;ib_net, hold_net(net));</span><br><span class="line">tb-&gt;port      = snum;</span><br><span class="line">tb-&gt;fastreuse = <span class="number">0</span>;</span><br><span class="line">tb-&gt;num_owners = <span class="number">0</span>;</span><br><span class="line">INIT_HLIST_HEAD(&amp;tb-&gt;owners);</span><br><span class="line">hlist_add_head(&amp;tb-&gt;node, &amp;head-&gt;chain);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5、inet-bind-hash"><a href="#4-5、inet-bind-hash" class="headerlink" title="4.5、inet_bind_hash"></a><strong>4.5、inet_bind_hash</strong></h4><p>　　inet_bind_hash函数更新变量<br><code>inet_bind_hash</code>函数    // net/ipv4/inet_hashtables.c        line:63</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_bind_hash</span><span class="params">(struct sock *sk, struct inet_bind_bucket *tb,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> snum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_hashinfo</span> *<span class="title">hashinfo</span> = <span class="title">sk</span>-&gt;<span class="title">sk_prot</span>-&gt;<span class="title">h</span>.<span class="title">hashinfo</span>;</span> <span class="comment">//TCP散列表管理结构实例TCP_hashinfo</span></span><br><span class="line"></span><br><span class="line">atomic_inc(&amp;hashinfo-&gt;bsockets); <span class="comment">// 绑定次数加1</span></span><br><span class="line"></span><br><span class="line">inet_sk(sk)-&gt;inet_num = snum; <span class="comment">//端口号赋值</span></span><br><span class="line">sk_add_bind_node(sk, &amp;tb-&gt;owners); <span class="comment">//把Socket加入到tb-&gt;owners的hash表中</span></span><br><span class="line">tb-&gt;num_owners++;  <span class="comment">//端口绑定次数加1</span></span><br><span class="line">inet_csk(sk)-&gt;icsk_bind_hash = tb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、inet-hashinfo-结构体"><a href="#5、inet-hashinfo-结构体" class="headerlink" title="5、inet_hashinfo 结构体"></a><strong>5、inet_hashinfo 结构体</strong></h2><p><code>inet_hashinfo</code>结构体 //include/net/inet_hashtables.h    line:118</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_hashinfo</span> &#123;</span></span><br><span class="line"><span class="comment">/* This is for sockets with full identity only.  Sockets here will</span></span><br><span class="line"><span class="comment"> * always be without wildcards and will have the following invariant:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *          TCP_ESTABLISHED &lt;= sk-&gt;sk_state &lt; TCP_CLOSE</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * TIME_WAIT sockets use a separate chain (twchain).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_ehash_bucket</span>*<span class="title">ehash</span>;</span></span><br><span class="line"><span class="keyword">spinlock_t</span>*ehash_locks;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>ehash_mask;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>ehash_locks_mask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ok, let's try this, I give up, we do need a local binding</span></span><br><span class="line"><span class="comment"> * TCP hash as well as the others for fast bind/connect.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_bind_hashbucket</span>*<span class="title">bhash</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bhash_size;</span><br><span class="line"><span class="comment">/* 4 bytes hole on 64 bit */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span>*<span class="title">bind_bucket_cachep</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* All the above members are written once at bootup and</span></span><br><span class="line"><span class="comment"> * never written again _or_ are predominantly read-access.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Now align to a new cache line as all the following members</span></span><br><span class="line"><span class="comment"> * might be often dirty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* All sockets in TCP_LISTEN state will be in here.  This is the only</span></span><br><span class="line"><span class="comment"> * table where wildcard'd TCP sockets can exist.  Hash function here</span></span><br><span class="line"><span class="comment"> * is just local port number.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_listen_hashbucket</span><span class="title">listening_hash</span>[<span class="title">INET_LHTABLE_SIZE</span>]</span></span><br><span class="line"><span class="class">____<span class="title">cacheline_aligned_in_smp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">atomic_t</span>bsockets;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6、绑定bind代码流程图"><a href="#6、绑定bind代码流程图" class="headerlink" title="6、绑定bind代码流程图"></a><strong>6、绑定bind代码流程图</strong></h2><div align="center"><p><img src="/img/note_0b/06.png" alt></p></div><p>　　bind主要的主要是选择一个可用的端口号，如果用户没有指定端口号，则会按照一定的规则进行选择一个可用的端口号。<br>　　对于Google REUSEPORT 新特性，支持多个进程或者线程绑定到相同的 IP 和端口，以提高 server 的性能。<br>　　该特性实现了 IPv4/IPv6 下 TCP/UDP 协议的支持， 已经集成到 kernel 3.9 中。<br>　　核心的实现主要有三点：</p><p>　　-（1）扩展 socket option，增加 SO_REUSEPORT 选项，用来设置 reuseport。<br>　　-（2）修改 bind 系统调用实现，以便支持可以绑定到相同的 IP 和端口<br>　　-（3）修改处理新建连接的实现，查找 listener 的时候，能够支持在监听相同 IP 和端口的多个 sock 之间均衡选择。请参考： <u><a href="http://blog.chinaunix.net/uid-10167808-id-3807060.html" target="_blank" rel="noopener">多个进程绑定相同端口的实现分析</a></u><br>　　参考资料：<br>　　　　<u><a href="https://blog.csdn.net/zhangskd/article/details/13631715" target="_blank" rel="noopener">Socket层实现系列 — bind()的实现</a></u><br>　　　　<u><a href="http://tsecer.blog.163.com/blog/static/1501817201281211321031" target="_blank" rel="noopener">linux中绑定一个不存在的本地地址</a></u></p><h2 id="三、监听listen"><a href="#三、监听listen" class="headerlink" title="三、监听listen"></a><strong>三、监听listen</strong></h2><p>　　<code>SYSCALL_DEFINE2(listen, int, fd, int, backlog)</code>函数，该函数主要是在用户空间使用listen系统调用函数进行调用执行，在Linux内核中的还是使用System call vectors实现</p><h3 id="1、SYSCALL-DEFINE2-listen-…"><a href="#1、SYSCALL-DEFINE2-listen-…" class="headerlink" title="1、SYSCALL_DEFINE2(listen,…)"></a><strong>1、SYSCALL_DEFINE2(listen,…)</strong></h3><p>SYSCALL_DEFINE2(<code>listen</code>, int, fd, int, backlog)    // net/socket.c        line:1422</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Perform a listen. Basically, we allow the protocol to do anything</span></span><br><span class="line"><span class="comment"> *necessary for a listen, and if that works, we mark the socket as</span></span><br><span class="line"><span class="comment"> *ready for listening.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE2(`listen`, <span class="keyword">int</span>, fd, <span class="keyword">int</span>, backlog)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></span><br><span class="line"><span class="keyword">int</span> err, fput_needed;</span><br><span class="line"><span class="keyword">int</span> somaxconn; <span class="comment">//表示socket监听（listen）的backlog上限</span></span><br><span class="line"></span><br><span class="line">sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed); <span class="comment">//通过文件描述符fd查找套接字sock</span></span><br><span class="line"><span class="keyword">if</span> (sock) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   # cd /proc/sys/net/core</span></span><br><span class="line"><span class="comment"> *   # cat somaxconn         128</span></span><br><span class="line"><span class="comment"> *   这里默认时128，Hadoop集群时一般都会增大该值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">somaxconn = sock_net(sock-&gt;sk)-&gt;core.sysctl_somaxconn;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果backlog值大于somaxconn,backlog就为somaxconn,也就是最大值不能大于</span></span><br><span class="line"><span class="comment"> * somaxconn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span>)backlog &gt; somaxconn) </span><br><span class="line">backlog = somaxconn;</span><br><span class="line"></span><br><span class="line">err = security_socket_listen(sock, backlog);</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          *  调用对于的socket层的listen函数，如果是TCP的话，inet_listen，根据</span></span><br><span class="line"><span class="comment">          *  net/ipv4/af_inet.c文件中，const struct proto_ops inet_stream_ops = &#123;</span></span><br><span class="line"><span class="comment">          *                                .listen = inet_listen,&#125;;定义</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"><span class="keyword">if</span> (!err)</span><br><span class="line">err = `sock-&gt;ops-&gt;listen`(sock, backlog);</span><br><span class="line"></span><br><span class="line">fput_light(sock-&gt;file, fput_needed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、backlog"><a href="#2、backlog" class="headerlink" title="2、backlog"></a><strong>2、backlog</strong></h3><p>　　通过man listen对于backlog的解释</p><blockquote><p>　　The <u>backlog</u> argument defines the maximum length to which the queue of pending connections for <u>sockfd</u> may grow.  If a  connection  request  arrives　when the queue is full, the client may receive an error with an indication of <code>ECONNREFUSED</code> or, if the underlying protocol supports retransmission,　the request may be ignored so that a later reattempt at connection succeeds.<br>　　The  behavior of the <u>backlog</u> argument on TCP sockets changed with Linux 2.2.  Now it specifies the queue length for <u>completely</u> established sockets　waiting to be accepted, instead of the number of incomplete connection requests.  The maximum length of the queue for incomplete  sockets  can  be set  using  <u>/proc/sys/net/ipv4/tcp_max_syn_backlog</u>.   When  syncookies are enabled there is no logical maximum length and this setting is ignored.<br>　　See <code>tcp(7)</code> for more information.<br>　　If the <u>backlog</u> argument is greater than the value in <u>/proc/sys/net/core/somaxconn</u>, then it is silently truncated to that value; the default  value in this file is 128.  In kernels before 2.4.25, this limit was a hard coded value, SOMAXCONN, with the value 128.</p></blockquote><p>　　上面的解释的大体意思为：从Linux2.2内核版本开始，backlog的行为发生了改变，现在该参数指定了等待accepted的全连接队列的长度。而不是半连接的请求的队列长度。全连接需要在完成三次握手之后。<br>　　半连接最大长度可以使用/proc/sys/net/ipv4/tcp_max_syn_backlog进行设置。这个默认值为cat /proc/sys/net/ipv4/tcp_max_syn_backlog<br>　　1024<br>　　当syncookies被设置后，该参数被忽略掉。如果backlog值大于/proc/sys/net/core/somaxconn,它将被截断，默认值为128。也就是 当传参backlog的值 &gt;= somaxconn时，已完成连结队列的数量最多就是somaxconn</p><h3 id="3、inet-listen"><a href="#3、inet-listen" class="headerlink" title="3、inet_listen"></a><strong>3、inet_listen</strong></h3><p>　　该函数主要是做一些检查工作，例如当前连接的状态，sock的类型，最主要的处理在inet_csk_listen_start函数中。<br><code>inet_listen</code>函数    // net/ipv4/af_inet.c    line:194</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Move a socket into listening state.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_listen</span><span class="params">(struct socket *sock, <span class="keyword">int</span> backlog)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> old_state;</span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">lock_sock(sk);</span><br><span class="line"></span><br><span class="line">err = -EINVAL;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 检查sock的状态是否为SS_UNCONNECTED,sock的类型是否为SOCK_STREAM,</span></span><br><span class="line"><span class="comment"> *  只有SOCK_STREAM类型的sock才需要进行listen，建立socket后的初始状态为</span></span><br><span class="line"><span class="comment"> *  SS_UNCONNECTED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (sock-&gt;state != SS_UNCONNECTED || sock-&gt;type != SOCK_STREAM)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">old_state = sk-&gt;sk_state;  <span class="comment">// 获取sock的当前状态，后续要变成老状态</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  当前连接的状态需要CLOSED状态和LISTEN状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!((<span class="number">1</span> &lt;&lt; old_state) &amp; (TCPF_CLOSE | TCPF_LISTEN)))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Really, if the socket is already in listen state</span></span><br><span class="line"><span class="comment"> * we can only allow the backlog to be adjusted.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果现在状态不是监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (old_state != TCP_LISTEN) &#123;</span><br><span class="line">err = `inet_csk_listen_start`(sk, backlog); <span class="comment">//启用监听功能</span></span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果socket的状态已经处于监听状态，这里只是对backlog进行调整</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sk-&gt;sk_max_ack_backlog = backlog; </span><br><span class="line">err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">release_sock(sk);</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、inet-csk-listen-start函数"><a href="#4、inet-csk-listen-start函数" class="headerlink" title="4、inet_csk_listen_start函数"></a><strong>4、inet_csk_listen_start函数</strong></h3><p>　　该函数使TCP传输控制块进入监听状态，实现监听的过程是：为管理连接请求的散列表分配存储空间，接着使TCP的sock状态迁移到LISTEN状态，然后将sock加入到监听散列表中。<br><code>inet_csk_listen_start</code>函数  // net/ipv4/inet_connection_sock.c        line:645</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_csk_listen_start</span><span class="params">(struct sock *sk, <span class="keyword">const</span> <span class="keyword">int</span> nr_table_entries)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span> = <span class="title">inet_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock</span> *<span class="title">icsk</span> = <span class="title">inet_csk</span>(<span class="title">sk</span>);</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      *  初始化全连接队列</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">int</span> rc = `reqsk_queue_alloc`(&amp;icsk-&gt;icsk_accept_queue, nr_table_entries); </span><br><span class="line"><span class="keyword">if</span> (rc != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_max_ack_backlog = <span class="number">0</span>;  <span class="comment">// 最大的全连接队列</span></span><br><span class="line">sk-&gt;sk_ack_backlog = <span class="number">0</span>;   <span class="comment">// 当前的全连接队列</span></span><br><span class="line">inet_csk_delack_init(sk);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is race window here: we announce ourselves listening,</span></span><br><span class="line"><span class="comment"> * but this transition is still not validated by get_port().</span></span><br><span class="line"><span class="comment"> * It is OK, because this socket enters to hash table only</span></span><br><span class="line"><span class="comment"> * after validation is complete.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sk-&gt;sk_state = TCP_LISTEN;  <span class="comment">// 设置现在的状态为TCP_LISTEN状态</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 检查端口号是否可用，防止bind后修改</span></span><br><span class="line"><span class="comment"> *  struct proto tcp_prot = &#123;</span></span><br><span class="line"><span class="comment"> *        .unhash = inet_unhash,</span></span><br><span class="line"><span class="comment"> *        .get_port = inet_csk_get_port,&#125;</span></span><br><span class="line"><span class="comment"> *  调用get_port函数与bind时调用的是同一个函数如果正确返回为0，其中inet_num</span></span><br><span class="line"><span class="comment"> *  就是bind的端口，如果没有绑定端口就进行绑定端口操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!sk-&gt;sk_prot-&gt;get_port(sk, inet-&gt;inet_num)) &#123;</span><br><span class="line">inet-&gt;inet_sport = htons(inet-&gt;inet_num);</span><br><span class="line"></span><br><span class="line">sk_dst_reset(sk);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   把socket添加到监听HASH表中，strutc proto tcp_prot = &#123;</span></span><br><span class="line"><span class="comment"> *        .hash = inet_hash</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">`sk-&gt;sk_prot-&gt;hash`(sk); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sk-&gt;sk_state = TCP_CLOSE; <span class="comment">//如果端口不再可用，设置socket的状态为TCP_CLOSE,并销毁全连接队列</span></span><br><span class="line">__reqsk_queue_destroy(&amp;icsk-&gt;icsk_accept_queue);</span><br><span class="line"><span class="keyword">return</span> -EADDRINUSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1、reqsk-queue-alloc函数"><a href="#4-1、reqsk-queue-alloc函数" class="headerlink" title="4.1、reqsk_queue_alloc函数"></a><strong>4.1、reqsk_queue_alloc函数</strong></h4><p><code>reqsk_queue_aclloc</code>  // net/core/request_sock.c        line:37</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reqsk_queue_alloc</span><span class="params">(struct request_sock_queue *<span class="built_in">queue</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">unsigned</span> <span class="keyword">int</span> nr_table_entries)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> lopt_size = <span class="keyword">sizeof</span>(struct listen_sock);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listen_sock</span> *<span class="title">lopt</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  这里nr_table_entries 最大值传进来时128，sysctl_max_backlog值为256，所以</span></span><br><span class="line"><span class="comment"> *这里最小值不会小于8，最大值不会大于128，在[8,128]之间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">nr_table_entries = <span class="keyword">min_t</span>(u32, nr_table_entries, sysctl_max_syn_backlog);</span><br><span class="line">nr_table_entries = <span class="keyword">max_t</span>(u32, nr_table_entries, <span class="number">8</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 取一个最接近z^n的值赋给nr_table_entries</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">nr_table_entries = roundup_pow_of_two(nr_table_entries + <span class="number">1</span>);</span><br><span class="line">lopt_size += nr_table_entries * <span class="keyword">sizeof</span>(struct request_sock *); <span class="comment">//确定队列大小</span></span><br><span class="line"><span class="keyword">if</span> (lopt_size &gt; PAGE_SIZE)</span><br><span class="line">lopt = __vmalloc(lopt_size,</span><br><span class="line">GFP_KERNEL | __GFP_HIGHMEM | __GFP_ZERO,</span><br><span class="line">PAGE_KERNEL);<span class="comment">//如果申请得空间大于1页，则神奇虚拟地址空间连续</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">lopt = kzalloc(lopt_size, GFP_KERNEL);<span class="comment">//小于1页，在常规内存中分配内存</span></span><br><span class="line"><span class="keyword">if</span> (lopt == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * for循环计算nr_table_entries已2为底的对数，计算结果就存储在max_qlen_log成员中，</span></span><br><span class="line"><span class="comment"> * eg:如果nr_table_entries = 1024,max_qlen_log = 10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (lopt-&gt;max_qlen_log = <span class="number">3</span>; \</span><br><span class="line">(<span class="number">1</span> &lt;&lt; lopt-&gt;max_qlen_log) &lt; nr_table_entries; \</span><br><span class="line">lopt-&gt;max_qlen_log++);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*上面的代码实际上是确认了半连接队列的长度，这个值还受系统配置sysctl_max_syn_backlog的</span></span><br><span class="line"><span class="comment"> * 影响，所以如果想调大监听套接字的半连接队列，除了增大listen()的backlog参数外，还需要调整</span></span><br><span class="line"><span class="comment"> * sysctl_max_syn_backlog系统配置的值，proc文件为 /proc/sys/net/ipv4/tcp_max_syn_backlog</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">get_random_bytes(&amp;lopt-&gt;hash_rnd, <span class="keyword">sizeof</span>(lopt-&gt;hash_rnd));  <span class="comment">//得到一个随机数，用于HASH</span></span><br><span class="line">rwlock_init(&amp;<span class="built_in">queue</span>-&gt;syn_wait_lock);</span><br><span class="line"><span class="built_in">queue</span>-&gt;rskq_accept_head = <span class="literal">NULL</span>; <span class="comment">//全连接队列置为空</span></span><br><span class="line">lopt-&gt;nr_table_entries = nr_table_entries; <span class="comment">//半连接队列的最大长度</span></span><br><span class="line"></span><br><span class="line">write_lock_bh(&amp;<span class="built_in">queue</span>-&gt;syn_wait_lock);</span><br><span class="line"><span class="built_in">queue</span>-&gt;listen_opt = lopt; <span class="comment">//初始化半连接队列，其实就是icsk_accept_queue.listen_opt-&gt;syn_table</span></span><br><span class="line">write_unlock_bh(&amp;<span class="built_in">queue</span>-&gt;syn_wait_lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、inet-hash函数"><a href="#4-2、inet-hash函数" class="headerlink" title="4.2、inet_hash函数"></a><strong>4.2、inet_hash函数</strong></h4><p><code>inet_hash</code>函数  // net/ipv4/inet_hashtables.c         line:401</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_hash</span><span class="params">(struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sk-&gt;sk_state != TCP_CLOSE) &#123;</span><br><span class="line">local_bh_disable();</span><br><span class="line">`__inet_hash`(sk);</span><br><span class="line">local_bh_enable();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __inet_hash(struct sock *sk)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_hashinfo</span> *<span class="title">hashinfo</span> = <span class="title">sk</span>-&gt;<span class="title">sk_prot</span>-&gt;<span class="title">h</span>.<span class="title">hashinfo</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_listen_hashbucket</span> *<span class="title">ilb</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sk-&gt;sk_state != TCP_LISTEN) &#123; <span class="comment">// socket不处于监听状态</span></span><br><span class="line">__inet_hash_nolisten(sk, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WARN_ON(!sk_unhashed(sk));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据监听端口号，查找相对应的HASH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ilb = &amp;hashinfo-&gt;listening_hash[inet_sk_listen_hashfn(sk)];</span><br><span class="line"></span><br><span class="line">spin_lock(&amp;ilb-&gt;lock);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 把sock添加到监听HASH桶的头部，连接到sk-&gt;sk_nulls_node </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__sk_nulls_add_node_rcu(sk, &amp;ilb-&gt;head);</span><br><span class="line">sock_prot_inuse_add(sock_net(sk), sk-&gt;sk_prot, <span class="number">1</span>);</span><br><span class="line">spin_unlock(&amp;ilb-&gt;lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、监听listen代码流程图"><a href="#5、监听listen代码流程图" class="headerlink" title="5、监听listen代码流程图"></a><strong>5、监听listen代码流程图</strong></h3><div align="center"><p><img src="/img/note_0b/07.png" alt></p></div><ul><li>(1)listen初始化了半连接队列和全连接队列</li><li>(2)实现侦听，使TCP传输控制块的状态迁移到LISTEN状态，然后将传输控制块添加到侦听散列表中</li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序员书籍</title>
      <link href="/2018/05/29/%E6%9D%82%E8%AF%BB/03%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%A6%E5%8D%95/"/>
      <url>/2018/05/29/%E6%9D%82%E8%AF%BB/03%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%A6%E5%8D%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><span class="reprint">转</span></p><h2 id="程序员必读书籍"><a href="#程序员必读书籍" class="headerlink" title="程序员必读书籍"></a><strong><a href="http://www.ituring.com.cn/article/198286" target="_blank" rel="noopener">程序员必读书籍</a></strong></h2><h4 id="入门书籍"><a href="#入门书籍" class="headerlink" title="入门书籍"></a><strong>入门书籍</strong></h4><p><strong>程序设计：</strong></p><ul><li>01.基础理论：编码：隐匿在计算机软硬件背后的语言</li><li>02.编程语言：<ul><li>C：C和指针</li><li>C++：C++程序设计原理与实践</li><li>Java：Java核心技术（第9版）</li><li>C#：精通C#（第6版）</li><li>JavaScript：JavaScript DOM编程艺术（第2版）</li><li>Python：Python基础教程（第二版）</li></ul></li><li>03.编程语言理论：编程语言实现模式</li><li>04.程序设计：程序设计方法</li><li>05.算法与数据结构：算法（第4版）</li><li>06.程序调试：调试九法——软硬件错误的排查之道</li></ul><p><strong>软件开发：</strong></p><ul><li>01.编程实践：程序设计实践</li><li>02.面向对象程序设计：Head First设计模式</li><li>03.重构：重构</li><li>04.软件测试：How to Break Software</li><li>05.项目管理：极客与团队</li><li>06.专业开发：程序员修炼之道：从小工到专家</li><li>07.大师之言：奇思妙想：15位计算机天才及其重大发现</li><li>08.界面设计：写给大家看的设计书</li><li>09.交互设计：通用设计法则</li></ul><p><strong>个人成长：</strong></p><ul><li>01.职业规划：软件开发者路线图</li><li>02.思维方式：程序员的思维修炼：开发认知潜能的九堂课</li><li>03.求职面试：金领简历：敲开苹果微软谷歌的大门</li><li>04.英语写作：The Only Grammar Book You’ll Ever Need</li></ul><h4 id="必读书籍"><a href="#必读书籍" class="headerlink" title="必读书籍"></a><strong>必读书籍</strong></h4><p><strong>程序设计：</strong></p><ul><li>01.基础理论：深入理解计算机系统（第2版）</li><li>02.编程语言：<ul><li>C：C程序设计语言（第2版）</li><li>C++：C++程序设计语言（第4版）</li><li>Java：Effective Java（第2版）</li><li>C#：CLR via C#（第4版）</li><li>JavaScript：JavaScript语言精粹</li><li>Python：Python参考手册（第4版）</li></ul></li><li>03.编程语言理论：程序设计语言——实践之路（第3版）</li><li>04.程序设计：计算机程序的构造与解释（第2版）</li><li>05.算法与数据结构：编程珠玑（第2版）</li><li>06.程序调试：调试九法——软硬件错误的排查之道</li></ul><p><strong>软件开发：</strong></p><ul><li>01.编程实践：代码大全（第2版）</li><li>02.面向对象程序设计：设计模式</li><li>03.重构：修改代码的艺术</li><li>04.软件测试：xUnit Test Patterns</li><li>05.项目管理：人月神话</li><li>06.专业开发：程序员职业素养</li><li>07.大师之言：编程人生：15位软件先驱访谈录</li><li>08.界面设计：认知与设计：理解UI设计准则（第2版）</li><li>09.交互设计：交互设计精髓（第3版）</li></ul><p><strong>个人成长：</strong></p><ul><li>01.职业规划：软件开发者路线图</li><li>02.思维方式：如何把事情做到最好</li><li>03.求职面试：程序员面试金典（第5版）</li><li>04.英语写作：风格的要素</li></ul>]]></content>
      
      <categories>
          
          <category> 杂读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 技术书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu下json-c安装与使用</title>
      <link href="/2018/05/25/%E5%B7%A5%E5%85%B7/04Ubuntu%E4%B8%8Bjson-c%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/25/%E5%B7%A5%E5%85%B7/04Ubuntu%E4%B8%8Bjson-c%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Ubuntu下json-c安装与使用"><a href="#Ubuntu下json-c安装与使用" class="headerlink" title="Ubuntu下json-c安装与使用"></a>Ubuntu下json-c安装与使用</h2><h4 id="1、获取并编译json-c"><a href="#1、获取并编译json-c" class="headerlink" title="1、获取并编译json-c"></a>1、获取并编译json-c</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//获取源代码</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/json-c/json-c.git</span><br><span class="line"><span class="built_in">cd</span> json-c</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="2、使用json-c"><a href="#2、使用json-c" class="headerlink" title="2、使用json-c"></a>2、使用json-c</h4><p>通过<code>sudo make install</code>可以看出json-c的头文件和库所安装位置<br><img src="/img/tools_04/01.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看库路径和头文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 头文件所在路径</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/include/json-c</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 库所在路径</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="/img/tools_04/02.png" alt><br>一般使用中只需在代码中包含json.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.c</span></span><br><span class="line">....</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;json-c/json.h&gt;</span></span></span><br><span class="line">....</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>编译test.c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -ljson-c</span><br></pre></td></tr></table></figure><p>注：<code>-l</code> 代表库文件路径</p><h4 id="3、常见问题"><a href="#3、常见问题" class="headerlink" title="3、常见问题"></a>3、常见问题</h4><p>问题1：执行时出错”error while loading shared libraries: libjson-c.so.4: cannot open shared object file: No such file or directory”</p><p>修复方法：/etc/ld.so.conf中加入json库路径。可在<code>/etc/ld.so.conf</code>中加入该行<code>/usr/local/lib</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file /etc/ld.so.conf</span></span><br><span class="line"></span><br><span class="line">include /etc/ld.so.conf.d/*.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/bin          <span class="comment">#新增内容</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Luci配置界面开发框架</title>
      <link href="/2018/05/24/%E5%89%8D%E7%AB%AF/01Luci%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/05/24/%E5%89%8D%E7%AB%AF/01Luci%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Luci配置界面开发框架</p><p>MVC:</p><blockquote><p>Model(/usr/lib/lua/luci/model/cbi)<br>Controller(/usr/lib/lua/luci/controller)<br>View()</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/uhttpd -f -h /www -r LEDE -x /cgi-bin -u /ubus -t 60 -T 30 -k 20 -A 1 -n 3 -N 100 -R -p 0.0.0.0:80 -p [::]:80</span><br></pre></td></tr></table></figure><p>uhttpd是基于ubox ubus json-c的，如果加上ssl,还需要openssl库</p><h2 id="openwrt-libubox："><a href="#openwrt-libubox：" class="headerlink" title="openwrt libubox："></a>openwrt libubox：</h2><p>libubox是openwrt新版本中的一个基础库，在openwrt中有很多应用程序是基于libubox开发的。（如uhttpd, linubus）。</p><h3 id="libubox"><a href="#libubox" class="headerlink" title="libubox:"></a>libubox:</h3><blockquote><ul><li>提供一套基于事件驱动的机制  </li><li>提供多种开发支持接口。（如链表、kv聊表、平衡查找二叉树、md5、json）</li></ul></blockquote><p>使用libubox开发的好处有如下几点：</p><blockquote><ul><li>1、可以是程序基于事件驱动，从而可实现在单进程中处理多个任务</li><li>2、基于libubox提供的开发API可以加快开发进度的同时提高程序的稳定性</li><li>3、能更好的将程序融入openwrt的开发架构中，因为新的openwrt得很多应用和库都基于libubox开发的</li></ul></blockquote><h2 id="openwrt-ubus"><a href="#openwrt-ubus" class="headerlink" title="openwrt ubus"></a>openwrt ubus</h2><p>ubus是最新openwrt引入的一个消息总线，主要作用是实现不同应用程序之间的信息交互。<br>ubus启动后会在后台运行ubusd进程，该进程监听一个unix套接字用于与其他应用程序通信。其他应用程序可基于libubox提供的接口（或自己实现）与其通信。</p><p>使用ubus的方式主要有：  </p><blockquote><ul><li>1、向其注册消息或控制接口。  </li><li>2、向其调用其他应用程序的消息或控制接口。  </li><li>3、向其注册关心事件</li></ul></blockquote><p><a href="https://wiki.openwrt.org/zh-cn/doc/uci" target="_blank" rel="noopener">ubus (OpenWrt micro bus 架构)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/uhttpd -f -h /www -r LEDE -x /cgi-bin -u /ubus -t 60 -T 30 -k 20 -A 1 -n 3 -N 100 -R -p 0.0.0.0:80 -p [::]:80</span><br></pre></td></tr></table></figure><h2 id="1、Luci配置界面开发框架-Controller"><a href="#1、Luci配置界面开发框架-Controller" class="headerlink" title="1、Luci配置界面开发框架(Controller)"></a>1、Luci配置界面开发框架(Controller)</h2><p>Controller定义模块的入口</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module(<span class="string">"luci.controller.控制器名"</span>,<span class="built_in">package</span>.<span class="built_in">seeall</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line">        entry(路径,调用目标,_(<span class="string">"显示名称"</span>),显示顺序)</span><br><span class="line">        <span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>第一行说明了程序和模块的名称，eg:controller/目录下创建parentctrl.lua,那么久应该写成”luci.controller.parentctrl”。如果程序较多，可以分为好几个模块，那么可以在controller下再创建一个子目录，eg:controller/app/,那么就可以下城”luci.controller.app.parentctrl”。  </p></blockquote><blockquote><p>entry表示一个模块的入口，官方给出entry的定义如下：<br><code>entry(path, target, title=nil, order=nil)</code><br>path为访问路径，路径按字符串数组给定的，eg:{“admin”,”more_set”,”parentctrl”},那么在浏览器里访问“<a href="http://192.168.2.1/cgi-bin/luci/admin/more_set/parentctrl”" target="_blank" rel="noopener">http://192.168.2.1/cgi-bin/luci/admin/more_set/parentctrl”</a> 来访问该脚本。  </p><ul><li>第一种直接调用指定函数，比如直接重启路由器，eg:写成“<code>call(&quot;function_name&quot;)</code>”，然后又在Lua文件中编写名为function_name的函数就可以调用了。</li><li>第二种可以访问指定页面，eg:“<code>template(&quot;pc/parentctrl&quot;)</code>”就可以调用/usr/lib/lua/luci/view/pc/parentctrl.html。</li><li>配置界面，第三种方法无非最方便的，eg:“<code>cbi(&quot;app/parentctrl&quot;)</code>”就可以调用/usr/lib/lua/luci/model/cbi/app/parentctrl.lua。</li></ul></blockquote><p>eg:创建/usr/lib/lua/luci/controller/njitclient.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module(<span class="string">"luci.controller.njitclient"</span>,<span class="built_in">package</span>.<span class="built_in">seeall</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line">    entry(&#123;<span class="string">"admin"</span>, <span class="string">"network"</span>, <span class="string">"njitclient"</span>&#125;, cbi(<span class="string">"njitclient"</span>) , _(<span class="string">"NJITClient"</span>), <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="2、用Lua和UCI接口开发LuCI配置模块-Model"><a href="#2、用Lua和UCI接口开发LuCI配置模块-Model" class="headerlink" title="2、用Lua和UCI接口开发LuCI配置模块(Model)"></a>2、用Lua和UCI接口开发LuCI配置模块(Model)</h2><p>功能描述：希望将用户名、密码等信息存储在路由器文件中，同时路由器开机时能根据设定的配置自动运行njitclient,同时希望动态的禁止和启用njitclient等等。所有最好的方式使用<code>CBI Module</code>,创建model文件，/usr/lib/lua/luci/model/cbi/njitclient.lua</p><p>开发LuCI的配置模块的有很多方式，比较基本的可以用SimpleForm，就跟开发普通的Web应用类似，当然最方便的还是使用UCI（Unified Configuration Interface,统一配置接口）的方式，因为使用UCI接口可以使得在LuCI中无需考虑配置文件如何存储和读取(这种方式也会自动创建“保存&amp;应用”、“保存”以及“复位”三个按钮)。同时在Bash文件中也可以非常方便的存储和读取。</p><h2 id="对于UCI方式"><a href="#对于UCI方式" class="headerlink" title="对于UCI方式"></a>对于UCI方式</h2><p>(1)、创建配置文件，存储于/etc/config。eg:<code>/etc/config/njitclient</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config login</span><br><span class="line">    option username <span class="string">''</span></span><br><span class="line">    option password <span class="string">''</span></span><br><span class="line">    option ifname <span class="string">'eth0'</span></span><br><span class="line">    option domain <span class="string">''</span></span><br></pre></td></tr></table></figure><p>配置文件的编写参见<a href="https://wiki.openwrt.org/zh-cn/doc/uci" target="_blank" rel="noopener">UCI系统文档</a></p><p>(2)、然后在CBI Module的lua文件中首先需要映射与存储文件的关系<br>eg:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = Map(njitclient,<span class="string">"NJIT Client"</span>, Configure NJIT <span class="number">802.11</span>x client.<span class="string">")</span></span><br></pre></td></tr></table></figure><p>m = Map(“配置文件名”,”配置页面标题”,”配置页面说明”)</p><blockquote><p>第一个参数即为配置文件存储的文件名，不包含路径。<br>第二个参数和第三个参数用于页面显示。</p></blockquote><div align="center"><img src="/img/web_01/01.png"></div><p>(3)、创建与配置文件中对应的<code>Section</code>，Section分两种，<code>NamedSection</code>和<code>TypedSection</code>前者根据配置文件中的Section名，后者根据配置文件中的Section类型。这里使用后者。代码如下，同时设置不允许增加或删除Section(“.addremove=false”),以及不显示Section名称(“.anonymous=true”)。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = m:section(TypedSection, <span class="string">"login"</span>, <span class="string">""</span>)</span><br><span class="line">s.addremove = <span class="literal">false</span></span><br><span class="line">s.anonymous = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>(4)、接下来创建Section中不同内容的交互（创建Option），常见的比如有Value(文本框)、ListValue(下拉框)、Flag(选择框)等等。详见官方参考文档<a href="http://luci.subsignal.org/trac/wiki/Documentation/CBI" target="_blank" rel="noopener">CBI</a></p><p>创建Option的过程非常简单，创建后无需考虑读写配置问题，系统都会自动处理，但是根据上述的要求，我们在应用配置后希望启用、晋中或重启njitclient，所有我们需要在页面最后判断用户是否点击“应用”按钮，以及点击后的动作。  </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> apply = luci.http.formvlaue(<span class="string">"cbi.apply"</span>)</span><br><span class="line"><span class="keyword">if</span> apply <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--[[</span></span><br><span class="line"><span class="comment">        需要处理的代码</span></span><br><span class="line"><span class="comment">    ]]</span><span class="comment">--</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>model文件完整代码njitclient.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"luci.sys"</span>)</span><br><span class="line"></span><br><span class="line">m = Map(<span class="string">"njitclient"</span>, translate(<span class="string">"NJIT Client"</span>), translate(<span class="string">"Configure NJIT 802.11x Client"</span>))</span><br><span class="line"></span><br><span class="line">s = m:section(TypedSection, <span class="string">"login"</span>, <span class="string">""</span>)</span><br><span class="line">s.addremove = <span class="literal">false</span></span><br><span class="line">s.anonymous = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">enable = s:option(Flag,<span class="string">"enable"</span>, translate(<span class="string">"Enable"</span>))</span><br><span class="line">name = s:option(Value, <span class="string">"username"</span>, translate(<span class="string">"Username"</span>))</span><br><span class="line">pass = s:option(Value, <span class="string">"password"</span>, translate(<span class="string">"Password"</span>))</span><br><span class="line">pass.password = <span class="literal">true</span></span><br><span class="line">domain = s:option(Value, <span class="string">"domain"</span>, translate(<span class="string">"Domain"</span>))</span><br><span class="line"></span><br><span class="line">ifname = s:option(ListValue, <span class="string">"ifname"</span>, translate(<span class="string">"Interface"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(luci.sys.net.devices()) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> v ~= <span class="string">"lo"</span> <span class="keyword">then</span></span><br><span class="line">        ifname:value(v)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> apply = luci.http.formvalue(<span class="string">"cbi.apply"</span>)</span><br><span class="line"><span class="keyword">if</span> apply the</span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">popen</span>(<span class="string">"/etc/init.d/njitclient restart"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> m</span><br></pre></td></tr></table></figure><p>其中Luci全部库类的函数定义和使用说明，可以参考<a href="http://luci.subsignal.org/api/luci/index.html" target="_blank" rel="noopener">Luci API</a></p><h2 id="3、Bash文件中调用UCI接口"><a href="#3、Bash文件中调用UCI接口" class="headerlink" title="3、Bash文件中调用UCI接口"></a>3、Bash文件中调用UCI接口</h2><p>接下来编写njitclient脚本，使得程序最终运行起来。关于UCI接口的脚本文档中官方参考资料<a href="https://wiki.openwrt.org/doc/devel/config-scripting" target="_blank" rel="noopener">Configuration in scripts</a></p><p>(1)、使用UCI调用脚本，第一步需要读取配置文件，命令为“<code>config_load 配置文件名</code>”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config_load njitclient</span><br></pre></td></tr></table></figure><p>(2)、接下来遍历配置中的Section，可以使用“<code>config_foreach 遍历函数名为Section类型</code>”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config_foreach run_njit login</span><br></pre></td></tr></table></figure><p>(3)、编写名为<code>run_njit</code>函数，在这个函数中，可以使用“<code>config_get 变量名 Section名 Section参数名</code>”获取变量的值，或者使用“<code>config_get_bool变量名 Section名 Section参数名</code>”获取布尔的值。</p><p>njitclient完整脚本如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh /etc/rc.common</span><br><span class="line">START=<span class="number">50</span></span><br><span class="line">run_njit()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">local</span> enable</span><br><span class="line">    config_get bool enable $<span class="number">1</span> enable</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [$enable]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> username</span><br><span class="line">        <span class="keyword">local</span> password</span><br><span class="line">        <span class="keyword">local</span> domain</span><br><span class="line">        <span class="keyword">local</span> ifname</span><br><span class="line"></span><br><span class="line">        config_get username $<span class="number">1</span> username</span><br><span class="line">        config_get password $<span class="number">1</span> password</span><br><span class="line">        config_get domain $<span class="number">1</span> domain</span><br><span class="line">        config_get ifname $<span class="number">1</span> ifname</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"$domain"</span> !=<span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">            njit-client $username@$domain $password $ifname &amp;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            njit-client $username $password $ifname &amp;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        echo <span class="string">"NJIT Client hase started."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start()</span><br><span class="line">&#123;</span><br><span class="line">    config_load njitclient</span><br><span class="line">    config_foreach run_njit login</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">stop()</span><br><span class="line">&#123;</span><br><span class="line">    killall njit-client</span><br><span class="line">    killall udhcpc</span><br><span class="line"></span><br><span class="line">    echo <span class="string">"NJIT Client has stoped."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>openwrt uhttpd交互流程<br>docroot 为/www   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@LEDE:/www<span class="meta"># ls -l</span></span><br><span class="line">drwxrwxr-x    <span class="number">2</span> root     root            <span class="number">27</span> Aug <span class="number">12</span> <span class="number">00</span>:<span class="number">12</span> cgi-bin</span><br><span class="line">-rw-rw-r--    <span class="number">1</span> root     root           <span class="number">495</span> Aug <span class="number">12</span> <span class="number">00</span>:<span class="number">12</span> index.html</span><br><span class="line">drwxrwxr-x    <span class="number">4</span> root     root            <span class="number">49</span> Aug <span class="number">12</span> <span class="number">00</span>:<span class="number">12</span> luci-<span class="keyword">static</span></span><br></pre></td></tr></table></figure><p>(1)、默认index.html,该文件内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0; URL=/cgi-bin/luci"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-color: white"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: black; font-family: arial, helvetica, sans-serif;"</span> <span class="attr">href</span>=<span class="string">"/cgi-bin/luci"</span>&gt;</span>LuCI - Lua Configuration Interface<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认跳转/cgi-bin/luci，注：luci该文件相对于docroot而言的路径，即相对于/www。<br>(2)、则实际路径为/www/cgi-bin/luci。该文件内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/lua  <span class="comment">--执行命令的路径</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">"luci.cacheloader"</span>   <span class="comment">--导入cacheloader包</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">"luci.sgi.cgi"</span>       <span class="comment">--导入sgi.sgi包</span></span><br><span class="line">luci.dispatcher.indexcache = <span class="string">"/tmp/luci-indexcache"</span> <span class="comment">--cache缓存路径地址</span></span><br><span class="line">luci.sgi.cgi.run()  <span class="comment">--执行run方法，此方法于/usr/lib/lua/luci/sgi/cgi.lua</span></span><br></pre></td></tr></table></figure><p>(3)、cgi.lua文件内容 /usr/lib/lua/luci/sgi/cgi.lua<br><a href="#cgi">cgi.lua文件完整内容</a></p><p>代码解释：  </p><blockquote><p>首先执行的是run()函数:</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> r = luci.http.Request(...)   <span class="comment">--把Web请求放于r中，（包括环境变量，web请求，出错处理接口）</span></span><br></pre></td></tr></table></figure><blockquote><p>create出另一个执行体<code>httpdispatch</code>,每次httpdispatch执行yield返回一些数据时，run()函数读取这些数据，做相应处理，然后再次执行resume(httpdispatch),…如此直到httpdispatch执行完毕。</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> x = coroutine.<span class="built_in">create</span>(luci.dispatcher.httpdispatch)  <span class="comment">--创建一个协同程序</span></span><br><span class="line"><span class="keyword">local</span> res, id, data1, data2 = coroutine.<span class="built_in">resume</span>(x, r) <span class="comment">--运行创建的协同进程，即运行httpdispatch，参数为上面的local r变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> id == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"Status: "</span> .. <span class="built_in">tostring</span>(data1) .. <span class="string">" "</span> .. data2 .. <span class="string">"\r\n"</span>)</span><br><span class="line"><span class="keyword">elseif</span> id == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">    hcache = hcache .. data1 .. <span class="string">": "</span> .. data2 .. <span class="string">"\r\n"</span>  <span class="comment">--准备header</span></span><br><span class="line"><span class="keyword">elseif</span> id == <span class="number">3</span> <span class="keyword">then</span>    <span class="comment">--写header 、blank</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(hcache)   <span class="comment">--默认到stdout</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"\r\n"</span>)</span><br><span class="line"><span class="keyword">elseif</span> id == <span class="number">4</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">tostring</span>(data1 <span class="keyword">or</span> <span class="string">""</span>))  <span class="comment">--写入body</span></span><br><span class="line"><span class="keyword">elseif</span> id == <span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">flush</span>()</span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">close</span>()</span><br><span class="line">    active = <span class="literal">false</span></span><br><span class="line"><span class="keyword">elseif</span> id == <span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">    data1:copyz(nixio.<span class="built_in">stdout</span>, data2)</span><br><span class="line">    data1:<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>(4)、httpdispatch函数 /usr/lib/lua/luci/dispatcher.lua<br><a href="#dispatcher">dispatcher.lua文件完整代码</a>.</p><p>代码说明：整个代码主要关注一下函数</p><blockquote><p>1、httpdispatch函数   </p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpdispatch</span><span class="params">(request, prefix)</span></span></span><br><span class="line">    http.context.request = request</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> r = &#123;&#125;</span><br><span class="line">    context.request = r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> pathinfo = http.urldecode(request:<span class="built_in">getenv</span>(<span class="string">"PATH_INFO"</span>) <span class="keyword">or</span> <span class="string">""</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> prefix <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> _, node <span class="keyword">in</span> <span class="built_in">ipairs</span>(prefix) <span class="keyword">do</span></span><br><span class="line">            r[#r+<span class="number">1</span>] = node</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> pathinfo:<span class="built_in">gmatch</span>(<span class="string">"[^/]+"</span>) <span class="keyword">do</span></span><br><span class="line">        r[#r+<span class="number">1</span>] = node</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> stat, err = util.coxpcall(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        dispatch(context.request)</span><br><span class="line">    <span class="keyword">end</span>, error500)</span><br><span class="line"></span><br><span class="line">    http.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">--context._disable_memtrace()</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>2、dispatch函数，</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(request)</span></span></span><br><span class="line">    <span class="comment">--context._disable_memtrace = require "luci.debug".trap_memtrace("l")</span></span><br><span class="line">    <span class="keyword">local</span> ctx = context</span><br><span class="line">    ctx.<span class="built_in">path</span> = request</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> conf = <span class="built_in">require</span> <span class="string">"luci.config"</span></span><br><span class="line">    <span class="built_in">assert</span>(conf.main,</span><br><span class="line">        <span class="string">"/etc/config/luci seems to be corrupt, unable to find section 'main'"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> i18n = <span class="built_in">require</span> <span class="string">"luci.i18n"</span></span><br><span class="line">    <span class="keyword">local</span> lang = conf.main.lang <span class="keyword">or</span> <span class="string">"auto"</span></span><br><span class="line">    <span class="keyword">if</span> lang == <span class="string">"auto"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> aclang = http.<span class="built_in">getenv</span>(<span class="string">"HTTP_ACCEPT_LANGUAGE"</span>) <span class="keyword">or</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> lpat <span class="keyword">in</span> aclang:<span class="built_in">gmatch</span>(<span class="string">"[%w-]+"</span>) <span class="keyword">do</span></span><br><span class="line">            lpat = lpat <span class="keyword">and</span> lpat:<span class="built_in">gsub</span>(<span class="string">"-"</span>, <span class="string">"_"</span>)</span><br><span class="line">            <span class="keyword">if</span> conf.languages[lpat] <span class="keyword">then</span></span><br><span class="line">                lang = lpat</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> lang == <span class="string">"auto"</span> <span class="keyword">then</span></span><br><span class="line">        lang = i18n.default</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i18n.setlanguage(lang)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> c = ctx.tree</span><br><span class="line">    <span class="keyword">local</span> stat</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">then</span></span><br><span class="line">        c = createtree()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> track = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> args = &#123;&#125;</span><br><span class="line">    ctx.args = args</span><br><span class="line">    ctx.requestargs = ctx.requestargs <span class="keyword">or</span> args</span><br><span class="line">    <span class="keyword">local</span> n</span><br><span class="line">    <span class="keyword">local</span> preq = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> freq = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">ipairs</span>(request) <span class="keyword">do</span></span><br><span class="line">        preq[#preq+<span class="number">1</span>] = s</span><br><span class="line">        freq[#freq+<span class="number">1</span>] = s</span><br><span class="line">        c = c.nodes[s]</span><br><span class="line">        n = i</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        util.update(track, c)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> c.leaf <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> c.leaf <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> j=n+<span class="number">1</span>, #request <span class="keyword">do</span></span><br><span class="line">            args[#args+<span class="number">1</span>] = request[j]</span><br><span class="line">            freq[#freq+<span class="number">1</span>] = request[j]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ctx.requestpath = ctx.requestpath <span class="keyword">or</span> freq</span><br><span class="line">    ctx.<span class="built_in">path</span> = preq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> track.i18n <span class="keyword">then</span></span><br><span class="line">        i18n.loadc(track.i18n)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Init template engine</span></span><br><span class="line">    <span class="keyword">if</span> (c <span class="keyword">and</span> c.index) <span class="keyword">or</span> <span class="keyword">not</span> track.notemplate <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> tpl = <span class="built_in">require</span>(<span class="string">"luci.template"</span>)</span><br><span class="line">        <span class="keyword">local</span> media = track.mediaurlbase <span class="keyword">or</span> luci.<span class="built_in">config</span>.main.mediaurlbase</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">pcall</span>(tpl.Template, <span class="string">"themes/%s/header"</span> % fs.basename(media)) <span class="keyword">then</span></span><br><span class="line">            media = <span class="literal">nil</span></span><br><span class="line">            <span class="keyword">for</span> name, theme <span class="keyword">in</span> <span class="built_in">pairs</span>(luci.<span class="built_in">config</span>.themes) <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> name:<span class="built_in">sub</span>(<span class="number">1</span>,<span class="number">1</span>) ~= <span class="string">"."</span> <span class="keyword">and</span> <span class="built_in">pcall</span>(tpl.Template,</span><br><span class="line">                 <span class="string">"themes/%s/header"</span> % fs.basename(theme)) <span class="keyword">then</span></span><br><span class="line">                    media = theme</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="built_in">assert</span>(media, <span class="string">"No valid theme found"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _ifattr<span class="params">(cond, key, val)</span></span></span><br><span class="line">            <span class="keyword">if</span> cond <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">local</span> env = <span class="built_in">getfenv</span>(<span class="number">3</span>)</span><br><span class="line">                <span class="keyword">local</span> scope = (<span class="built_in">type</span>(env.self) == <span class="string">"table"</span>) <span class="keyword">and</span> env.self</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(val) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">next</span>(val) <span class="keyword">then</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        val = util.serialize_json(val)</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(</span><br><span class="line">                    <span class="string">' %s="%s"'</span>, <span class="built_in">tostring</span>(key),</span><br><span class="line">                    util.pcdata(<span class="built_in">tostring</span>( val</span><br><span class="line">                     <span class="keyword">or</span> (<span class="built_in">type</span>(env[key]) ~= <span class="string">"function"</span> <span class="keyword">and</span> env[key])</span><br><span class="line">                     <span class="keyword">or</span> (scope <span class="keyword">and</span> <span class="built_in">type</span>(scope[key]) ~= <span class="string">"function"</span> <span class="keyword">and</span> scope[key])</span><br><span class="line">                     <span class="keyword">or</span> <span class="string">""</span> ))</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        tpl.context.viewns = <span class="built_in">setmetatable</span>(&#123;</span><br><span class="line">           <span class="built_in">write</span>       = http.<span class="built_in">write</span>;</span><br><span class="line">           include     = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span> tpl.Template(name):render(<span class="built_in">getfenv</span>(<span class="number">2</span>)) <span class="keyword">end</span>;</span><br><span class="line">           translate   = i18n.translate;</span><br><span class="line">           translatef  = i18n.translatef;</span><br><span class="line">           export      = <span class="function"><span class="keyword">function</span><span class="params">(k, v)</span></span> <span class="keyword">if</span> tpl.context.viewns[k] == <span class="literal">nil</span> <span class="keyword">then</span> tpl.context.viewns[k] = v <span class="keyword">end</span> <span class="keyword">end</span>;</span><br><span class="line">           striptags   = util.striptags;</span><br><span class="line">           pcdata      = util.pcdata;</span><br><span class="line">           media       = media;</span><br><span class="line">           theme       = fs.basename(media);</span><br><span class="line">           resource    = luci.<span class="built_in">config</span>.main.resourcebase;</span><br><span class="line">           ifattr      = <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span> <span class="keyword">return</span> _ifattr(...) <span class="keyword">end</span>;</span><br><span class="line">           attr        = <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span> <span class="keyword">return</span> _ifattr(<span class="literal">true</span>, ...) <span class="keyword">end</span>;</span><br><span class="line">           url         = build_url;</span><br><span class="line">        &#125;, &#123;<span class="built_in">__index</span>=<span class="function"><span class="keyword">function</span><span class="params">(table, key)</span></span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="string">"controller"</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> build_url()</span><br><span class="line">            <span class="keyword">elseif</span> key == <span class="string">"REQUEST_URI"</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> build_url(<span class="built_in">unpack</span>(ctx.requestpath))</span><br><span class="line">            <span class="keyword">elseif</span> key == <span class="string">"token"</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> ctx.authtoken</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">rawget</span>(<span class="built_in">table</span>, key) <span class="keyword">or</span> <span class="built_in">_G</span>[key]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span>&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    track.dependent = (track.dependent ~= <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">assert</span>(<span class="keyword">not</span> track.dependent <span class="keyword">or</span> <span class="keyword">not</span> track.auto,</span><br><span class="line">        <span class="string">"Access Violation\nThe page at '"</span> .. <span class="built_in">table</span>.<span class="built_in">concat</span>(request, <span class="string">"/"</span>) .. <span class="string">"/' "</span> ..</span><br><span class="line">        <span class="string">"has no parent node so the access to this location has been denied.\n"</span> ..</span><br><span class="line">        <span class="string">"This is a software bug, please report this message at "</span> ..</span><br><span class="line">        <span class="string">"https://github.com/openwrt/luci/issues"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> track.sysauth <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> authen = track.sysauth_authenticator</span><br><span class="line">        <span class="keyword">local</span> _, sid, sdat, default_user, allowed_users</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(authen) == <span class="string">"string"</span> <span class="keyword">and</span> authen ~= <span class="string">"htmlauth"</span> <span class="keyword">then</span></span><br><span class="line">            error500(<span class="string">"Unsupported authenticator %q configured"</span> % authen)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(track.sysauth) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">            default_user, allowed_users = <span class="literal">nil</span>, track.sysauth</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            default_user, allowed_users = track.sysauth, &#123; track.sysauth &#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(authen) == <span class="string">"function"</span> <span class="keyword">then</span></span><br><span class="line">            _, sid = authen(sys.user.checkpasswd, allowed_users)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sid = http.getcookie(<span class="string">"sysauth"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        sid, sdat = session_retrieve(sid, allowed_users)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (sid <span class="keyword">and</span> sdat) <span class="keyword">and</span> authen == <span class="string">"htmlauth"</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> user = http.<span class="built_in">getenv</span>(<span class="string">"HTTP_AUTH_USER"</span>)</span><br><span class="line">            <span class="keyword">local</span> pass = http.<span class="built_in">getenv</span>(<span class="string">"HTTP_AUTH_PASS"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user == <span class="literal">nil</span> <span class="keyword">and</span> pass == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">                user = http.formvalue(<span class="string">"luci_username"</span>)</span><br><span class="line">                pass = http.formvalue(<span class="string">"luci_password"</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            sid, sdat = session_setup(user, pass, allowed_users)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> sid <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">local</span> tmpl = <span class="built_in">require</span> <span class="string">"luci.template"</span></span><br><span class="line"></span><br><span class="line">                context.<span class="built_in">path</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">                http.<span class="built_in">status</span>(<span class="number">403</span>, <span class="string">"Forbidden"</span>)</span><br><span class="line">                tmpl.render(track.sysauth_template <span class="keyword">or</span> <span class="string">"sysauth"</span>, &#123;</span><br><span class="line">                    duser = default_user,</span><br><span class="line">                    fuser = user</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            http.header(<span class="string">"Set-Cookie"</span>, <span class="string">'sysauth=%s; path=%s'</span> %&#123; sid, build_url() &#125;)</span><br><span class="line">            http.redirect(build_url(<span class="built_in">unpack</span>(ctx.requestpath)))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sid <span class="keyword">or</span> <span class="keyword">not</span> sdat <span class="keyword">then</span></span><br><span class="line">            http.<span class="built_in">status</span>(<span class="number">403</span>, <span class="string">"Forbidden"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        ctx.authsession = sid</span><br><span class="line">        ctx.authtoken = sdat.token</span><br><span class="line">        ctx.authuser = sdat.username</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> require_post_security(c.target) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> test_post_security(c) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> track.setgroup <span class="keyword">then</span></span><br><span class="line">        sys.process.setgroup(track.setgroup)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> track.setuser <span class="keyword">then</span></span><br><span class="line">        sys.process.setuser(track.setuser)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> target = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(c.target) == <span class="string">"function"</span> <span class="keyword">then</span></span><br><span class="line">            target = c.target</span><br><span class="line">        <span class="keyword">elseif</span> <span class="built_in">type</span>(c.target) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">            target = c.target.target</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> (c.index <span class="keyword">or</span> <span class="built_in">type</span>(target) == <span class="string">"function"</span>) <span class="keyword">then</span></span><br><span class="line">        ctx.dispatched = c</span><br><span class="line">        ctx.requested = ctx.requested <span class="keyword">or</span> ctx.dispatched</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> c.index <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> tpl = <span class="built_in">require</span> <span class="string">"luci.template"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> util.copcall(tpl.render, <span class="string">"indexer"</span>, &#123;&#125;) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(target) == <span class="string">"function"</span> <span class="keyword">then</span></span><br><span class="line">        util.copcall(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="keyword">local</span> oldenv = <span class="built_in">getfenv</span>(target)</span><br><span class="line">            <span class="keyword">local</span> module = <span class="built_in">require</span>(c.module)</span><br><span class="line">            <span class="keyword">local</span> env = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__index</span>=</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span><span class="params">(tbl, key)</span></span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">rawget</span>(tbl, key) <span class="keyword">or</span> module[key] <span class="keyword">or</span> oldenv[key]</span><br><span class="line">            <span class="keyword">end</span>&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">setfenv</span>(target, env)</span><br><span class="line">        <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> ok, err</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(c.target) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">            ok, err = util.copcall(target, c.target, <span class="built_in">unpack</span>(args))</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ok, err = util.copcall(target, <span class="built_in">unpack</span>(args))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">assert</span>(ok,</span><br><span class="line">               <span class="string">"Failed to execute "</span> .. (<span class="built_in">type</span>(c.target) == <span class="string">"function"</span> <span class="keyword">and</span> <span class="string">"function"</span> <span class="keyword">or</span> c.target.<span class="built_in">type</span> <span class="keyword">or</span> <span class="string">"unknown"</span>) ..</span><br><span class="line">               <span class="string">" dispatcher target for entry '/"</span> .. <span class="built_in">table</span>.<span class="built_in">concat</span>(request, <span class="string">"/"</span>) .. <span class="string">"'.\n"</span> ..</span><br><span class="line">               <span class="string">"The called action terminated with an exception:\n"</span> .. <span class="built_in">tostring</span>(err <span class="keyword">or</span> <span class="string">"(unknown)"</span>))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">local</span> root = node()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> <span class="keyword">not</span> root.target <span class="keyword">then</span></span><br><span class="line">            error404(<span class="string">"No root node was registered, this usually happens if no module was installed.\n"</span> ..</span><br><span class="line">                     <span class="string">"Install luci-mod-admin-full and retry. "</span> ..</span><br><span class="line">                     <span class="string">"If the module is already installed, try removing the /tmp/luci-indexcache file."</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            error404(<span class="string">"No page is registered at '/"</span> .. <span class="built_in">table</span>.<span class="built_in">concat</span>(request, <span class="string">"/"</span>) .. <span class="string">"'.\n"</span> ..</span><br><span class="line">                     <span class="string">"If this url belongs to an extension, make sure it is properly installed.\n"</span> ..</span><br><span class="line">                     <span class="string">"If the extension was recently installed, try removing the /tmp/luci-indexcache file."</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"cgi"</span>&gt;cgi.lua完整代码如下：&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">```lua</span><br><span class="line"><span class="comment">-- Copyright 2008 Steven Barth &lt;steven@midlink.org&gt;</span></span><br><span class="line"><span class="comment">-- Licensed to the public under the Apache License 2.0.</span></span><br><span class="line"></span><br><span class="line">exectime = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line">module(<span class="string">"luci.sgi.cgi"</span>, <span class="built_in">package</span>.<span class="built_in">seeall</span>)</span><br><span class="line"><span class="keyword">local</span> ltn12 = <span class="built_in">require</span>(<span class="string">"luci.ltn12"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"nixio.util"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"luci.http"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"luci.sys"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"luci.dispatcher"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Limited source to avoid endless blocking</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">limitsource</span><span class="params">(handle, limit)</span></span></span><br><span class="line">    limit = limit <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> BLOCKSIZE = ltn12.BLOCKSIZE</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">if</span> limit &lt; <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">            handle:<span class="built_in">close</span>()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">local</span> <span class="built_in">read</span> = (limit &gt; BLOCKSIZE) <span class="keyword">and</span> BLOCKSIZE <span class="keyword">or</span> limit</span><br><span class="line">            limit = limit - <span class="built_in">read</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">local</span> chunk = handle:<span class="built_in">read</span>(<span class="built_in">read</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> chunk <span class="keyword">then</span> handle:<span class="built_in">close</span>() <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">return</span> chunk</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> r = luci.http.Request(</span><br><span class="line">        luci.sys.<span class="built_in">getenv</span>(),</span><br><span class="line">        limitsource(<span class="built_in">io</span>.<span class="built_in">stdin</span>, <span class="built_in">tonumber</span>(luci.sys.<span class="built_in">getenv</span>(<span class="string">"CONTENT_LENGTH"</span>))),</span><br><span class="line">        ltn12.sink.file(<span class="built_in">io</span>.<span class="built_in">stderr</span>)</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">local</span> x = coroutine.<span class="built_in">create</span>(luci.dispatcher.httpdispatch)</span><br><span class="line">    <span class="keyword">local</span> hcache = <span class="string">""</span></span><br><span class="line">    <span class="keyword">local</span> active = <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> coroutine.<span class="built_in">status</span>(x) ~= <span class="string">"dead"</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> res, id, data1, data2 = coroutine.<span class="built_in">resume</span>(x, r)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Status: 500 Internal Server Error"</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Content-Type: text/plain\n"</span>)</span><br><span class="line">            <span class="built_in">print</span>(id)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> active <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> id == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"Status: "</span> .. <span class="built_in">tostring</span>(data1) .. <span class="string">" "</span> .. data2 .. <span class="string">"\r\n"</span>)</span><br><span class="line">            <span class="keyword">elseif</span> id == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">                hcache = hcache .. data1 .. <span class="string">": "</span> .. data2 .. <span class="string">"\r\n"</span></span><br><span class="line">            <span class="keyword">elseif</span> id == <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">io</span>.<span class="built_in">write</span>(hcache)</span><br><span class="line">                <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"\r\n"</span>)</span><br><span class="line">            <span class="keyword">elseif</span> id == <span class="number">4</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">tostring</span>(data1 <span class="keyword">or</span> <span class="string">""</span>))</span><br><span class="line">            <span class="keyword">elseif</span> id == <span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">io</span>.<span class="built_in">flush</span>()</span><br><span class="line">                <span class="built_in">io</span>.<span class="built_in">close</span>()</span><br><span class="line">                active = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">elseif</span> id == <span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">                data1:copyz(nixio.<span class="built_in">stdout</span>, data2)</span><br><span class="line">                data1:<span class="built_in">close</span>()</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><div id="dispatcher">dispatcher.lua完整代码如下：</div><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Copyright 2008 Steven Barth &lt;steven@midlink.org&gt;</span></span><br><span class="line"><span class="comment">-- Copyright 2008-2015 Jo-Philipp Wich &lt;jow@openwrt.org&gt;</span></span><br><span class="line"><span class="comment">-- Licensed to the public under the Apache License 2.0.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> fs = <span class="built_in">require</span> <span class="string">"nixio.fs"</span></span><br><span class="line"><span class="keyword">local</span> sys = <span class="built_in">require</span> <span class="string">"luci.sys"</span></span><br><span class="line"><span class="keyword">local</span> util = <span class="built_in">require</span> <span class="string">"luci.util"</span></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span> <span class="string">"luci.http"</span></span><br><span class="line"><span class="keyword">local</span> nixio = <span class="built_in">require</span> <span class="string">"nixio"</span>, <span class="built_in">require</span> <span class="string">"nixio.util"</span></span><br><span class="line"></span><br><span class="line">module(<span class="string">"luci.dispatcher"</span>, <span class="built_in">package</span>.<span class="built_in">seeall</span>)</span><br><span class="line">context = util.threadlocal()</span><br><span class="line">uci = <span class="built_in">require</span> <span class="string">"luci.model.uci"</span></span><br><span class="line">i18n = <span class="built_in">require</span> <span class="string">"luci.i18n"</span></span><br><span class="line">_M.fs = fs</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Index table</span></span><br><span class="line"><span class="keyword">local</span> index = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Fastindex</span></span><br><span class="line"><span class="keyword">local</span> fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_url</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">path</span> = &#123;...&#125;</span><br><span class="line">    <span class="keyword">local</span> url = &#123; http.<span class="built_in">getenv</span>(<span class="string">"SCRIPT_NAME"</span>) <span class="keyword">or</span> <span class="string">""</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> p</span><br><span class="line">    <span class="keyword">for</span> _, p <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">path</span>) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> p:<span class="built_in">match</span>(<span class="string">"^[a-zA-Z0-9_%-%.%%/,;]+$"</span>) <span class="keyword">then</span></span><br><span class="line">            url[#url+<span class="number">1</span>] = <span class="string">"/"</span></span><br><span class="line">            url[#url+<span class="number">1</span>] = p</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> #<span class="built_in">path</span> == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        url[#url+<span class="number">1</span>] = <span class="string">"/"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">table</span>.<span class="built_in">concat</span>(url, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">node_visible</span><span class="params">(node)</span></span></span><br><span class="line">   <span class="keyword">if</span> node <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">not</span> (</span><br><span class="line">         (<span class="keyword">not</span> node.title <span class="keyword">or</span> #node.title == <span class="number">0</span>) <span class="keyword">or</span></span><br><span class="line">         (<span class="keyword">not</span> node.target <span class="keyword">or</span> node.hidden == <span class="literal">true</span>) <span class="keyword">or</span></span><br><span class="line">         (<span class="built_in">type</span>(node.target) == <span class="string">"table"</span> <span class="keyword">and</span> node.target.<span class="built_in">type</span> == <span class="string">"firstchild"</span> <span class="keyword">and</span></span><br><span class="line">          (<span class="built_in">type</span>(node.nodes) ~= <span class="string">"table"</span> <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">next</span>(node.nodes)))</span><br><span class="line">      )</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">node_childs</span><span class="params">(node)</span></span></span><br><span class="line">    <span class="keyword">local</span> rv = &#123; &#125;</span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> k, v</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> util.spairs(node.nodes,</span><br><span class="line">            <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span></span><br><span class="line">                <span class="keyword">return</span> (node.nodes[a].order <span class="keyword">or</span> <span class="number">100</span>)</span><br><span class="line">                     &lt; (node.nodes[b].order <span class="keyword">or</span> <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">end</span>)</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> node_visible(v) <span class="keyword">then</span></span><br><span class="line">                rv[#rv+<span class="number">1</span>] = k</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> rv</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error404</span><span class="params">(message)</span></span></span><br><span class="line">    http.<span class="built_in">status</span>(<span class="number">404</span>, <span class="string">"Not Found"</span>)</span><br><span class="line">    message = message <span class="keyword">or</span> <span class="string">"Not Found"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"luci.template"</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> util.copcall(luci.template.render, <span class="string">"error404"</span>) <span class="keyword">then</span></span><br><span class="line">        http.prepare_content(<span class="string">"text/plain"</span>)</span><br><span class="line">        http.<span class="built_in">write</span>(message)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error500</span><span class="params">(message)</span></span></span><br><span class="line">    util.perror(message)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> context.template_header_sent <span class="keyword">then</span></span><br><span class="line">        http.<span class="built_in">status</span>(<span class="number">500</span>, <span class="string">"Internal Server Error"</span>)</span><br><span class="line">        http.prepare_content(<span class="string">"text/plain"</span>)</span><br><span class="line">        http.<span class="built_in">write</span>(message)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">require</span>(<span class="string">"luci.template"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> util.copcall(luci.template.render, <span class="string">"error500"</span>, &#123;message=message&#125;) <span class="keyword">then</span></span><br><span class="line">            http.prepare_content(<span class="string">"text/plain"</span>)</span><br><span class="line">            http.<span class="built_in">write</span>(message)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpdispatch</span><span class="params">(request, prefix)</span></span></span><br><span class="line">    http.context.request = request</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> r = &#123;&#125;</span><br><span class="line">    context.request = r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> pathinfo = http.urldecode(request:<span class="built_in">getenv</span>(<span class="string">"PATH_INFO"</span>) <span class="keyword">or</span> <span class="string">""</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> prefix <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> _, node <span class="keyword">in</span> <span class="built_in">ipairs</span>(prefix) <span class="keyword">do</span></span><br><span class="line">            r[#r+<span class="number">1</span>] = node</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> pathinfo:<span class="built_in">gmatch</span>(<span class="string">"[^/]+"</span>) <span class="keyword">do</span></span><br><span class="line">        r[#r+<span class="number">1</span>] = node</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> stat, err = util.coxpcall(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        dispatch(context.request)</span><br><span class="line">    <span class="keyword">end</span>, error500)</span><br><span class="line"></span><br><span class="line">    http.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">--context._disable_memtrace()</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">require_post_security</span><span class="params">(target)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(target) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(target.post) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> param_name, required_val, request_val</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> param_name, required_val <span class="keyword">in</span> <span class="built_in">pairs</span>(target.post) <span class="keyword">do</span></span><br><span class="line">                request_val = http.formvalue(param_name)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">type</span>(required_val) == <span class="string">"string"</span> <span class="keyword">and</span></span><br><span class="line">                    request_val ~= required_val) <span class="keyword">or</span></span><br><span class="line">                   (required_val == <span class="literal">true</span> <span class="keyword">and</span></span><br><span class="line">                    (request_val == <span class="literal">nil</span> <span class="keyword">or</span> request_val == <span class="string">""</span>))</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (target.post == <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_post_security</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> http.<span class="built_in">getenv</span>(<span class="string">"REQUEST_METHOD"</span>) ~= <span class="string">"POST"</span> <span class="keyword">then</span></span><br><span class="line">        http.<span class="built_in">status</span>(<span class="number">405</span>, <span class="string">"Method Not Allowed"</span>)</span><br><span class="line">        http.header(<span class="string">"Allow"</span>, <span class="string">"POST"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> http.formvalue(<span class="string">"token"</span>) ~= context.authtoken <span class="keyword">then</span></span><br><span class="line">        http.<span class="built_in">status</span>(<span class="number">403</span>, <span class="string">"Forbidden"</span>)</span><br><span class="line">        luci.template.render(<span class="string">"csrftoken"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">session_retrieve</span><span class="params">(sid, allowed_users)</span></span></span><br><span class="line">    <span class="keyword">local</span> sdat = util.ubus(<span class="string">"session"</span>, <span class="string">"get"</span>, &#123; ubus_rpc_session = sid &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(sdat) == <span class="string">"table"</span> <span class="keyword">and</span></span><br><span class="line">       <span class="built_in">type</span>(sdat.values) == <span class="string">"table"</span> <span class="keyword">and</span></span><br><span class="line">       <span class="built_in">type</span>(sdat.values.token) == <span class="string">"string"</span> <span class="keyword">and</span></span><br><span class="line">       (<span class="keyword">not</span> allowed_users <span class="keyword">or</span></span><br><span class="line">        util.contains(allowed_users, sdat.values.username))</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> sid, sdat.values</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">session_setup</span><span class="params">(user, pass, allowed_users)</span></span></span><br><span class="line">    <span class="keyword">if</span> util.contains(allowed_users, user) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> login = util.ubus(<span class="string">"session"</span>, <span class="string">"login"</span>, &#123;</span><br><span class="line">            username = user,</span><br><span class="line">            password = pass,</span><br><span class="line">            timeout  = <span class="built_in">tonumber</span>(luci.<span class="built_in">config</span>.sauth.sessiontime)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(login) == <span class="string">"table"</span> <span class="keyword">and</span></span><br><span class="line">           <span class="built_in">type</span>(login.ubus_rpc_session) == <span class="string">"string"</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            util.ubus(<span class="string">"session"</span>, <span class="string">"set"</span>, &#123;</span><br><span class="line">                ubus_rpc_session = login.ubus_rpc_session,</span><br><span class="line">                values = &#123; token = sys.uniqueid(<span class="number">16</span>) &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> session_retrieve(login.ubus_rpc_session)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(request)</span></span></span><br><span class="line">    <span class="comment">--context._disable_memtrace = require "luci.debug".trap_memtrace("l")</span></span><br><span class="line">    <span class="keyword">local</span> ctx = context</span><br><span class="line">    ctx.<span class="built_in">path</span> = request</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> conf = <span class="built_in">require</span> <span class="string">"luci.config"</span></span><br><span class="line">    <span class="built_in">assert</span>(conf.main,</span><br><span class="line">        <span class="string">"/etc/config/luci seems to be corrupt, unable to find section 'main'"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> i18n = <span class="built_in">require</span> <span class="string">"luci.i18n"</span></span><br><span class="line">    <span class="keyword">local</span> lang = conf.main.lang <span class="keyword">or</span> <span class="string">"auto"</span></span><br><span class="line">    <span class="keyword">if</span> lang == <span class="string">"auto"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> aclang = http.<span class="built_in">getenv</span>(<span class="string">"HTTP_ACCEPT_LANGUAGE"</span>) <span class="keyword">or</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> lpat <span class="keyword">in</span> aclang:<span class="built_in">gmatch</span>(<span class="string">"[%w-]+"</span>) <span class="keyword">do</span></span><br><span class="line">            lpat = lpat <span class="keyword">and</span> lpat:<span class="built_in">gsub</span>(<span class="string">"-"</span>, <span class="string">"_"</span>)</span><br><span class="line">            <span class="keyword">if</span> conf.languages[lpat] <span class="keyword">then</span></span><br><span class="line">                lang = lpat</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> lang == <span class="string">"auto"</span> <span class="keyword">then</span></span><br><span class="line">        lang = i18n.default</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i18n.setlanguage(lang)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> c = ctx.tree</span><br><span class="line">    <span class="keyword">local</span> stat</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">then</span></span><br><span class="line">        c = createtree()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> track = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> args = &#123;&#125;</span><br><span class="line">    ctx.args = args</span><br><span class="line">    ctx.requestargs = ctx.requestargs <span class="keyword">or</span> args</span><br><span class="line">    <span class="keyword">local</span> n</span><br><span class="line">    <span class="keyword">local</span> preq = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> freq = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">ipairs</span>(request) <span class="keyword">do</span></span><br><span class="line">        preq[#preq+<span class="number">1</span>] = s</span><br><span class="line">        freq[#freq+<span class="number">1</span>] = s</span><br><span class="line">        c = c.nodes[s]</span><br><span class="line">        n = i</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        util.update(track, c)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> c.leaf <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> c.leaf <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> j=n+<span class="number">1</span>, #request <span class="keyword">do</span></span><br><span class="line">            args[#args+<span class="number">1</span>] = request[j]</span><br><span class="line">            freq[#freq+<span class="number">1</span>] = request[j]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ctx.requestpath = ctx.requestpath <span class="keyword">or</span> freq</span><br><span class="line">    ctx.<span class="built_in">path</span> = preq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> track.i18n <span class="keyword">then</span></span><br><span class="line">        i18n.loadc(track.i18n)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Init template engine</span></span><br><span class="line">    <span class="keyword">if</span> (c <span class="keyword">and</span> c.index) <span class="keyword">or</span> <span class="keyword">not</span> track.notemplate <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> tpl = <span class="built_in">require</span>(<span class="string">"luci.template"</span>)</span><br><span class="line">        <span class="keyword">local</span> media = track.mediaurlbase <span class="keyword">or</span> luci.<span class="built_in">config</span>.main.mediaurlbase</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">pcall</span>(tpl.Template, <span class="string">"themes/%s/header"</span> % fs.basename(media)) <span class="keyword">then</span></span><br><span class="line">            media = <span class="literal">nil</span></span><br><span class="line">            <span class="keyword">for</span> name, theme <span class="keyword">in</span> <span class="built_in">pairs</span>(luci.<span class="built_in">config</span>.themes) <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> name:<span class="built_in">sub</span>(<span class="number">1</span>,<span class="number">1</span>) ~= <span class="string">"."</span> <span class="keyword">and</span> <span class="built_in">pcall</span>(tpl.Template,</span><br><span class="line">                 <span class="string">"themes/%s/header"</span> % fs.basename(theme)) <span class="keyword">then</span></span><br><span class="line">                    media = theme</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="built_in">assert</span>(media, <span class="string">"No valid theme found"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _ifattr<span class="params">(cond, key, val)</span></span></span><br><span class="line">            <span class="keyword">if</span> cond <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">local</span> env = <span class="built_in">getfenv</span>(<span class="number">3</span>)</span><br><span class="line">                <span class="keyword">local</span> scope = (<span class="built_in">type</span>(env.self) == <span class="string">"table"</span>) <span class="keyword">and</span> env.self</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(val) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">next</span>(val) <span class="keyword">then</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        val = util.serialize_json(val)</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(</span><br><span class="line">                    <span class="string">' %s="%s"'</span>, <span class="built_in">tostring</span>(key),</span><br><span class="line">                    util.pcdata(<span class="built_in">tostring</span>( val</span><br><span class="line">                     <span class="keyword">or</span> (<span class="built_in">type</span>(env[key]) ~= <span class="string">"function"</span> <span class="keyword">and</span> env[key])</span><br><span class="line">                     <span class="keyword">or</span> (scope <span class="keyword">and</span> <span class="built_in">type</span>(scope[key]) ~= <span class="string">"function"</span> <span class="keyword">and</span> scope[key])</span><br><span class="line">                     <span class="keyword">or</span> <span class="string">""</span> ))</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        tpl.context.viewns = <span class="built_in">setmetatable</span>(&#123;</span><br><span class="line">           <span class="built_in">write</span>       = http.<span class="built_in">write</span>;</span><br><span class="line">           include     = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span> tpl.Template(name):render(<span class="built_in">getfenv</span>(<span class="number">2</span>)) <span class="keyword">end</span>;</span><br><span class="line">           translate   = i18n.translate;</span><br><span class="line">           translatef  = i18n.translatef;</span><br><span class="line">           export      = <span class="function"><span class="keyword">function</span><span class="params">(k, v)</span></span> <span class="keyword">if</span> tpl.context.viewns[k] == <span class="literal">nil</span> <span class="keyword">then</span> tpl.context.viewns[k] = v <span class="keyword">end</span> <span class="keyword">end</span>;</span><br><span class="line">           striptags   = util.striptags;</span><br><span class="line">           pcdata      = util.pcdata;</span><br><span class="line">           media       = media;</span><br><span class="line">           theme       = fs.basename(media);</span><br><span class="line">           resource    = luci.<span class="built_in">config</span>.main.resourcebase;</span><br><span class="line">           ifattr      = <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span> <span class="keyword">return</span> _ifattr(...) <span class="keyword">end</span>;</span><br><span class="line">           attr        = <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span> <span class="keyword">return</span> _ifattr(<span class="literal">true</span>, ...) <span class="keyword">end</span>;</span><br><span class="line">           url         = build_url;</span><br><span class="line">        &#125;, &#123;<span class="built_in">__index</span>=<span class="function"><span class="keyword">function</span><span class="params">(table, key)</span></span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="string">"controller"</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> build_url()</span><br><span class="line">            <span class="keyword">elseif</span> key == <span class="string">"REQUEST_URI"</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> build_url(<span class="built_in">unpack</span>(ctx.requestpath))</span><br><span class="line">            <span class="keyword">elseif</span> key == <span class="string">"token"</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> ctx.authtoken</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">rawget</span>(<span class="built_in">table</span>, key) <span class="keyword">or</span> <span class="built_in">_G</span>[key]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span>&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    track.dependent = (track.dependent ~= <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">assert</span>(<span class="keyword">not</span> track.dependent <span class="keyword">or</span> <span class="keyword">not</span> track.auto,</span><br><span class="line">        <span class="string">"Access Violation\nThe page at '"</span> .. <span class="built_in">table</span>.<span class="built_in">concat</span>(request, <span class="string">"/"</span>) .. <span class="string">"/' "</span> ..</span><br><span class="line">        <span class="string">"has no parent node so the access to this location has been denied.\n"</span> ..</span><br><span class="line">        <span class="string">"This is a software bug, please report this message at "</span> ..</span><br><span class="line">        <span class="string">"https://github.com/openwrt/luci/issues"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> track.sysauth <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> authen = track.sysauth_authenticator</span><br><span class="line">        <span class="keyword">local</span> _, sid, sdat, default_user, allowed_users</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(authen) == <span class="string">"string"</span> <span class="keyword">and</span> authen ~= <span class="string">"htmlauth"</span> <span class="keyword">then</span></span><br><span class="line">            error500(<span class="string">"Unsupported authenticator %q configured"</span> % authen)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(track.sysauth) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">            default_user, allowed_users = <span class="literal">nil</span>, track.sysauth</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            default_user, allowed_users = track.sysauth, &#123; track.sysauth &#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(authen) == <span class="string">"function"</span> <span class="keyword">then</span></span><br><span class="line">            _, sid = authen(sys.user.checkpasswd, allowed_users)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sid = http.getcookie(<span class="string">"sysauth"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        sid, sdat = session_retrieve(sid, allowed_users)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (sid <span class="keyword">and</span> sdat) <span class="keyword">and</span> authen == <span class="string">"htmlauth"</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> user = http.<span class="built_in">getenv</span>(<span class="string">"HTTP_AUTH_USER"</span>)</span><br><span class="line">            <span class="keyword">local</span> pass = http.<span class="built_in">getenv</span>(<span class="string">"HTTP_AUTH_PASS"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user == <span class="literal">nil</span> <span class="keyword">and</span> pass == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">                user = http.formvalue(<span class="string">"luci_username"</span>)</span><br><span class="line">                pass = http.formvalue(<span class="string">"luci_password"</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            sid, sdat = session_setup(user, pass, allowed_users)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> sid <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">local</span> tmpl = <span class="built_in">require</span> <span class="string">"luci.template"</span></span><br><span class="line"></span><br><span class="line">                context.<span class="built_in">path</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">                http.<span class="built_in">status</span>(<span class="number">403</span>, <span class="string">"Forbidden"</span>)</span><br><span class="line">                tmpl.render(track.sysauth_template <span class="keyword">or</span> <span class="string">"sysauth"</span>, &#123;</span><br><span class="line">                    duser = default_user,</span><br><span class="line">                    fuser = user</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            http.header(<span class="string">"Set-Cookie"</span>, <span class="string">'sysauth=%s; path=%s'</span> %&#123; sid, build_url() &#125;)</span><br><span class="line">            http.redirect(build_url(<span class="built_in">unpack</span>(ctx.requestpath)))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sid <span class="keyword">or</span> <span class="keyword">not</span> sdat <span class="keyword">then</span></span><br><span class="line">            http.<span class="built_in">status</span>(<span class="number">403</span>, <span class="string">"Forbidden"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        ctx.authsession = sid</span><br><span class="line">        ctx.authtoken = sdat.token</span><br><span class="line">        ctx.authuser = sdat.username</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> require_post_security(c.target) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> test_post_security(c) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> track.setgroup <span class="keyword">then</span></span><br><span class="line">        sys.process.setgroup(track.setgroup)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> track.setuser <span class="keyword">then</span></span><br><span class="line">        sys.process.setuser(track.setuser)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> target = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(c.target) == <span class="string">"function"</span> <span class="keyword">then</span></span><br><span class="line">            target = c.target</span><br><span class="line">        <span class="keyword">elseif</span> <span class="built_in">type</span>(c.target) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">            target = c.target.target</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> (c.index <span class="keyword">or</span> <span class="built_in">type</span>(target) == <span class="string">"function"</span>) <span class="keyword">then</span></span><br><span class="line">        ctx.dispatched = c</span><br><span class="line">        ctx.requested = ctx.requested <span class="keyword">or</span> ctx.dispatched</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> c.index <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> tpl = <span class="built_in">require</span> <span class="string">"luci.template"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> util.copcall(tpl.render, <span class="string">"indexer"</span>, &#123;&#125;) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(target) == <span class="string">"function"</span> <span class="keyword">then</span></span><br><span class="line">        util.copcall(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="keyword">local</span> oldenv = <span class="built_in">getfenv</span>(target)</span><br><span class="line">            <span class="keyword">local</span> module = <span class="built_in">require</span>(c.module)</span><br><span class="line">            <span class="keyword">local</span> env = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__index</span>=</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span><span class="params">(tbl, key)</span></span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">rawget</span>(tbl, key) <span class="keyword">or</span> module[key] <span class="keyword">or</span> oldenv[key]</span><br><span class="line">            <span class="keyword">end</span>&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">setfenv</span>(target, env)</span><br><span class="line">        <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> ok, err</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(c.target) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">            ok, err = util.copcall(target, c.target, <span class="built_in">unpack</span>(args))</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ok, err = util.copcall(target, <span class="built_in">unpack</span>(args))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">assert</span>(ok,</span><br><span class="line">               <span class="string">"Failed to execute "</span> .. (<span class="built_in">type</span>(c.target) == <span class="string">"function"</span> <span class="keyword">and</span> <span class="string">"function"</span> <span class="keyword">or</span> c.target.<span class="built_in">type</span> <span class="keyword">or</span> <span class="string">"unknown"</span>) ..</span><br><span class="line">               <span class="string">" dispatcher target for entry '/"</span> .. <span class="built_in">table</span>.<span class="built_in">concat</span>(request, <span class="string">"/"</span>) .. <span class="string">"'.\n"</span> ..</span><br><span class="line">               <span class="string">"The called action terminated with an exception:\n"</span> .. <span class="built_in">tostring</span>(err <span class="keyword">or</span> <span class="string">"(unknown)"</span>))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">local</span> root = node()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> <span class="keyword">not</span> root.target <span class="keyword">then</span></span><br><span class="line">            error404(<span class="string">"No root node was registered, this usually happens if no module was installed.\n"</span> ..</span><br><span class="line">                     <span class="string">"Install luci-mod-admin-full and retry. "</span> ..</span><br><span class="line">                     <span class="string">"If the module is already installed, try removing the /tmp/luci-indexcache file."</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            error404(<span class="string">"No page is registered at '/"</span> .. <span class="built_in">table</span>.<span class="built_in">concat</span>(request, <span class="string">"/"</span>) .. <span class="string">"'.\n"</span> ..</span><br><span class="line">                     <span class="string">"If this url belongs to an extension, make sure it is properly installed.\n"</span> ..</span><br><span class="line">                     <span class="string">"If the extension was recently installed, try removing the /tmp/luci-indexcache file."</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createindex</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> controllers = &#123; &#125;</span><br><span class="line">    <span class="keyword">local</span> base = <span class="string">"%s/controller/"</span> % util.libpath()</span><br><span class="line">    <span class="keyword">local</span> _, <span class="built_in">path</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">path</span> <span class="keyword">in</span> (fs.glob(<span class="string">"%s*.lua"</span> % base) <span class="keyword">or</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span>) <span class="keyword">do</span></span><br><span class="line">        controllers[#controllers+<span class="number">1</span>] = <span class="built_in">path</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">path</span> <span class="keyword">in</span> (fs.glob(<span class="string">"%s*/*.lua"</span> % base) <span class="keyword">or</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span>) <span class="keyword">do</span></span><br><span class="line">        controllers[#controllers+<span class="number">1</span>] = <span class="built_in">path</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> indexcache <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> cachedate = fs.stat(indexcache, <span class="string">"mtime"</span>)</span><br><span class="line">        <span class="keyword">if</span> cachedate <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> realdate = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> _, obj <span class="keyword">in</span> <span class="built_in">ipairs</span>(controllers) <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">local</span> omtime = fs.stat(obj, <span class="string">"mtime"</span>)</span><br><span class="line">                realdate = (omtime <span class="keyword">and</span> omtime &gt; realdate) <span class="keyword">and</span> omtime <span class="keyword">or</span> realdate</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cachedate &gt; realdate <span class="keyword">and</span> sys.process.info(<span class="string">"uid"</span>) == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">assert</span>(</span><br><span class="line">                    sys.process.info(<span class="string">"uid"</span>) == fs.stat(indexcache, <span class="string">"uid"</span>)</span><br><span class="line">                    <span class="keyword">and</span> fs.stat(indexcache, <span class="string">"modestr"</span>) == <span class="string">"rw-------"</span>,</span><br><span class="line">                    <span class="string">"Fatal: Indexcache is not sane!"</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                index = <span class="built_in">loadfile</span>(indexcache)()</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    index = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, <span class="built_in">path</span> <span class="keyword">in</span> <span class="built_in">ipairs</span>(controllers) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> modname = <span class="string">"luci.controller."</span> .. <span class="built_in">path</span>:<span class="built_in">sub</span>(#base+<span class="number">1</span>, #<span class="built_in">path</span><span class="number">-4</span>):<span class="built_in">gsub</span>(<span class="string">"/"</span>, <span class="string">"."</span>)</span><br><span class="line">        <span class="keyword">local</span> <span class="built_in">mod</span> = <span class="built_in">require</span>(modname)</span><br><span class="line">        <span class="built_in">assert</span>(<span class="built_in">mod</span> ~= <span class="literal">true</span>,</span><br><span class="line">               <span class="string">"Invalid controller file found\n"</span> ..</span><br><span class="line">               <span class="string">"The file '"</span> .. <span class="built_in">path</span> .. <span class="string">"' contains an invalid module line.\n"</span> ..</span><br><span class="line">               <span class="string">"Please verify whether the module name is set to '"</span> .. modname ..</span><br><span class="line">               <span class="string">"' - It must correspond to the file path!"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> idx = <span class="built_in">mod</span>.index</span><br><span class="line">        <span class="built_in">assert</span>(<span class="built_in">type</span>(idx) == <span class="string">"function"</span>,</span><br><span class="line">               <span class="string">"Invalid controller file found\n"</span> ..</span><br><span class="line">               <span class="string">"The file '"</span> .. <span class="built_in">path</span> .. <span class="string">"' contains no index() function.\n"</span> ..</span><br><span class="line">               <span class="string">"Please make sure that the controller contains a valid "</span> ..</span><br><span class="line">               <span class="string">"index function and verify the spelling!"</span>)</span><br><span class="line"></span><br><span class="line">        index[modname] = idx</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> indexcache <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> f = nixio.<span class="built_in">open</span>(indexcache, <span class="string">"w"</span>, <span class="number">600</span>)</span><br><span class="line">        f:writeall(util.get_bytecode(index))</span><br><span class="line">        f:<span class="built_in">close</span>()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Build the index before if it does not exist yet.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createtree</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> index <span class="keyword">then</span></span><br><span class="line">        createindex()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> ctx  = context</span><br><span class="line">    <span class="keyword">local</span> tree = &#123;nodes=&#123;&#125;, inreq=<span class="literal">true</span>&#125;</span><br><span class="line">    <span class="keyword">local</span> modi = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ctx.treecache = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__mode</span>=<span class="string">"v"</span>&#125;)</span><br><span class="line">    ctx.tree = tree</span><br><span class="line">    ctx.modifiers = modi</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Load default translation</span></span><br><span class="line">    <span class="built_in">require</span> <span class="string">"luci.i18n"</span>.loadc(<span class="string">"base"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> scope = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__index</span> = luci.dispatcher&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(index) <span class="keyword">do</span></span><br><span class="line">        scope._NAME = k</span><br><span class="line">        <span class="built_in">setfenv</span>(v, scope)</span><br><span class="line">        v()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">modisort</span><span class="params">(a,b)</span></span></span><br><span class="line">        <span class="keyword">return</span> modi[a].order &lt; modi[b].order</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v <span class="keyword">in</span> util.spairs(modi, modisort) <span class="keyword">do</span></span><br><span class="line">        scope._NAME = v.module</span><br><span class="line">        <span class="built_in">setfenv</span>(v.func, scope)</span><br><span class="line">        v.func()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modifier</span><span class="params">(func, order)</span></span></span><br><span class="line">    context.modifiers[#context.modifiers+<span class="number">1</span>] = &#123;</span><br><span class="line">        func = func,</span><br><span class="line">        order = order <span class="keyword">or</span> <span class="number">0</span>,</span><br><span class="line">        module</span><br><span class="line">            = <span class="built_in">getfenv</span>(<span class="number">2</span>)._NAME</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">(path, clone, title, order)</span></span></span><br><span class="line">    <span class="keyword">local</span> obj  = node(<span class="built_in">unpack</span>(<span class="built_in">path</span>))</span><br><span class="line">    obj.nodes  = <span class="literal">nil</span></span><br><span class="line">    obj.module = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    obj.title = title</span><br><span class="line">    obj.order = order</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, &#123;<span class="built_in">__index</span> = _create_node(clone)&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">entry</span><span class="params">(path, target, title, order)</span></span></span><br><span class="line">    <span class="keyword">local</span> c = node(<span class="built_in">unpack</span>(<span class="built_in">path</span>))</span><br><span class="line"></span><br><span class="line">    c.target = target</span><br><span class="line">    c.title  = title</span><br><span class="line">    c.order  = order</span><br><span class="line">    c.module = <span class="built_in">getfenv</span>(<span class="number">2</span>)._NAME</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- enabling the node.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">return</span> _create_node(&#123;...&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">node</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> c = _create_node(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line">    c.module = <span class="built_in">getfenv</span>(<span class="number">2</span>)._NAME</span><br><span class="line">    c.auto = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> _create_node<span class="params">(path)</span></span></span><br><span class="line">    <span class="keyword">if</span> #<span class="built_in">path</span> == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> context.tree</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> name = <span class="built_in">table</span>.<span class="built_in">concat</span>(<span class="built_in">path</span>, <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">local</span> c = context.treecache[name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> last = <span class="built_in">table</span>.<span class="built_in">remove</span>(<span class="built_in">path</span>)</span><br><span class="line">        <span class="keyword">local</span> parent = _create_node(<span class="built_in">path</span>)</span><br><span class="line"></span><br><span class="line">        c = &#123;nodes=&#123;&#125;, auto=<span class="literal">true</span>&#125;</span><br><span class="line">        <span class="comment">-- the node is "in request" if the request path matches</span></span><br><span class="line">        <span class="comment">-- at least up to the length of the node path</span></span><br><span class="line">        <span class="keyword">if</span> parent.inreq <span class="keyword">and</span> context.<span class="built_in">path</span>[#<span class="built_in">path</span>+<span class="number">1</span>] == last <span class="keyword">then</span></span><br><span class="line">          c.inreq = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        parent.nodes[last] = c</span><br><span class="line">        context.treecache[name] = c</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Subdispatchers --</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> _firstchild<span class="params">()</span></span></span><br><span class="line">   <span class="keyword">local</span> <span class="built_in">path</span> = &#123; <span class="built_in">unpack</span>(context.<span class="built_in">path</span>) &#125;</span><br><span class="line">   <span class="keyword">local</span> name = <span class="built_in">table</span>.<span class="built_in">concat</span>(<span class="built_in">path</span>, <span class="string">"."</span>)</span><br><span class="line">   <span class="keyword">local</span> node = context.treecache[name]</span><br><span class="line"></span><br><span class="line">   <span class="keyword">local</span> lowest</span><br><span class="line">   <span class="keyword">if</span> node <span class="keyword">and</span> node.nodes <span class="keyword">and</span> <span class="built_in">next</span>(node.nodes) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">local</span> k, v</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(node.nodes) <span class="keyword">do</span></span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">not</span> lowest <span class="keyword">or</span></span><br><span class="line">            (v.order <span class="keyword">or</span> <span class="number">100</span>) &lt; (node.nodes[lowest].order <span class="keyword">or</span> <span class="number">100</span>)</span><br><span class="line">         <span class="keyword">then</span></span><br><span class="line">            lowest = k</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">assert</span>(lowest ~= <span class="literal">nil</span>,</span><br><span class="line">          <span class="string">"The requested node contains no childs, unable to redispatch"</span>)</span><br><span class="line"></span><br><span class="line">   <span class="built_in">path</span>[#<span class="built_in">path</span>+<span class="number">1</span>] = lowest</span><br><span class="line">   dispatch(<span class="built_in">path</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstchild</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">return</span> &#123; <span class="built_in">type</span> = <span class="string">"firstchild"</span>, target = _firstchild &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alias</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> req = &#123;...&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span></span><br><span class="line">        <span class="keyword">for</span> _, r <span class="keyword">in</span> <span class="built_in">ipairs</span>(&#123;...&#125;) <span class="keyword">do</span></span><br><span class="line">            req[#req+<span class="number">1</span>] = r</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        dispatch(req)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rewrite</span><span class="params">(n, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> req = &#123;...&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span></span><br><span class="line">        <span class="keyword">local</span> dispatched = util.clone(context.dispatched)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i=<span class="number">1</span>,n <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">remove</span>(dispatched, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, r <span class="keyword">in</span> <span class="built_in">ipairs</span>(req) <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">insert</span>(dispatched, i, r)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _, r <span class="keyword">in</span> <span class="built_in">ipairs</span>(&#123;...&#125;) <span class="keyword">do</span></span><br><span class="line">            dispatched[#dispatched+<span class="number">1</span>] = r</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        dispatch(dispatched)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _call<span class="params">(self, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> func = <span class="built_in">getfenv</span>()[self.name]</span><br><span class="line">    <span class="built_in">assert</span>(func ~= <span class="literal">nil</span>,</span><br><span class="line">           <span class="string">'Cannot resolve function "'</span> .. self.name .. <span class="string">'". Is it misspelled or local?'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">type</span>(func) == <span class="string">"function"</span>,</span><br><span class="line">           <span class="string">'The symbol "'</span> .. self.name .. <span class="string">'" does not refer to a function but data '</span> ..</span><br><span class="line">           <span class="string">'of type "'</span> .. <span class="built_in">type</span>(func) .. <span class="string">'".'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> #self.argv &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> func(<span class="built_in">unpack</span>(self.argv), ...)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> func(...)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">(name, ...)</span></span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="built_in">type</span> = <span class="string">"call"</span>, argv = &#123;...&#125;, name = name, target = _call&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post_on</span><span class="params">(params, name, ...)</span></span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="built_in">type</span> = <span class="string">"call"</span>,</span><br><span class="line">        post = params,</span><br><span class="line">        argv = &#123; ... &#125;,</span><br><span class="line">        name = name,</span><br><span class="line">        target = _call</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">return</span> post_on(<span class="literal">true</span>, ...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> _template = <span class="function"><span class="keyword">function</span><span class="params">(self, ...)</span></span></span><br><span class="line">    <span class="built_in">require</span> <span class="string">"luci.template"</span>.render(self.view)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">template</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="built_in">type</span> = <span class="string">"template"</span>, view = name, target = _template&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _cbi<span class="params">(self, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> cbi = <span class="built_in">require</span> <span class="string">"luci.cbi"</span></span><br><span class="line">    <span class="keyword">local</span> tpl = <span class="built_in">require</span> <span class="string">"luci.template"</span></span><br><span class="line">    <span class="keyword">local</span> http = <span class="built_in">require</span> <span class="string">"luci.http"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">config</span> = self.<span class="built_in">config</span> <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> maps = cbi.<span class="built_in">load</span>(self.model, ...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> state = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> <span class="built_in">ipairs</span>(maps) <span class="keyword">do</span></span><br><span class="line">        res.flow = <span class="built_in">config</span></span><br><span class="line">        <span class="keyword">local</span> cstate = res:parse()</span><br><span class="line">        <span class="keyword">if</span> cstate <span class="keyword">and</span> (<span class="keyword">not</span> state <span class="keyword">or</span> cstate &lt; state) <span class="keyword">then</span></span><br><span class="line">            state = cstate</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _resolve_path<span class="params">(path)</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(<span class="built_in">path</span>) == <span class="string">"table"</span> <span class="keyword">and</span> build_url(<span class="built_in">unpack</span>(<span class="built_in">path</span>)) <span class="keyword">or</span> <span class="built_in">path</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">config</span>.on_valid_to <span class="keyword">and</span> state <span class="keyword">and</span> state &gt; <span class="number">0</span> <span class="keyword">and</span> state &lt; <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        http.redirect(_resolve_path(<span class="built_in">config</span>.on_valid_to))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">config</span>.on_changed_to <span class="keyword">and</span> state <span class="keyword">and</span> state &gt; <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        http.redirect(_resolve_path(<span class="built_in">config</span>.on_changed_to))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">config</span>.on_success_to <span class="keyword">and</span> state <span class="keyword">and</span> state &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        http.redirect(_resolve_path(<span class="built_in">config</span>.on_success_to))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">config</span>.state_handler <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">config</span>.state_handler(state, maps) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    http.header(<span class="string">"X-CBI-State"</span>, state <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">config</span>.noheader <span class="keyword">then</span></span><br><span class="line">        tpl.render(<span class="string">"cbi/header"</span>, &#123;state = state&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> redirect</span><br><span class="line">    <span class="keyword">local</span> messages</span><br><span class="line">    <span class="keyword">local</span> applymap   = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">local</span> pageaction = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">local</span> parsechain = &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> <span class="built_in">ipairs</span>(maps) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> res.apply_needed <span class="keyword">and</span> res.parsechain <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> c</span><br><span class="line">            <span class="keyword">for</span> _, c <span class="keyword">in</span> <span class="built_in">ipairs</span>(res.parsechain) <span class="keyword">do</span></span><br><span class="line">                parsechain[#parsechain+<span class="number">1</span>] = c</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            applymap = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res.redirect <span class="keyword">then</span></span><br><span class="line">            redirect = redirect <span class="keyword">or</span> res.redirect</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res.pageaction == <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">            pageaction = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res.message <span class="keyword">then</span></span><br><span class="line">            messages = messages <span class="keyword">or</span> &#123; &#125;</span><br><span class="line">            messages[#messages+<span class="number">1</span>] = res.message</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> <span class="built_in">ipairs</span>(maps) <span class="keyword">do</span></span><br><span class="line">        res:render(&#123;</span><br><span class="line">            firstmap   = (i == <span class="number">1</span>),</span><br><span class="line">            applymap   = applymap,</span><br><span class="line">            redirect   = redirect,</span><br><span class="line">            messages   = messages,</span><br><span class="line">            pageaction = pageaction,</span><br><span class="line">            parsechain = parsechain</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">config</span>.nofooter <span class="keyword">then</span></span><br><span class="line">        tpl.render(<span class="string">"cbi/footer"</span>, &#123;</span><br><span class="line">            flow       = <span class="built_in">config</span>,</span><br><span class="line">            pageaction = pageaction,</span><br><span class="line">            redirect   = redirect,</span><br><span class="line">            state      = state,</span><br><span class="line">            autoapply  = <span class="built_in">config</span>.autoapply</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cbi</span><span class="params">(model, config)</span></span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="built_in">type</span> = <span class="string">"cbi"</span>,</span><br><span class="line">        post = &#123; [<span class="string">"cbi.submit"</span>] = <span class="string">"1"</span> &#125;,</span><br><span class="line">        <span class="built_in">config</span> = <span class="built_in">config</span>,</span><br><span class="line">        model = model,</span><br><span class="line">        target = _cbi</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _arcombine<span class="params">(self, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> argv = &#123;...&#125;</span><br><span class="line">    <span class="keyword">local</span> target = #argv &gt; <span class="number">0</span> <span class="keyword">and</span> self.targets[<span class="number">2</span>] <span class="keyword">or</span> self.targets[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">setfenv</span>(target.target, self.env)</span><br><span class="line">    target:target(<span class="built_in">unpack</span>(argv))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arcombine</span><span class="params">(trg1, trg2)</span></span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="built_in">type</span> = <span class="string">"arcombine"</span>, env = <span class="built_in">getfenv</span>(), target = _arcombine, targets = &#123;trg1, trg2&#125;&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _form<span class="params">(self, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> cbi = <span class="built_in">require</span> <span class="string">"luci.cbi"</span></span><br><span class="line">    <span class="keyword">local</span> tpl = <span class="built_in">require</span> <span class="string">"luci.template"</span></span><br><span class="line">    <span class="keyword">local</span> http = <span class="built_in">require</span> <span class="string">"luci.http"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> maps = luci.cbi.<span class="built_in">load</span>(self.model, ...)</span><br><span class="line">    <span class="keyword">local</span> state = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> <span class="built_in">ipairs</span>(maps) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> cstate = res:parse()</span><br><span class="line">        <span class="keyword">if</span> cstate <span class="keyword">and</span> (<span class="keyword">not</span> state <span class="keyword">or</span> cstate &lt; state) <span class="keyword">then</span></span><br><span class="line">            state = cstate</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    http.header(<span class="string">"X-CBI-State"</span>, state <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">    tpl.render(<span class="string">"header"</span>)</span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> <span class="built_in">ipairs</span>(maps) <span class="keyword">do</span></span><br><span class="line">        res:render()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    tpl.render(<span class="string">"footer"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">form</span><span class="params">(model)</span></span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="built_in">type</span> = <span class="string">"cbi"</span>,</span><br><span class="line">        post = &#123; [<span class="string">"cbi.submit"</span>] = <span class="string">"1"</span> &#125;,</span><br><span class="line">        model = model,</span><br><span class="line">        target = _form</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">translate = i18n.translate</span><br><span class="line"></span><br><span class="line"><span class="comment">-- This function does not actually translate the given argument but</span></span><br><span class="line"><span class="comment">-- is used by build/i18n-scan.pl to find translatable entries.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> _<span class="params">(text)</span></span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Luci </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows 清除系统垃圾脚本</title>
      <link href="/2018/05/24/%E5%B7%A5%E5%85%B7/03Windows%E6%B8%85%E9%99%A4%E5%9E%83%E5%9C%BE%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/05/24/%E5%B7%A5%E5%85%B7/03Windows%E6%B8%85%E9%99%A4%E5%9E%83%E5%9C%BE%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 正在清除系统垃圾文件，请稍等......</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.tmp</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*._mp</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.log</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.gid</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.chk</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.old</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\recycled\*.*</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%windir%</span>\*.bak</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%windir%</span>\prefetch\*.*</span><br><span class="line"><span class="built_in">rd</span> /s /q <span class="variable">%windir%</span>\temp &amp; <span class="built_in">md</span> <span class="variable">%windir%</span>\temp</span><br><span class="line"><span class="built_in">del</span> /f /q <span class="variable">%userprofile%</span>\cookies\*.*</span><br><span class="line"><span class="built_in">del</span> /f /q <span class="variable">%userprofile%</span>\recent\*.*</span><br><span class="line"><span class="built_in">del</span> /f /s /q "<span class="variable">%userprofile%</span>\Local Settings\Temporary Internet Files\*.*"</span><br><span class="line"><span class="built_in">del</span> /f /s /q "<span class="variable">%userprofile%</span>\Local Settings\Temp\*.*"</span><br><span class="line"><span class="built_in">del</span> /f /s /q "<span class="variable">%userprofile%</span>\recent\*.*"</span><br><span class="line"><span class="built_in">echo</span> 清除系统LJ完成！</span><br><span class="line"><span class="built_in">echo</span>. &amp; <span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p><a href="/bat/clear.bat">clear.bat脚本下载</a></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win工具 </tag>
            
            <tag> win脚本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 串口调试工具</title>
      <link href="/2018/05/23/%E5%B7%A5%E5%85%B7/02Linux%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/05/23/%E5%B7%A5%E5%85%B7/02Linux%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>minicom</strong></p><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install minicom</span><br></pre></td></tr></table></figure><h2 id="2、查看串口"><a href="#2、查看串口" class="headerlink" title="2、查看串口"></a>2、查看串口</h2><p>使用linux串口一般<code>/dev/ttyS*</code>,如何查看当前使用的是那个<code>ttyS*</code>。<br>方式1：查看串口是否可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su   <span class="comment">#切换root</span></span><br><span class="line"><span class="built_in">echo</span> 123 &gt; /dev/ttyS0</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/tools_02/01.png" alt></p></div><br>如图，如果不可用则会提示<code>Input/Output error</code><p></p><p>方式2：通过查看日志 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | grep ttyS*</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/tools_02/02.png" alt></p></div><br>针对USB设置，一般查看<code>ttyUSB*</code><p></p><h2 id="3、使用串口"><a href="#3、使用串口" class="headerlink" title="3、使用串口"></a>3、使用串口</h2><p><strong>方式1:</strong><br>1、打开minicom</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo minicom</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/tools_02/03.png" alt></p></div><br>2、进入minicom帮助页<br>按键<code>ctrl+A</code>(不区分大小写)，随后按<code>z</code>,出现如下：<p></p><div align="left"><p><img src="/img/tools_02/04.png" alt></p></div><br>3、设置minicom<br>设置minicom,按<code>o</code><p></p><div align="left"><p><img src="/img/tools_02/05.png" alt></p></div><br>上下选择<code>Serial port setup</code><p></p><div align="left"><p><img src="/img/tools_02/06.png" alt></p></div><br>一般主要设置<code>Serial Device</code>和<code>Bits</code>,设置后之后<code>Save setup as dfl</code>或<code>Save setup as..</code><p></p><div align="left"><p><img src="/img/tools_02/07.png" alt></p></div><br>4、使用<br>保存之后，如果没有反应，可以<code>ctrl+a</code>,<code>q</code>退出，重新进入。<p></p><p><strong>方式2:</strong><br>使用时直接输入设备和波特率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo minicom -D /dev/ttyS0 -b 115200</span><br></pre></td></tr></table></figure><h2 id="4、其他命令，查看已接入设备"><a href="#4、其他命令，查看已接入设备" class="headerlink" title="4、其他命令，查看已接入设备"></a>4、其他命令，查看已接入设备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2018/05/15/%E5%B7%A5%E5%85%B7/01Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/15/%E5%B7%A5%E5%85%B7/01Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>安装Git</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><blockquote><p>设置Git</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "username"</span><br><span class="line">git config --global user.email "user@example.com"</span><br></pre></td></tr></table></figure><blockquote><p>仓库，提交代码</p></blockquote><p>本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo "# test" &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m "first commit"</span><br><span class="line">git remote add origin https://github.com/***/*.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>克隆远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/***/*.git</span><br></pre></td></tr></table></figure><blockquote><p>其他命令</p></blockquote><p>创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch_a</span><br></pre></td></tr></table></figure><p>切换为主分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -d branch_a</span><br></pre></td></tr></table></figure><p>更新代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>查看修改文件状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>查看修改内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff filename</span><br></pre></td></tr></table></figure><blockquote><p>日志</p></blockquote><p>查看仓库历史：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>要以每个提交一行的样式查看日志，你可以用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure><p>或者也许你想要看一个所有分支的 ASCII 艺术树，带有标签和分支名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --oneline --decorate --all</span><br></pre></td></tr></table></figure><p>如果你只想看哪些文件改动过：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --name-status</span><br></pre></td></tr></table></figure><br><blockquote><p><span class="reprint">转</span>** <a href="http://www.ituring.com.cn/article/506193" target="_blank" rel="noopener">git命令</a>**</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br><span class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class="line">git status                                                # 查看当前版本状态（是否修改）</span><br><span class="line">git add xyz                                               # 添加xyz文件至index</span><br><span class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class="line">git commit -m &apos;xxx&apos;                                       # 提交</span><br><span class="line">git commit --amend -m &apos;xxx&apos;                               # 合并上一次提交（用于反复修改）</span><br><span class="line">git commit -am &apos;xxx&apos;                                      # 将add和commit合为一步</span><br><span class="line">git rm xxx                                                # 删除index中的文件</span><br><span class="line">git rm -r *                                               # 递归删除</span><br><span class="line">git log                                                   # 显示提交日志</span><br><span class="line">git log -1                                                # 显示1行日志 -n为n行</span><br><span class="line">git log -5</span><br><span class="line">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class="line">git log -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class="line">git show dfb02                                            # 可只用commitid的前几位</span><br><span class="line">git show HEAD                                             # 显示HEAD提交日志</span><br><span class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class="line">git tag                                                   # 显示已存在的tag</span><br><span class="line">git tag -a v2.0 -m &apos;xxx&apos;                                  # 增加v2.0的tag</span><br><span class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class="line">git log v2.0                                              # 显示v2.0的日志</span><br><span class="line">git diff                                                  # 显示所有未添加至index的变更</span><br><span class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class="line">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</span><br><span class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</span><br><span class="line">git branch                                                # 显示本地分支</span><br><span class="line">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class="line">git branch -a                                             # 显示所有分支</span><br><span class="line">git branch -r                                             # 显示所有原创分支</span><br><span class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class="line">git branch -m master master_copy                          # 本地分支改名</span><br><span class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</span><br><span class="line">git checkout -b master master_copy                        # 上面的完整版</span><br><span class="line">git checkout features/performance                         # 检出已存在的features/performance分支</span><br><span class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class="line">git checkout v2.0                                         # 检出版本v2.0</span><br><span class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git merge origin/master                                   # 合并远程master分支至当前分支</span><br><span class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class="line">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class="line">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class="line">git mv README README2                                     # 重命名文件README为README2</span><br><span class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br><span class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</span><br><span class="line">git ls-files                                              # 列出git index包含的文件</span><br><span class="line">git show-branch                                           # 图示当前分支历史</span><br><span class="line">git show-branch --all                                     # 图示所有分支历史</span><br><span class="line">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class="line">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class="line">git log --pretty=format:&apos;%h %s&apos; --graph                   # 图示提交日志</span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class="line">git stash list                                            # 查看所有暂存</span><br><span class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class="line">git grep -e &apos;#define&apos; --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Netfilter源代码分析详解</title>
      <link href="/2018/05/14/%E7%AC%94%E8%AE%B0/06Netfilter%20Code%E5%88%86%E6%9E%90/"/>
      <url>/2018/05/14/%E7%AC%94%E8%AE%B0/06Netfilter%20Code%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="menu"></div><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a><strong>一、概述</strong></h2><h3 id="1-Netfilter-IPTables框架简介"><a href="#1-Netfilter-IPTables框架简介" class="headerlink" title="1. Netfilter/IPTables框架简介"></a><strong>1. Netfilter/IPTables框架简介</strong></h3><p>　　Netfilter/IPTables是继2.0.x的IPfwadm、2.2.x的IPchains之后，新一代的Linux防火墙机制。Netfilter采用模块化设计，具有良好的可扩充性。其重要工具模块IPTables连接到Netfilter的架构中，并允许使用者对数据报进行过滤、地址转换、处理等操作。<br>　　Netfilter提供了一个框架，将对网络代码的直接干涉降到最低，并允许用规定的接口将其他包处理代码以模块的形式添加到内核中，具有极强的灵活性。</p><h3 id="2-主要源代码文件"><a href="#2-主要源代码文件" class="headerlink" title="2. 主要源代码文件"></a><strong>2. 主要源代码文件</strong></h3><ul><li>linux内核版本：<code>2.4.21</code></li><li>Netfilter主文件：<code>net/core/netfilter.c</code></li><li>Netfilter头文件：<code>include/linux/netfilter.h</code></li><li>IPv4相关：   <ul><li>c文件：<code>net/ipv4/netfilter/*.c</code></li><li>头文件：<code>include/linux/netfilter_ipv4.h</code>  , <code>include/linux/netfilter_ipv4/*.h</code></li></ul></li><li>IPv4协议栈主体的部分c文件，特别是与数据报传送过程有关的部分:<ul><li><code>ip_input.c</code>,<code>ip_forward.c</code>,<code>ip_output.c</code>,<code>ip_fragment.c</code>等</li></ul></li></ul><h2 id="二、Netfilter-IPTables-IPv4总体架构"><a href="#二、Netfilter-IPTables-IPv4总体架构" class="headerlink" title="二、Netfilter/IPTables-IPv4总体架构"></a>二、Netfilter/IPTables-IPv4总体架构</h2><p>　　Netfilter主要通过表、链实现规则，可以这么说，Netfilter是表的容器，表是链的容器，链是规则的容器，最终形成对数据报处理规则的实现。<br>　　详细地说，Netfilter/IPTables的体系结构可以分为三个大部分：</p><h3 id="1-Netfilter的HOOK机制"><a href="#1-Netfilter的HOOK机制" class="headerlink" title="1. Netfilter的HOOK机制"></a><strong>1. Netfilter的HOOK机制</strong></h3><p>　　Netfilter的通用框架不依赖于具体的协议，而是为每种网络协议定义一套HOOK函数。这些HOOK函数在数据报经过协议栈的几个关键点时被调用，在这几个点中，协议栈将数据报及HOOK函数标号作为参数，传递给Netfilter框架。</p><p>　　对于它在网络堆栈中增加的这些HOOK，内核的任何模块可以对每种协议的一个或多个HOOK进行注册，实现挂接。这样当某个数据报被传递给Netfilter框架时，内核能检测到是否有任何模块对该协议和HOOK函数进行了注册。若注册了，则调用该模块的注册时使用的回调函数，这样这些模块就有机会检查、修改、丢弃该数据报及指示Netfilter将该数据报传入用户空间的队列。</p><p>　　这样，HOOK提供了一种方便的机制：在数据报通过Linux内核的不同位置上截获和操作处理数据报。</p><h3 id="2-iptables基础模块"><a href="#2-iptables基础模块" class="headerlink" title="2.iptables基础模块"></a><strong>2.iptables基础模块</strong></h3><p>　　iptables基础模块实现了三个表来筛选各种数据报，具体地讲，Linux2.4内核提供的这三种数据报的处理功能是相互间独立的模块，都基于Netfilter的HOOK函数和各种表、链实现。这三个表包括：filter表，nat表以及mangle表。</p><h3 id="3-具体功能模块"><a href="#3-具体功能模块" class="headerlink" title="3.具体功能模块"></a><strong>3.具体功能模块</strong></h3><ol><li>数据报过滤模块</li><li>连接跟踪模块（Conntrack）</li><li>网络地址转换模块（NAT）</li><li>数据报修改模块（mangle）</li><li>其它高级功能模块</li></ol><p>于是，Netfilter/IPTables总体架构如下图1所示：</p><div align="center"><p><img src="/img/note_06/01.jpg" alt="Netfilter/Iptables-Ipv4总体架构"></p></div><h2 id="三、HOOK的实现"><a href="#三、HOOK的实现" class="headerlink" title="三、HOOK的实现"></a>三、HOOK的实现</h2><h3 id="1-Netfilter-IPv4中的HOOK"><a href="#1-Netfilter-IPv4中的HOOK" class="headerlink" title="1.Netfilter-IPv4中的HOOK"></a><strong>1.Netfilter-IPv4中的HOOK</strong></h3><p>　　Netfilter模块需要使用HOOK来启用函数的动态钩接，它在IPv4中定义了五个HOOK（位于文件include/linux/netfilter_ipv4.h，Line 39），分别对应0-4的hooknum，简单地说，数据报经过各个HOOK的流程如下：<br>　　数据报从进入系统，进行IP校验以后，首先经过第一个HOOK函数NF_IP_PRE_ROUTING进行处理；然后就进入路由代码，其决定该数据报是需要转发还是发给本机的；若该数据报是发被本机的，则该数据经过HOOK函数NF_IP_LOCAL_IN处理以后然后传递给上层协议；若该数据报应该被转发则它被NF_IP_FORWARD处理；经过转发的数据报经过最后一个HOOK函数NF_IP_POST_ROUTING处理以后，再传输到网络上。本地产生的数据经过HOOK函数NF_IP_LOCAL_OUT 处理后，进行路由选择处理，然后经过NF_IP_POST_ROUTING处理后发送出去。<br>　　总之，这五个HOOK所组成的Netfilter-IPv4数据报筛选体系如图：（注：下面所说Netfilter/IPTables均基于IPv4，不再赘述）</p><div align="center"><p><img src="/img/note_06/02.jpg" alt="数据报筛选体系"></p></div><p>详细地说，各个HOOK及其在IP数据报传递中的具体位置如图：</p><div align="center"><p><img src="/img/note_06/03.jpg" alt="数据报筛选体系（详）"></p></div><ul><li><p><em>NF_IP_PRE_ROUTING (0)</em><br>数据报在进入路由代码被处理之前，数据报在IP数据报接收函数ip_rcv()（位于net/ipv4/ip_input.c，Line379）的最后，也就是在传入的数据报被处理之前经过这个HOOK。在ip_rcv()中挂接这个HOOK之前，进行的是一些与类型、长度、版本有关的检查。<br>经过这个HOOK处理之后，数据报进入ip_rcv_finish()（位于net/ipv4/ip_input.c，Line306），进行查路由表的工作，并判断该数据报是发给本地机器还是进行转发。<br>在这个HOOK上主要是对数据报作报头检测处理，以捕获异常情况。<br>涉及功能（优先级顺序）：Conntrack(-200)、mangle(-150)、DNAT(-100)</p></li><li><p><em>NF_IP_LOCAL_IN (1)</em><br>目的地为本地主机的数据报在IP数据报本地投递函数ip_local_deliver()（位于net/ipv4/ip_input.c，Line290）的最后经过这个HOOK。<br>经过这个HOOK处理之后，数据报进入ip_local_deliver_finish()（位于net/ipv4/ip_input.c，Line219）。<br>这样，iptables模块就可以利用这个HOOK对应的INPUT规则链表来对数据报进行规则匹配的筛选了。防火墙一般建立在这个HOOK上。<br>涉及功能：mangle(-150)、filter(0)、SNAT(100)、Conntrack(INT_MAX-1)</p></li><li><p><em>NF_IP_FORWARD (2)</em><br>目的地非本地主机的数据报，包括被NAT修改过地址的数据报，都要在IP数据报转发函数ip_forward()（位于net/ipv4/ip_forward.c，Line73）的最后经过这个HOOK。<br>经过这个HOOK处理之后，数据报进入ip_forward_finish()（位于net/ipv4/ip_forward.c，Line44）<br>另外，在net/ipv4/ipmr.c中的ipmr_queue_xmit()函数（Line1119）最后也会经过这个HOOK。（ipmr为多播相关，估计是在需要通过路由转发多播数据时的处理）。<br>这样，IPTables模块就可以利用这个HOOK对应的FORWARD规则链表来对数据报进行规则匹配的筛选了。<br>涉及功能：mangle(-150)、filter(0)</p></li><li><p><em>NF_IP_LOCAL_OUT (3)</em><br>本地主机发出的数据报在IP数据报构建/发送函数ip_queue_xmit()（位于net/ipv4/ip_output.c，Line339）、以及ip_build_and_send_pkt()（位于net/ipv4/ip_output.c，Line122）的最后经过这个HOOK。（在数据报处理中，前者最为常用，后者用于那些不传输有效数据的SYN/ACK包）。<br>经过这个HOOK处理后，数据报进入ip_queue_xmit2()（位于net/ipv4/ip_output.c，Line281）。<br>另外，在ip_build_xmit_slow()（位于net/ipv4/ip_output.c，Line429）和ip_build_xmit()（位于net/ipv4/ip_output.c，Line638）中用于进行错误检测；在igmp_send_report()（位于net/ipv4/igmp.c，Line195）的最后也经过了这个HOOK，进行多播时相关的处理。<br>这样，IPTables模块就可以利用这个HOOK对应的OUTPUT规则链表来对数据报进行规则匹配的筛选了。<br>涉及功能：Conntrack(-200)、mangle(-150)、DNAT(-100)、filter(0)</p></li><li><p><em>NF_IP_POST_ROUTING (4)</em><br>所有数据报，包括源地址为本地主机和非本地主机的，在通过网络设备离开本地主机之前，在IP数据报发送函数ip_finish_output()（位于net/ipv4/ip_output.c，Line184）的最后经过这个HOOK。<br>经过这个HOOK处理后，数据报进入ip_finish_output2()（位于net/ipv4/ip_output.c，Line160）另外，在函数ip_mc_output()（位于net/ipv4/ip_output.c，Line195）中在克隆新的网络缓存skb时，也经过了这个HOOK进行处理。<br>涉及功能：mangle(-150)、SNAT(100)、Conntrack(INT_MAX)</p></li></ul><p>其中，入口为net_rx_action()（位于net/core/dev.c，Line1602），作用是将数据报一个个地从CPU的输入队列中拿出，然后传递给协议处理例程。<br>出口为dev_queue_xmit()（位于net/core/dev.c，Line1035），这个函数被高层协议的实例使用，以数据结构struct sk_buff *skb的形式在网络设备上发送数据报。</p><h3 id="2-HOOK的调用"><a href="#2-HOOK的调用" class="headerlink" title="2.HOOK的调用"></a><strong>2.HOOK的调用</strong></h3><p>　　HOOK的调用是通过宏NF_HOOK实现的，其定义位于include/linux/netfilter.h，Line122：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_HOOK(pf, hook, skb, indev, outdev, okfn) /</span></span><br><span class="line">(list_empty(&amp;nf_hooks[(pf)][(hook)])    /</span><br><span class="line">? (okfn)(skb)   /</span><br><span class="line">: nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn)))</span><br></pre></td></tr></table></figure><p>　　这里先调用list_empty函数检查HOOK点存储数组nf_hooks是否为空，为空则表示没有HOOK注册，则直接调用okfn继续处理。如果不为空，则转入nf_hook_slow()函数。<br>nf_hook_slow()函数（位于net/core/netfilter.c，Line449）的工作主要是读nf_hook数组遍历所有的nf_hook_ops结构，并调用nf_hookfn()处理各个数据报。<br>即HOOK的调用过程如图:</p><div align="center"><p><img src="/img/note_06/04.jpg" alt="HOOK的调用过程"></p></div><p>下面说明一下NF_HOOK的各个参数：</p><ul><li>pf：协议族标识，相关的有效协议族列表位于include/linux/socket.h，Line 178。对于IPv4，应该使用协议族PF_INET；</li><li>hook：HOOK标识，即前面所说5个HOOK对应的hooknum；</li><li>skb：是含有需要被处理包的sk_buuff数据结构的指针。sk_buff是Linux网络缓存，指那些linux内核处理IP分组报文的缓存，即套接字缓冲区。</li></ul><p>　　网卡收到IP分组报文后，将它们放入sk_buff，然后再传送给网络堆栈，网络堆栈几乎一直要用到sk_buff。其定义在include/linux/skbuff.h，Line 129，下面列出我认为对分析有意义的部分成员：</p><ul><li><p><code>struct sock *sk;</code>：指向创建分组报文的socket;</p></li><li><p><code>struct timeval stamp;</code>：分组报文到达系统的时间;</p></li><li><p>下面是三个union，存放的是各层中各种协议的报文头指针：</p><ul><li>h对应传输层的报头</li><li>nh对应网络层的报头</li><li>mac对应MAC层的报头<ul><li><code>unsigned int len;</code>：套接字缓存所代表的报文长度，即从<code>unsigned char *data;</code>的位置算起的当前有效报文长度。</li><li><code>unsigned char pkt_type;</code>：表示报文的类型，具体类型定义在include/linux/if_packet.h，Line24：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACKET_HOST     0       <span class="comment">/* To us 发送到本机的报文*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACKET_BROADCAST    1       <span class="comment">/* To all   广播报文    */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACKET_MULTICAST    2       <span class="comment">/* To group  多播报文   */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACKET_OTHERHOST    3       <span class="comment">/* To someone else 表示目的地非本机但被本机接收的报文 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACKET_OUTGOING     4       <span class="comment">/* Outgoing of any type 离开本机的报文 */</span></span></span><br><span class="line"><span class="comment">/* These ones are invisible by user level */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACKET_LOOPBACK     5       <span class="comment">/* MC/BRD frame looped back  本机发给自己的报文*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACKET_FASTROUTE    6       <span class="comment">/* Fastrouted frame 快速路由报文 */</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>indev：输入设备，收到数据报的网络设备的net_device数据结构指针，即数据报到达的接口。</p><ul><li>用于NF_IP_PRE_ROUTING和NF_IP_LOCAL_IN两个HOOK</li></ul></li><li><p>outdev：输出设备，数据报离开本地所要使用的网络设备的net_device数据结构指针。</p><ul><li>用于NF_IP_LOCAL_OUT和NF_IP_POST_ROUTING两个HOOK</li><li>注意：在通常情况下，在一次HOOK调用中，indev和outdev中只有一个参数会被使用</li></ul></li><li><p>okfn：下一步要处理的函数。即如果有HOOK函数，则处理完所有的HOOK函数，且所有向该HOOK注册过的筛选函数都返回NF_ACCEPT时，调用这个函数继续处理；如果没有注册任何HOOK，则直接调用此函数。其5个参数将由宏NF_HOOK传入。</p></li></ul><h3 id="3-HOOK点的实现"><a href="#3-HOOK点的实现" class="headerlink" title="3. HOOK点的实现"></a><strong>3. HOOK点的实现</strong></h3><p>　　对应于各个不同协议的不同HOOK点是由一个二维数组nf_hooks存储的（位于net/core/netfilter.c，Line 47），具体的HOOK点则由数据结构nf_hook_ops（位于include/linux/netfilter.h，Line 44）实现。如图:</p><div align="center"><p><img src="/img/note_06/05.jpg" alt="HOOK点的实现"></p></div><p>其中，nf_hook_ops成员中：</p><ul><li><code>int priority;</code> priority值越小，优先级越高，相关优先级在include/linux/netfilter_ipv4.h，Line52中枚举定义：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> NF_IP_hook_priorities &#123;</span><br><span class="line">    NF_IP_PRI_FIRST = INT_MIN,</span><br><span class="line">    NF_IP_PRI_CONNTRACK= <span class="number">-200</span>,</span><br><span class="line">    NF_IP_PRI_MANGLE = <span class="number">-150</span>,</span><br><span class="line">    NF_IP_PRI_NAT_DST = <span class="number">-100</span>,</span><br><span class="line">    NF_IP_PRI_FILTER = <span class="number">0</span>,</span><br><span class="line">    NF_IP_PRI_NAT_SRC = <span class="number">100</span>,</span><br><span class="line">    NF_IP_PRI_LAST = INT_MAX,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>nf_hookfn *hook;</code>：为处理函数的指针，其函数指针类型定义位于include/linux/netfilter.h，Line38，为：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">nf_hookfn</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> hooknum,</span></span></span><br><span class="line"><span class="function"><span class="params">                   struct sk_buff *skb,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> struct net_device *in,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> struct net_device *out,</span></span></span><br><span class="line">                   int (*okfn)(struct sk_buff *));</span><br></pre></td></tr></table></figure><p>　　这是nf_hook_ops中最关键的成员，其五个参数分别对应前面所解释的NF_HOOK中第2到6个参数。调用HOOK的包筛选函数必须返回特定的值，这些值以宏的形式定义于头文件include/linux/netfilter.h中（Line15），分别为：</p><ul><li><p>NF_DROP(0)：丢弃此数据报，禁止包继续传递，不进入此后的处理流程；</p></li><li><p>NF_ACCEPT(1)：接收此数据报，允许包继续传递，直至传递到链表最后，而进入okfn函数；<br>以上两个返回值最为常见</p></li><li><p>NF_STOLEN(2)：数据报被筛选函数截获，禁止包继续传递，但并不释放数据报的资源，这个数据报及其占有的sk_buff仍然有效（e.g. 将分片的数据报一一截获，然后将其装配起来再进行其他处理）； </p></li><li><p>NF_QUEQUE(3)：将数据报加入用户空间队列，使用户空间的程序可以直接进行处理；</p><ul><li>在nf_hook_slow()以及nf_reinject()函数（位于net/core/netfilter.c，Line449，Line505）中，当由调用nf_iterate()函数（位于net/core/netfilter.c，Line339，作用为遍历所有注册的HOOK函数，并返回相应的NF_XX值）而返回的verdict值为NF_QUEUE时（即当前正在执行的这个HOOK筛选函数要求将数据报加入用户空间队列），会调用nf_queue()函数（位于net/core/netfilter.c，Line407）</li><li>nf_queue()函数将这个数据报加入用户空间队列nf_info（位于include/linux/netfilter.h，Line77），并保存其设备信息以备用</li></ul></li><li><p>NF_REPEAT(4)：再次调用当前这个HOOK的筛选函数，进行重复处理。</p></li></ul><h3 id="4-HOOK的注册和注销"><a href="#4-HOOK的注册和注销" class="headerlink" title="4. HOOK的注册和注销"></a><strong>4. HOOK的注册和注销</strong></h3><p>　　HOOK的注册和注销分别是通过nf_register_hook()函数和nf_unregister_hook()函数（分别位于net/core/netfilter.c，Line60，76）实现的，其参数均为一个nf_hook_ops结构，二者的实现也非常简单。<br>　　nf_register_hook()的工作是首先遍历nf_hools[][]，由HOOK的优先级确定在HOOK链表中的位置，然后根据优先级将该HOOK的nf_hook_ops加入链表；<br>　　nf_unregister_hook()的工作更加简单，其实就是将该HOOK的nf_hook_ops从链表中删除。</p><h2 id="四、iptables系统"><a href="#四、iptables系统" class="headerlink" title="四、iptables系统"></a>四、iptables系统</h2><h3 id="1-表－规则系统"><a href="#1-表－规则系统" class="headerlink" title="1. 表－规则系统"></a><strong>1. 表－规则系统</strong></h3><p>　　IPTables是基于Netfilter基本架构实现的一个可扩展的数据报高级管理系统，利用table、chain、rule三级来存储数据报的各种规则。系统预定义了三个table：</p><ul><li><p>filter：数据报过滤表（文件net/ipv4/netfilter/iptable_filter.c）<br>监听NF_IP_LOCAL_IN、NF_IP_FORWARD和NF_IP_LOCAL_OUT三个HOOK，作用是在所有数据报传递的关键点上对其进行过滤。</p></li><li><p>nat：网络地址转换表<br>监听NF_IP_PRE_ROUTING、NF_IP_POST_ROUTING和NF_IP_LOCAL_OUT三个HOOK，作用是当新连接的第一个数据报经过时，在nat表中决定对其的转换操作；而后面的其它数据报都将根据第一个数据报的结果进行相同的转换处理。</p></li><li><p>mangle：数据报修改表（位于net/ipv4/netfilter/iptable_mangle.c）</p></li></ul>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netfilter </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KMP算法代码案例</title>
      <link href="/2018/05/14/%E7%AC%94%E8%AE%B0/0eKMP%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/"/>
      <url>/2018/05/14/%E7%AC%94%E8%AE%B0/0eKMP%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">computer_prefix</span><span class="params">(<span class="keyword">char</span> *str_p,<span class="keyword">int</span> *tt)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == str_p)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">strlen</span>(str_p);</span><br><span class="line"></span><br><span class="line">    tt[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; str_p[j]!=str_p[i])</span><br><span class="line">            j=tt[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(str_p[j]==str_p[i])</span><br><span class="line">            j=j+<span class="number">1</span>;</span><br><span class="line">        tt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp_matcher</span><span class="params">(<span class="keyword">char</span> *<span class="keyword">str_t</span>,<span class="keyword">char</span> *str_p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> ==<span class="keyword">str_t</span> || <span class="literal">NULL</span> == str_p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(<span class="keyword">str_t</span>);</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">strlen</span>(str_p);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *tt = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*m);</span><br><span class="line">    computer_prefix(str_p,tt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == tt)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf tt</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"tt[%d]=%d "</span>,i,tt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; <span class="keyword">str_t</span>[i] != str_p[j])</span><br><span class="line">            j = tt[j<span class="number">-1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">str_t</span>[i] == str_p[j])</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span>(j == m)&#123;</span><br><span class="line">            flag++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"positon:%d\n"</span>,i-j+<span class="number">1</span>);</span><br><span class="line">            j = tt[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(tt);</span><br><span class="line">    tt = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str_p=<span class="string">"ababaca"</span>;</span><br><span class="line">    <span class="keyword">char</span> *<span class="keyword">str_t</span>=<span class="string">"aababacaafababaca"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"orgin_str:%s\n"</span>,<span class="keyword">str_t</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"find_str:%s\n"</span>,str_p);</span><br><span class="line">    <span class="keyword">int</span> find_num = kmp_matcher(<span class="keyword">str_t</span>,str_p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"find %d locations\n"</span>,find_num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：算法导论</p>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP和UDP</title>
      <link href="/2018/05/14/%E7%AC%94%E8%AE%B0/03UDP%E5%92%8CTCP/"/>
      <url>/2018/05/14/%E7%AC%94%E8%AE%B0/03UDP%E5%92%8CTCP/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>补码<br>正数：与原码相同<br>负数：取反+1</p><p>校验和：<br>所有数之和，超过0xff即255，就要求其补码作为校验和（取反加1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a[<span class="number">8</span>]=&#123;<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x04</span>,<span class="number">0x05</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0x08</span>&#125;;</span><br><span class="line"> <span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">     sum+=a[i];<span class="comment">//将每个数相加</span></span><br><span class="line">     <span class="keyword">if</span>(sum&gt;<span class="number">0xff</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        sum=~sum;</span><br><span class="line">                  </span><br><span class="line">        sum+=<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">                 </span><br><span class="line">　        &#125;</span><br><span class="line"> sum=sum&amp;<span class="number">0xff</span>; </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1、UDP"><a href="#1、UDP" class="headerlink" title="1、UDP"></a>1、UDP</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>UDP数据报封装成一份IP数据报格式如图<br>IP首部（20字节）-UDP首部（8字节）-UDP数据 （IP数据报）<br>应用程序必须关心IP数据报长度。如果超过网络的MTU，那么久要对IP数据包进行分片。</p><h2 id="1-2-UDP首部（8字节）"><a href="#1-2-UDP首部（8字节）" class="headerlink" title="1.2 UDP首部（8字节）"></a>1.2 UDP首部（8字节）</h2><p>16位源端口号 16目的端口号  （4字节）<br>16位UDP长度  16位UDP校验和 （4字节）<br>数据</p><p>UDP长度指：UDP首部和UDP数据的字节长度</p><h2 id="1-3-UDP校验和"><a href="#1-3-UDP校验和" class="headerlink" title="1.3 UDP校验和"></a>1.3 UDP校验和</h2><p>UDP校验和覆盖UDP首部和UDP数据。UDP和TCP在手不中都有覆盖它们首部和数据的校验和。UDP的校验和是<code>可选的</code>。TCP的校验和是<code>必需的</code>。</p><p>UDP校验和不同之处：1、UDP数据报的长度可以为奇数字节，但是校验和算法是把如干个16bit字节相加。解决方法是必须时在最后增加填充字节0，这是为了校验和的计算。<br>2、UDP数据报和TCP段都包含一个12字节长的伪首部，它是为了计算校验和而设置的。伪首部包含IP首部的一些字段。器目的是让UDP两次检查数据是否已经正确到达目的地。</p><p>UDP伪首部：<br>32位源IP地址<br>32位目的IP地址   </p><p>UDP校验和是一个端到端的校验和。它由发送端计算，然后由接收端验证。其目的是为了发现UDP首部和数据在发送端和接收端之间发生的任何改动。</p><p>接收方和发送方，伪首部中，源IP地址和目的IP交换，伪首部和UDP首部中的其他字段都是相同的，就像数据回显一样。然而UDP校验和（事实上，TCP/IP协议簇中的所有校验和）是简单的16bit和。它们检测不出交换两个16bit的差错。</p><p>根据一些数据统计：TCP发生的校验和差错的比例比UDP相对要高得多，可能原因是因为该系统中的TCP连接经常是“远程”连接（经过许多路由器和网桥等中间设备），而UDP一般为<code>本地通信</code>。</p><h2 id="11-5-IP分片"><a href="#11-5-IP分片" class="headerlink" title="11.5 IP分片"></a>11.5 IP分片</h2><p>物理网络层一般要限制每次发送数据帧的最大长度。任何时候IP层接收到一份要发送的IP数据报时，它要判断向本地哪个接口发送数据（选路），并查询该接口获得其MTU。IP把MTU与数据报长度进行比较，如果需要则进行分片。分片可以发生在原始发送端主机上，也可以发生在中间路由器上。</p><p>把一份IP数据报分片后，之后到达目的地才进行重新组装（这里的重新组装与其他网络协议不同，它们要就在下一站就进行重新组装，而不是在最终目的地）。重新组装由目的端的IP层来完成。其目的是使分片和重新组装的过程对运输层（TCP和UDP）是透明的。已经分片过的数据报有可能会再次分片（可能不止一次）。IP首部中包含的数据为分片和重组提供了足够的信息。</p><p>对于发送端发送的每份IP数据报来说，其标识字段都包含一个为抑制。该值在数据报分片时被复制到每个片中。标识字段用其中一个bit来表示“更多的片”。除了最后一片外，其他每个组成数据报的片都要把该bit置1。</p><p>分片举例：<br>IP首部(20字节)  UDP首部(8字节)  UDP数据(1473字节)<br>分段<br>IP首部(20字节) UDP首部(8字节)  (1472字节)  IP首部(20字节)(1字节)</p><p>注：IP首部(20字节) UDP首部(8字节)  (1472字节) 分组<br>    IP首部(20字节)(1字节) 分组</p><h2 id="11-6-ICMP不可达差错（需分片）"><a href="#11-6-ICMP不可达差错（需分片）" class="headerlink" title="11.6 ICMP不可达差错（需分片）"></a>11.6 ICMP不可达差错（需分片）</h2><p>发送ICMP不可达差错的另一种情况是，当路由器收到一份需要分片的数据报，而在IP首部又设置不分片（DF）的标志比特，如果某个程序需要判断到达目的端的路途中最小MTU是多少，称作路径MTU发现机制，那么这个差错就可以被改程序使用。</p><p>这种情况的ICMP报文格式如图</p><table><thead><tr><th align="center">0-7</th><th align="center">8-15</th><th align="center">16-32</th></tr></thead><tbody><tr><td align="center">类型(3)</td><td align="center">代码(4)</td><td align="center">校验和()</td></tr><tr><td align="center">未用(必须为0)()())()()(()()()()</td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP/IP入门经典</title>
      <link href="/2018/05/14/%E7%AC%94%E8%AE%B0/05TCP-IP%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
      <url>/2018/05/14/%E7%AC%94%E8%AE%B0/05TCP-IP%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TCP-IP入门经典"><a href="#TCP-IP入门经典" class="headerlink" title="TCP/IP入门经典"></a>TCP/IP入门经典</h1><h2 id="第1章-TCP-IP基础"><a href="#第1章-TCP-IP基础" class="headerlink" title="第1章 TCP/IP基础"></a>第1章 TCP/IP基础</h2><p>3、TCP/IP特性：</p><blockquote><p>逻辑编址;<br>路由选择<br>名称解析<br>错误控制和流量控制<br>应用支持</p></blockquote><p>（1）、逻辑编址<br>&emsp;&emsp;当传输介质随计算机越来越普及时，物理地址模式不能有效地发挥作用，网络管理员经常使用设备（比如路由器）将网络分段，以减少网络的拥堵。TCP/IP通过逻辑编址提供了这样的子网化能力。逻辑地址是一个通过网络软件来配置的地址。在TCP/IP中，计算机的逻辑地址称为IP地址。<br>&emsp;&emsp;一个IP地址包括：</p><blockquote><p>一个识别网络的网络ID数值<br>一个识别网络中子网的子网ID数值<br>一个识别子网中计算机的主机ID数值</p></blockquote><p>通过ARP和RARP进行逻辑地址和物理地址之间的转换。</p><h2 id="第2章-TCP-IP的工作方式"><a href="#第2章-TCP-IP的工作方式" class="headerlink" title="第2章 TCP/IP的工作方式"></a>第2章 TCP/IP的工作方式</h2><h4 id="2-1、TCP-IP协议系统"><a href="#2-1、TCP-IP协议系统" class="headerlink" title="2.1、TCP/IP协议系统"></a><strong>2.1、TCP/IP协议系统</strong></h4><p>&emsp;&emsp;TCP/IP协议必须负责完成以下任务：</p><blockquote><ul><li>把消息分解为可管理的数据块，并且这些数据块能够有效地通过传输介质</li><li>与网络适配器硬件连接。</li><li>寻址，即发送端计算机必须能够定位到接收数据的计算机，接收计算机必须能够是被自己要接收的数据</li><li>将数据路由到目的的计算机所在的子网，即使源子网和目的子网分处不同的物理网络。</li><li>执行错误控制、流量控制和确认：对可靠的通信而言，发送和接收计算机必须能够发现并纠正传输错误，并控制数据流。</li><li>从应用程序接收数据并传输到网络</li><li>从网络接收数据并传输到应用程序。</li></ul></blockquote><p>&emsp;&emsp;为了实现上述功能，TCP/IP的创建者使用模块化的设计。TCP/IP协议系统划分为不同的组件。这些组件从理论上来说是能够相互独立地是实现自己的功能。每个组件分别负责通信过程的一个步骤。<br>&emsp;&emsp;TCP/IP模型的协议层:</p><table><thead><tr><th align="center">应用层</th></tr></thead><tbody><tr><td align="center"><strong>传输层</strong></td></tr><tr><td align="center"><strong>网际层</strong></td></tr><tr><td align="center"><strong>网络访问层</strong></td></tr></tbody></table><blockquote><ul><li><strong>网络访问层：</strong>提供了与物理网络连接的接口。针对传输介质设置<code>数据格式</code>，根据硬件的<code>物理地址</code>实现<code>数据的寻址</code>，对数据在物理网络中的传输提供<code>错误控制</code>。</li><li><strong>网际层：</strong>提供独立与硬件的<code>逻辑寻址</code>，从而让数据能够在具有不同物理结构的子网之间传力，提供路由功能来降低流量，支持网间的数据传递（术语“网间”（internetwork）指的是多个局域网互相连接而形成的较大的网络，比如大公司的网络或Internet）。实现物理地址（问你过来访问层使用的地址）和逻辑地址的转换。</li><li><strong>传输层：</strong>为网络提供了<code>流量控制</code>，<code>错误控制</code>和<code>确认服务</code>。从到网络应用程序的接口。</li><li><strong>应用层：</strong>为网络<code>排错</code>，<code>文件传输</code>，<code>远程控制</code>和Internet操作提供了应用程序，还支持应用编程<code>接口</code>（API），从而使得针对特定操作系统编写的程序能够提供访问网络。</li></ul></blockquote><h4 id="2-2、TCP-IP和OSI模型"><a href="#2-2、TCP-IP和OSI模型" class="headerlink" title="2.2、TCP/IP和OSI模型"></a><strong>2.2、TCP/IP和OSI模型</strong></h4><p>&emsp;&emsp;<code>OSI(开放系统互连)</code>是<code>ISO(国际标准化组织)</code>为了标准化网络协议系统做出的规范，旨在提高网络互连性，并且方便软件开发人员以一种开放方式来使用协议标准。</p><table><thead><tr><th align="center">TCP/IP</th><th align="center">OSI</th></tr></thead><tbody><tr><td align="center">应用层</td><td align="center">应用层</td></tr><tr><td align="center"></td><td align="center">表示层</td></tr><tr><td align="center"></td><td align="center">会话层</td></tr><tr><td align="center">传输层</td><td align="center">传输层</td></tr><tr><td align="center">网际层</td><td align="center">网络层</td></tr><tr><td align="center">网络访问层</td><td align="center">数据链路层</td></tr><tr><td align="center"></td><td align="center">物理层</td></tr><tr><td align="center">&emsp;&emsp;OSI模型7层:</td><td align="center"></td></tr></tbody></table><blockquote><ul><li><strong>物理层：</strong>把数据转换为传输介质上的电子流或模拟脉冲，并且监听数据的传输。</li><li><strong>数据链路层：</strong>提供与网络适配器相连的接口，维护子网的逻辑连接。</li><li><strong>网络层：</strong>支持逻辑寻址与路由选择</li><li><strong>传输层：</strong>为网络提供错误控控制和数据流控制</li><li><strong>会话层：</strong>在计算机的通信应用程序之间建立会话</li><li><strong>表示层：</strong>把数据转换为标准格式，管理数据加密和压缩。</li><li><strong>应用层：</strong>为应用程序提供网络接口，支持文件传输、通信等功能的网络应用。</li></ul></blockquote><p><strong>注</strong>：TCP/IP模型和OSI模型都是标准，而不是实现。<br>TCP/IP的具体实现没有严格遵守上述两个表格模型。</p><p>TCP/IP协议族按照层次由上到下，层层包装。最上面的是应用层，这里面有http，ftp,等等我们熟悉的协议。而第二层则是传输层，著名的TCP和UDP协议就在这个层次。第三层是网络层，IP协议就在这里，它负责对数据加上IP地址和其他的数据以确定传输的目标。第四层是数据链路层，这个层次为待传送的数据加入一个以太网协议头，并进行CRC编码，为最后的数据传输做准备。</p><h4 id="2-3、数据包"><a href="#2-3、数据包" class="headerlink" title="2.3、数据包"></a><strong>2.3、数据包</strong></h4><p>&emsp;&emsp;数据包在每一层具有不用的形式和名称<br>&emsp;&emsp;数据包在每层的名称：</p><blockquote><ul><li>在应用层生产的数据包被称为<strong><code>消息</code></strong>。</li><li>在传输层生产的数据包封装了应用层得消息，如果它来自于传输层的TCP协议，就被称为<strong><code>分段</code></strong>；如果来自传输层的UDP协议，就被称为<strong><code>数据报</code></strong>。</li><li>在网际层的数据包封装了传输层的片段，被称为<strong><code>数据报</code></strong>。</li><li>在网络访问层的数据包封装数据包（而且可能对其进行再分解），被称为<strong><code>帧</code></strong>。帧被访问层里的最低子层转化为<strong><code>比特流</code></strong>。</li></ul></blockquote><h4 id="2-4-TCP-IP网络概述"><a href="#2-4-TCP-IP网络概述" class="headerlink" title="2.4 TCP/IP网络概述"></a><strong>2.4 TCP/IP网络概述</strong></h4><p>&emsp;&emsp;图2.4描述了基本的TCP/IP协议连网系统。当然，在完整的数据包里还包括其他的协议和服务，图中展示的是最主要的部分。</p><p>基本场景如下：</p><blockquote><ol><li>数据从工作于应用层的协议、网络服务或应用编程接口（API）通过TCP或UDP端口传递到两个传输层协议（TCP或UDP）中的一个。程序可以根据需要通过TCP或UDP访问网络。</li></ol><ul><li>TCP是面向连接的协议。TCP能够确保数据的发送指令，必UDP更可靠，但由于需要进行额外的错误检测和流量控制，必UDP的速度慢。(详见第6章)<ul><li>UDP是面向无连接的协议，比TCP快，但是不可靠，它把错误控制的责任推给了应用。</li></ul></li></ul><ol start="2"><li>数据分段传递到网际层，IP协议在此提供逻辑寻址信息，并且把数据封装为数据报。</li><li>IP数据报进入网络访问层，传递到与物理网络相连接的软件组件。网络访问层创建额一个或多个数据帧，从而进入到物理网络。在像一台网这样的额局域网系统中，帧可以包含从表格里获取物理地址信息，而这些表格是由网际层的ARP维护的（ARP是地址解析协议，IP地址转换为物理地址。）</li><li>数据帧被转化为比特流，通过网络介质进行传输。</li></ol></blockquote><p>&emsp;&emsp;ARP(地址解析协议)，将逻辑地址IP解析成物理地址的协议<br>&emsp;&emsp;DNS(Domain Name System，域名系统)</p><h2 id="第3章-网络访问层"><a href="#第3章-网络访问层" class="headerlink" title="第3章 网络访问层"></a>第3章 网络访问层</h2><p>&emsp;&emsp;网络访问层是最神秘、最不统一的TCP/IP层，它管理为物理网络准备数据所必须的服务于功能，包括：</p><blockquote><ul><li>与计算机网络适配器的连接</li><li>根据合适的访问方式调整数据传输，</li><li>把数据转化为电子流或模拟脉冲的形式，以在传输介质上进行传输。</li><li>对接收到的数据进行错误检查；</li><li>给发送的数据添加错误检查信息，从而让接收端计算机能够对数据进行错误检查。</li></ul></blockquote><p>&emsp;&emsp;TCP/IP<code>数据访问层</code>对应OSI<code>数据链路层</code>和<code>物理层</code>。</p><h4 id="3-2-网络访问层与OIS模型"><a href="#3-2-网络访问层与OIS模型" class="headerlink" title="3.2 网络访问层与OIS模型"></a><strong>3.2 网络访问层与OIS模型</strong></h4><p>&emsp;&emsp;如图3.1所示,TCP/IP网络访问层大致对应OSI的物理成和数据链路层。OSI的物理层负责把数据帧转换为适合与传输介质的比特流，也就是说，OSI物理层管理和同步实际传输的电子或模拟脉冲。在接收端，物理层把这些脉冲重新组合为数据帧。<br>&emsp;&emsp;OSI数据链路层执行两个独立的任务，相应地划分为两个子层。</p><blockquote><ul><li><strong>介质访问控制（MAC）：</strong>这个子层提供与网络适配器连接的接口。实际上，网络适配器驱动程序通常被称为MAC驱动，而网卡在工厂固化的硬件地址通常称为MAC地址。</li><li><strong>逻辑链路控制（LLC）：</strong>这个子层经过子网传递的帧进行错误检查，并且管理子网上通信设备之间的链路。</li></ul></blockquote><p><strong>注意：</strong> NDIS和ODI</p><blockquote><p>在实际的网络协议实现中没忘了驱动程序接口规范（NDIS）和开发数据链路接口（ODI）规范的存在进一步复杂了TCP/IP层与OSI系统之间的区别。NDIS(有Microsoft和3Com公司开发)和ODI(由Apple和Novell开发)的设计目的在于让单个协议栈（比如TCP/IP）使用多个网络是配资，并让单个网络适配器使用多个上传协议，这样可以让上传协议彻底独立于网络访问系统，从而为网络增加了很强的功能，但同时也增加了复杂性，也让系统地介绍软件组件在底层如何交互变得更加困难。</p></blockquote><h4 id="3-3-网络体系"><a href="#3-3-网络体系" class="headerlink" title="3.3 网络体系"></a><strong>3.3 网络体系</strong></h4><p>&emsp;&emsp;网络体系（比如以太网）具有一系列的规范来管理介质访问、物理寻址、计算机与传输介质的交互。在决定网络体系时，实际上是在决定如何设计网络访问层。<br>&emsp;&emsp;网络体系包含对物理网络的定义，以及该物理网络上定义的通信规范。通信细节基于物理细节，所以这些规范通常以一个完整的包出现。这些规范包含以下几个方面。</p><blockquote><ul><li><strong>访问控制：</strong>访问方法是定义了计算机如何共享传输介质的一组规则。为了避免数据的冲突，计算机在传输数据时必须遵守这些规则。</li><li><strong>数据帧格式：</strong>来自于网际层的IP几倍的数据报以预定义的格式封装为数据帧，封装在包头中的数据必须提供在物理网络上传输数据所需要的信息。</li><li><strong>布线类型：</strong>网络锁使用的线缆类型对于其他设计参数具有一定的影响，比如适配器的传递的比特流的电子特性。</li><li><strong>布线规则：</strong>协议、线缆类型和传输的电子特性影响着线缆的最大和最小长度、电缆连接诶器的规范。</li></ul></blockquote><p>&emsp;&emsp;最终要的是，网络访问层以上的协议层不必关心硬件设计的问题。TCP/IP协议栈的设计保证了与硬件交互相关的细节发生在网络访问层，使得TCP/IP能够工作于多种不同的传输介质。</p><p>&emsp;&emsp;网络访问层如下的一些体系：</p><blockquote><ul><li><strong>IEEE 802.3(以太网)：</strong>在大多数办公室和家庭使用的基于线缆的网络。</li><li><strong>IEEE 802.11(无线网络)：</strong>办公室、家庭和咖啡厅使用的无线网络技术</li><li><strong>IEEE 802.16(WiMAX)：</strong>用于移动通信长距离无线连接技术。</li><li><strong>点到点协议（PPP）：</strong> Modem通过电话线进行连接的技术。</li></ul></blockquote><p>&emsp;&emsp;TCP/IP还支持其他一些网络体系。如图3.2所示，协议栈的模块化特性使得在网络访问层里与硬件打交道的软件组件能够为和硬件无关操作的上层提供接口。</p><h4 id="3-4、物理地址"><a href="#3-4、物理地址" class="headerlink" title="3.4、物理地址"></a><strong>3.4、物理地址</strong></h4><p>&emsp;&emsp;ARP和RARP为用户提供了逻辑IP地址与<strong>局域网</strong>上使用的硬件地址建立了一个对应关系。(详见第4章)。<br>&emsp;&emsp;以太网软件使用的地址并不是逻辑IP地址，但这个地址在网际层的接口上与IP地址有映射关系。</p><h4 id="3-5、以太网-802-3"><a href="#3-5、以太网-802-3" class="headerlink" title="3.5、以太网(802.3)"></a><strong>3.5、以太网(802.3)</strong></h4><p>&emsp;&emsp;以太网是目前使用最广泛的<strong><code>局域网</code></strong>技术。以太网使用称为<strong><code>载波监听多路访问/冲突检测（CSMA/CD）</code></strong>的方法，来判断计算机何时可以把数据发送到访问介质。</p><p>&emsp;&emsp;通过使用CSMA/CD，所有计算机都监视传输介质的状态，在传输之前等待线路空闲。如果两台计算机尝试同时发送数据，就会发送冲突，计算机就会停止发送，等待一个随机的时间间隔，然后再次尝试发送。<br>&emsp;&emsp;传统以太网经常使用连续的通走电缆作为传输介质。<br>&emsp;&emsp;现代以太网的形式都是把计算机连接到一个网络设备上（eg 交换机）。</p><h4 id="3-6、剖析以太网帧"><a href="#3-6、剖析以太网帧" class="headerlink" title="3.6、剖析以太网帧"></a><strong>3.6、剖析以太网帧</strong></h4><p>&emsp;&emsp;网络访问层的软件从网际层接收数据包，把它转化符合物理网络规则的形式。在以太网中，网络访问层的软件必须把数据转换成能够通过网络适配器硬件进行转化的形式。</p><p>&emsp;&emsp;以太网软件从网际层接收到数据包之后，执行以下操作：</p><blockquote><ul><li>1、根据需要报网际层的数据分解为较小的块，已复核以太网帧数据段的要求。以太网帧的整体大小必须在64字节与1518字节之间（不包括前导码）。有些系统支持醉倒的帧，最大可以到9000字节。这种大型帧能够改变效率，但存在着兼容性问题，而且并没有得到广泛支持。</li><li>2、把数据块打包成帧。每一帧都包含数据及其他信息，这些信息是以太网网络适配器处理帧所需要的。IEEE802.3以太网帧包含以下内容。<ul><li><strong>前导码：</strong>表示帧起始的一系列比特（共8字节，最后一个字节是帧起始符）。</li><li><strong>目标地址：</strong>接收帧的网络适配器的6字节（48bit）物理地址。</li><li><strong>源地址：</strong>发送帧的网络适配器的6字节（48bit）物理地址。</li><li><strong>可选VLAN标记：</strong>这个可选的16bit字段在802.1q标准中有讲解，其目的是允许多个虚拟LAN可通过同一网络交换机运行。 </li></ul>  <strong>长度：</strong>另个字节，表示数据段的长度。 <ul><li><strong>数据：</strong>帧中传输的数据。</li><li><strong>帧校验序列（FCS）：</strong>帧的4字节(32bit)校验和，FCS是校验数据传输的常见方式。发送方计算帧的循环冗余码校验（CRC）值，把这个值写到帧里。接收方计算机重新计算CRC，与FCS字段的值进行比较，如果两个值不想用，就表示传输过程中发送了数据丢失或改变，这时就需要重新传输这一帧。</li></ul></li><li>3、把数据帧传递给对应于OSI模型物理层的底层组件，后者把帧转换为比特流，并且通过传输介质发送出去。</li></ul></blockquote><p>&emsp;&emsp;以太网上其他网络适配器接收到这个帧，检查其中的目的地址，如果目的地址与网络适配器的地址相匹配，适配器软件就会处理接收到的帧 ，把数据传递给协议栈中较高的层。</p><h2 id="第4章-网际层"><a href="#第4章-网际层" class="headerlink" title="第4章 网际层"></a>第4章 网际层</h2><p>&emsp;&emsp;网际层提供的协议就负责局域网<code>网段之外的传递</code>，其中重要的协议包括<code>IP</code>、<code>ARP</code>和<code>ICMP</code>。</p><h4 id="4-1、寻址与发送"><a href="#4-1、寻址与发送" class="headerlink" title="4.1、寻址与发送"></a><strong>4.1、寻址与发送</strong></h4><p>&emsp;&emsp;上一章中，以太网卡的物理寻址方式适合<code>单个局域网网段</code>。有不间断介质连接在一起的若干台计算机利用物理地址就可以实现所需的功能。只需使用网络访问层的低级协议就可以把数据从网络适配器直接传递给另一个网络适配器。</p><p>使用ARP</p><div align="center"><p><img src="/img/note_05/01.png" alt="图4.1 网关接收去往其他网络的数据报"></p></div>    1. 如果目的地址与源地址在同一个网段，源计算机就把数据包直接发送给目的计算机。IP地址呗ARP即系为物理地址，数据被直接发送到目的网络适配器。2. 如果目的地址与源地址不在一个网段上，就执行如下过程：> a)、直接将数据报发送给网关。网关是位于局域网网段上的一个设备，能够把数据报转发到其他网段（网关基本算路由器）。网关地址呗ARP解析为物理地址，数据被发送到网关的适配器。> b)、数据报通过网关被路由到较高级别的网段（如上图4.1）,再次重复上述过程。如果目的地址在这个新网段里，数据就被发送到目的，否则数据报就会被发送到另一网关。> c)、数据报经过一系列网关被转发到目的网段，目的IP地址被ARP解析为物理地址，数据被发送到目的网络适配器。<p>  为了在复杂的路由式网络中传输数据，网际层协议必须具有以下功能：</p><blockquote><ul><li>识别网络值班费所以计算机；</li><li>提供一种方式来判断何时需要通过网关来传递消息。</li><li>提供一种与硬件无关的方式来是被目的网关，从而让数据报能够高效率地经过路由器到达正确的网段；</li><li>提供一种方式把目标计算机的逻辑IP地址转化为物理地址，让数据能够传输给目的计算机的网络适配器。</li></ul></blockquote><h4 id="4-2、网际协议（IP）"><a href="#4-2、网际协议（IP）" class="headerlink" title="4.2、网际协议（IP）"></a><strong>4.2、网际协议（IP）</strong></h4><p>&emsp;&emsp;IP协议提供了一种分层的、与硬件无关的寻址系统，具有在复杂的路由式网络中传递数据所需的服务。TCP/IP网络上的每一网络适配器都有一个唯一的IP。</p><p>IP地址分为两个部分:</p><blockquote><ul><li>网络ID</li><li>主机ID</li></ul></blockquote><p>分类的寻址系统和CIDR（无类别域间路由选择）寻址。<br>子网划分</p><p>&emsp;&emsp;每一个IP数据报都以一个IP报头开始。源TCP/IP软件构造这个IP报头。目的计算机的TCP/IP软件利用IP报头中封装的信息处理数据。IP报头包含大量信息。包括<code>源IP地址</code>、<code>目的IP地址</code>、<code>数据报长度</code>、<code>IP版本号</code>和对<code>路由器</code>的<code>特殊指令</code>。</p><p>&emsp;&emsp;IP报头的最小长度是20字节，图4.3所示为IP报头的内容。</p><blockquote><ul><li><strong>版本：</strong>这个4位字段表示所使用的IP版本。目前IP版本是4，相应的二进制是0100</li><li><strong>网际报头长度(IHL)：</strong>这4位自读表示IP报头以32位字为单位的长度。IP报头的最小长度是5个32比特字，相应的二进制表示0101。</li><li><strong>服务类型：</strong>源IP能够指定特殊的而路由信息。有些路由器会忽略这个字段的信息。但随着服务质量（Qos）技术的出现，这个字段得到了更多的重视，这个8位字段的主要用途是对等待通过路由器的数据报区分优先级，而目前大多数IP实现把是这个字段全填为0</li><li><strong>总长度：</strong>这个16位的字段表示IP数据报的长度，单位是字节，这个长度包含了IP报头和数据载荷。</li><li><strong>标识：</strong>这个16位的字段是一个依序变大的数值，分配给源IP发出的消息。当传递到IP层的消息太大而不能放到一个数据报里时，IP会把消息查分到多个数据报，并对这些数据报排序分配相同的标识号。接收端利用这些数值重组为原始消息。</li><li><strong>标记：</strong>这个字段表示分段可能性。第1位未使用，其值应该为0.第2位为DF(不分段)，表示是否允许分段，0表示分段，1表示不允许。第3位是MF（更多分段），表示是否还有分段正在传输，设置为0表示没有更多分段需要发送，或是数据报根本没有分段。</li><li><strong>分段位移：</strong>这个13位的字段是一个数值，被赋予每个连续的分段。目的设备IP利用这个值以正确的次序重组分段。这个数值使用的单位是8字节。</li><li><strong>生存时间（TTL）：</strong>这个字段表示数据报在被抛弃之前能够保留的时间（以秒为单位）或路由器跳数。每个路由器都会检查这个字段，并且至少把它减去1，或数据报在路由器中延迟的秒数。当这个字段的值为0时，数据报就会被抛弃。<br>跳数：代表数据报到达目的之前必须经过的路由器的数量。如果数据报在到达目的之前经过了5个路由器，我们就说距离目的有5跳。</li><li><strong>协议：</strong>这个8位的字段表示接收数据载荷的协议，比如协议标识为6（二进制00000110）的数据报会被传递到TCP模块，下面为一些常见的协议标识值。ICMP:1，TCP:6，UDP:17。</li><li><strong>报头校验和：</strong>这个字段包含16位的校验和，只用于检验报头本身的有效性，数据报经过的每个路由器都会对这个值进行重新计算，因为TTL字段的值是在不断变化的。</li><li><strong>源IP地址：</strong>这个32位字段包含了数据报的源IP地址。</li><li><strong>目的IP地址：</strong>这个32位的字段包含了数据报的目的IP地址。目的IP根据这个值检验发送的正确性。</li><li><strong>IP选项：</strong>这个字段支持一些可选的报头设置，主要用于测试、调试和安全的目的。这些选项包括严格源路由（数据报必须经过指定的路由器）、网际时间戳（经过每个路由器时的时间戳记录）和安全限制。</li><li><strong>填充：</strong> IP选项字段的长度不是固定的。填充字段可以提供一些额外的0，从而保证这个报头的长度是32位的整数倍（报头长度必须是32位字的整数倍，因为“网际头长度IHL”字段以32位字为单位表示报头的长度。）</li><li><strong>IP数据载荷：</strong>这个字段一般用于保存传输给TCP或UDP(在传输层)、ICMP或IGMP的数据。数据块的长度不定，可以包含数千字节。</li></ul></blockquote><p>IP寻址：<br>&emsp;&emsp;地址分类：</p><blockquote><ul><li><strong>A类地址：</strong> IP地址的前8位表示网络ID，后24位表示主机ID。32位地址以0开头。</li><li><strong>B类地址：</strong> IP地址的前16位表示网络ID，后16位表示主机ID。32位地址以10开头。</li><li><strong>C类地址：</strong> IP地址的前24位表示网络ID，后8位表示主机ID。32位地址以110开头。</li></ul></blockquote><p>&emsp;&emsp;使用的位数越多，包含的组合就越多。显而易见，A类地址提供了较少的网络ID，但每个网络都具有大量可用的主机ID。计算机和路由器如何判断一个IP地址是A类、B类或C类？TCP/IP地址规则使得地址本身就可以说明其分类，以32为地址的起始。</p><blockquote><p><strong>注意：</strong> D类和E类<br>&emsp;&emsp;Internet规范还定义了特殊用途的D类地址和E类地址，D类地址用于多播。多播是把一个消息发送给网络的子网，这与广播是不同的，后者需要网络上全部节点都进行处理，D类地址最前面4位是1110，对应十进制数值是224<del>249，E类网络是实验性质的，一般不用于生产环境。E类网络地址最前面的5位是11110，对应十进制数值240</del>247。</p></blockquote><p>&emsp;&emsp;网络管理员可以把网络划分为更小的次级网络，这被称为子网。话费子网的是指就是借用主机ID中的一些位，在网络内创建额外的网络。根据前面的分类介绍，我们很容易想到具有大量主机ID的A类和B类地址会广泛使用子网划分技术。当前C类网络也会使用子网划分技术。详见第5章。</p><blockquote><p><strong>注意：</strong>地址是否唯一<br>&emsp;&emsp;从理论上将，Internet上每台计算机都必须有一个唯一的IP地址。在实际应用中，代理服务器软件和NAT设备的使用让未注册和非唯一的地址也可以连接Internet。第12章讲解NAT设备。</p></blockquote><h4 id="4-3、ARP"><a href="#4-3、ARP" class="headerlink" title="4.3、ARP"></a><strong>4.3、ARP</strong></h4><p>&emsp;&emsp;网段上的没太注记在内存中都保存着一个被称为ARP表或ARP缓存的表格，其中包含网段上其他主机IP地址与物理地址对应关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当主机需要向网段上的其他啊主机发送数据时，它会查看ARP缓存来获取目的的物理地址，ARP缓存是动态变化。如果要接收数据的地址当前并不存在与ARP缓存，主机就会发送名为ARP请求帧的广播。</span><br><span class="line">ARP请求帧包含未解析的IP地址，还包含发送这个请求的主机IP地址和物理地址。网段上的其他主机接收到这个ARP请求，拥有这个未解析IP地址的主机会向发出请求的主机发送自己的物理地址。这个新的IP地址和物理地址的对应关系就会添加到请求主机的ARP缓存里。</span><br></pre></td></tr></table></figure><h4 id="4-4、RARP"><a href="#4-4、RARP" class="headerlink" title="4.4、RARP"></a><strong>4.4、RARP</strong></h4><p>&emsp;&emsp;RARP的含义是逆向ARP，当知道IP地址而不知道物理地址使用ARP；而在知道物理地址而不知道IP地址时，则使用RARP。<br>RARP经常与BOOTP协议共同使用来启动无盘工作站。</p><p><strong>注：</strong> BOOTP(启动PROM)</p><blockquote><p>很多网络适配器具有一个空的插槽，支持被称为“启动PROM”的集成电路。计算机一加电，PROM固件就会启动，从网络服务器而不是本地硬盘来读取并加载操作系统，下载到BOOTP设备的操作系统被预配置为特定的IP地址。</p></blockquote><h4 id="4-5、Internet控制消息协议（ICMP）"><a href="#4-5、Internet控制消息协议（ICMP）" class="headerlink" title="4.5、Internet控制消息协议（ICMP）"></a><strong>4.5、Internet控制消息协议（ICMP）</strong></h4><p>&emsp;&emsp;发送到远程计算机的数据通常会经过一个或多个路由器，这些路由器在把数据传输到最终目的地的过程中可能发生多种问题。路由器利用Internet控制消息协议（ICMP）消息把问题通知给源IP，ICMP还有用于其他调试和排错的功能。<br>常见的ICMP消息：</p><blockquote><ul><li><strong>Echo Request（回显请求）和Echo Reply（回显应答）：</strong> ICMP经常被用于测试，比如测试连接的ping命令实际就是在使用ICMP。</li><li><strong>Source Quench（源抑制）：</strong>如果以太告诉计算机向远程计算机发送大量数据，可能会使路由器产生过载。这时路由器可以利用ICMO向源IP发送Source Quench消息，让它降低发送数据的速度。如果必要，还可以向源IP发送额外的源抑制消息。</li></ul></blockquote><blockquote><ul><li><strong>Destination Unreachable（目的不可到达）：</strong>如果路由器收到一个不能传递的数据报，ICMP就会向源IP返回一个Destination Unreachable消息。路由器不能传递消息的原因之一是网络由于设备故障或维修而关闭。</li></ul></blockquote><blockquote><ul><li><strong>Time Exceeded（超时）：</strong>当数据报由于TTL为0而被抛弃时，ICMP就会向源IP发送这个消息。这表示对于当前TTL值来说，到达目标需要经过大多路由器；或者是说明路由表出了问题，导致数据报在同一路由器上连续循环。</li><li>当数据报无线循环且永远不能到达目的地时，就会发生路由环路。3台路由器A,B,C，A-&gt;B发送一个数据报，B-&gt;C，C-&gt;A就会形成路由环路，数据报陷入其中，不断在3台路由器之间循环，知道TTL为0。还有一种是当网络管理员在路由表中设置一条静态路由时，有时就可能导致环路路由。</li><li><strong>Fragmentation Needed（需要分段）：</strong>如果一个数据报的“Don’t Dragment（不可分解）”位被设置为1，而路由器必须要对数据报进行分段才能把它转发到下一台路由器或目的地，这时ICMP就会发出这条消息。</li></ul></blockquote><h4 id="4-6、网际层其他协议"><a href="#4-6、网际层其他协议" class="headerlink" title="4.6、网际层其他协议"></a><strong>4.6、网际层其他协议</strong></h4><p>&emsp;&emsp;用于路由进程的<code>边界网关协议（GBP）</code>和<code>路由信息协议（RIP）</code>。<br>&emsp;&emsp;IPSec协议在IPv4里是可选的，但在IPv6里是必需的。它也工作于网际层，提供一个安全的加密通信。</p><p>&emsp;&emsp;IP提供了一种与硬件无关的寻址系统。<br>&emsp;&emsp;ARP是把IP地址解析为物理地址的协议，RARP是ARP的逆过程。<br>&emsp;&emsp;ICMP是用于诊断和测试的协议。</p><h2 id="第5章-子网划分和CIDR"><a href="#第5章-子网划分和CIDR" class="headerlink" title="第5章 子网划分和CIDR"></a>第5章 子网划分和CIDR</h2><h4 id="5-1、子网"><a href="#5-1、子网" class="headerlink" title="5.1、子网"></a><strong>5.1、子网</strong></h4><p>&emsp;&emsp;子网划分可以将网络分解为被称位子网的较小单元。子网的概念最最早是源自于地址分类系统的。 然后，硬件厂商和Internet社区建立了一种解析地址的新系统，名为CIDR(无类别域间路由)，它需要关心地址类别。</p><h4 id="5-2、划分网络"><a href="#5-2、划分网络" class="headerlink" title="5.2、划分网络"></a><strong>5.2、划分网络</strong></h4><p>&emsp;&emsp;第4章介绍地址分类系统让所有的主机能够识别IP地址中的网络ID，从而把数据包发送个正确的网络。但是根据A类B类C类网络ID来识别网段具有一些局限性。主要是在网络级别之下不能对地址控件进行任何逻辑细分。<br>eg：</p><div align="center"><p><img src="/img/note_05/02.png" alt="图5.1 将数据发送到A类网络"></p></div>  &emsp;&emsp;如上图所示，数据报到达网关，然后传输到99.0.0.0地址控件，但如何要考虑它在这个地址控件中是如何传递的，图示会非常复杂，因为A累网络能够容纳超过1600万台主机。为了在大型网络里实现更高效的数据传输，地址空被话划分为较小的网段（如图5.2）。把网络划分为独立的物理网络能够增加网络的整体性能，也就能够让网络使用更大的地址空间。在这种情况下，地址空间里划分网段的路由器需要适当的指示来决定数据传输到哪里，不能使用网络ID，因为传输到这个网络的数据报具有相同的网络ID（99.0.0.0）,非常麻烦而且不灵活、不实用。唯一可行的解决方法是在网络标ID下，对地址空间进行细分，让注记和路由器能够根据IP地址判断应该把数据发送到哪个网段。子网划分就是在网络ID之下提供了第二层逻辑组织，路由器机能够把数据报发送给网络里的某个子网地址（一般对应于一个网段），而当数据报到达子网自后，就会被ARP解析成物理地址。那么`子网地址`从何而来，32位IP地址已经被划分为`网络ID`和`主机ID`。TCP/IP的设计者借用了主机ID里的一些位来形成子网地址。一个名为`子网掩码`的参数指定地址中的多少位用于`子网ID`，保留多个为作为实际的主机ID。`子网掩码`也是32位二进制值，它的形式能够说明与之相关的`IP地址`的`子网ID`。&emsp;&emsp;在子网网络上，路由器和主机所使用的`路由表`包含了与每个IP地址相关的子网掩码信息（有关路由信息，详见第8章）。&emsp;&emsp;由图5.5可看出，数据报根据网络ID被路由到目标网络，而这个`网络ID`是由`地址类别`决定。当数据报达到目标网络之后，它根据`子网ID`路由到合适的`网段`。在到达这个网段之后，再根据主机ID传输到正确的计算机。<h4 id="5-3、将子网掩码转化为点分十进制标记"><a href="#5-3、将子网掩码转化为点分十进制标记" class="headerlink" title="5.3、将子网掩码转化为点分十进制标记"></a><strong>5.3、将子网掩码转化为点分十进制标记</strong></h4><p>&emsp;&emsp;网络管理员通常把子网掩码作为TCP/IP配置的参数分配给每个主机。如果主机通过DHCP（详见12章）获取IP地址，DHCP服务器就会同时分配一个子网掩码。<br>一个子网内的所有主机应该具有相同的子网ID和子网掩码。为了便于人们使用，子网掩码通常以点分十进制表示。<br>&emsp;&emsp;相比IP地址，<code>子网掩码</code>的转换通常比较简单，对应于地址中的<code>网络ID</code>和<code>子网ID</code>的<code>掩码位是1</code>，代表<code>IP地址</code>里的<code>主机ID</code>掩码位0`。这就意味着1都在掩码的左侧，0都在掩码的右侧（除了极少的例外）。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">子网掩码：</span><br><span class="line">    11111111 11111111 11111111 00000000</span><br><span class="line">    以点分十进制表示：255.255.255.0</span><br><span class="line"></span><br><span class="line">子网掩码：</span><br><span class="line">   11111111 11111111 00000000 00000000</span><br><span class="line">    以点分十进制表示：255.255.0.0</span><br></pre></td></tr></table></figure><h4 id="5-4、使用子网"><a href="#5-4、使用子网" class="headerlink" title="5.4、使用子网"></a><strong>5.4、使用子网</strong></h4><p>&emsp;&emsp;子网掩码决定了网络ID之后又多少位是作为子网ID的，<strong>子网ID的长度不是国定的，取决于子网掩码的值</strong>。子网ID越长，留给主机的ID位数越少。换句话，如果网络上有很多子网，每个自网上的主机容量就会很少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">地址分类：</span><br><span class="line">A类地址：“0”开头  1.0.0.0~126.0.0.0</span><br><span class="line">即：01000000 00000000 00000000 00000000 ~ 01111110 00000000 00000000 00000000</span><br><span class="line">可用的A类网络有126个，每个网络能容纳1亿多个主机</span><br><span class="line">B类地址：“10”开头 128.0.0.0~191.255.255.255</span><br><span class="line">即：10000000 00000000 00000000 00000000 ~ 10111111 11111111 11111111 11111111</span><br><span class="line">可用的B类网络有16382个，每个网络能容纳6万多个主机</span><br><span class="line">C类地址 “110”开头 192.0.0.0~223.255.255.255</span><br><span class="line">即：11000000 00000000 00000000 00000000 ~ 11011111 11111111 11111111 11111111</span><br><span class="line">C类网络可达209万余个，每个网络能容纳254个主机</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>类与掩码</p><blockquote><p>地址类别也决定了子网ID占用使用多少位。比如掩码：<br>11111111 11111111 11100000 00000000<br>指定了网络ID与子网ID一共占19位。如果这个掩码用于一个B类地址（网络ID 16位），那么子网就只有3位。如果它是A类地址（网络ID 8位），子网ID就有11位。<br>子网ID的分配（以及子网掩码的分配），取决于网络的配置。最好的方案，是先规划网络，确定全部网段的数论与位置，然后为每个网段分配一个子网ID。</p></blockquote><table><thead><tr><th>描述</th><th>点分十进制形式</th><th>二进制形式</th></tr></thead><tbody><tr><td><strong>A类地址</strong></td><td></td><td></td></tr><tr><td>默认掩码</td><td>255.0.0.0</td><td>11111111 00000000 00000000 00000000</td></tr><tr><td>1个子网位</td><td>255.128.0.0</td><td>11111111 10000000 00000000 00000000</td></tr><tr><td>2个子网位</td><td>255.192.0.0</td><td>11111111 11000000 00000000 00000000</td></tr><tr><td>3个子网位</td><td>255.224.0.0</td><td>11111111 11100000 00000000 00000000</td></tr><tr><td>4个子网位</td><td>255.240.0.0</td><td>11111111 11110000 00000000 00000000</td></tr><tr><td>5个子网位</td><td>255.248.0.0</td><td>11111111 11111000 00000000 00000000</td></tr><tr><td>6个子网位</td><td>255.252.0.0</td><td>11111111 11111100 00000000 00000000</td></tr><tr><td>7个子网位</td><td>255.254.0.0</td><td>11111111 11111110 00000000 00000000</td></tr><tr><td>8个子网位</td><td>255.255.0.0</td><td>11111111 11111111 00000000 00000000</td></tr><tr><td>9个子网位</td><td>255.255.128.0</td><td>11111111 11111111 10000000 00000000</td></tr><tr><td>10个子网位</td><td>255.255.192.0</td><td>11111111 11111111 11000000 00000000</td></tr><tr><td>11个子网位</td><td>255.255.224.0</td><td>11111111 11111111  11100000 00000000</td></tr><tr><td>12个子网位</td><td>255.255.240.0</td><td>11111111 11111111 11110000 00000000</td></tr><tr><td>13个子网位</td><td>255.255.248.0</td><td>11111111 11111111 11111000 00000000</td></tr><tr><td>14个子网位</td><td>255.255.252.0</td><td>11111111 11111111 11111100 00000000</td></tr><tr><td>15个子网位</td><td>255.255.254.0</td><td>11111111 11111111 11111110 00000000</td></tr><tr><td>16个子网位</td><td>255.255.255.0</td><td>11111111 11111111 11111111 00000000</td></tr><tr><td>17个子网位</td><td>255.255.255.128</td><td>11111111 11111111 11111111 10000000</td></tr><tr><td>18个子网位</td><td>255.255.255.192</td><td>11111111 11111111 11111111 11000000</td></tr><tr><td>19个子网位</td><td>255.255.255.224</td><td>11111111 11111111 11111111 11100000</td></tr><tr><td>20个子网位</td><td>255.255.255.240</td><td>11111111 11111111 11111111 11110000</td></tr><tr><td>21个子网位</td><td>255.255.255.248</td><td>11111111 11111111 11111111 11111000</td></tr><tr><td>22个子网位</td><td>255.255.255.252</td><td>11111111 11111111 11111111 11111100</td></tr><tr><td><strong>B类地址</strong></td><td></td><td></td></tr><tr><td>默认掩码</td><td>255.255.0.0</td><td>11111111 11111111 00000000 00000000</td></tr><tr><td>1个子网位</td><td>255.255.128.0</td><td>11111111 11111111 10000000 00000000</td></tr><tr><td>2个子网位</td><td>255.255.192.0</td><td>11111111 11111111 11000000 00000000</td></tr><tr><td>3个子网位</td><td>255.255.224.0</td><td>11111111 11111111 11100000 00000000</td></tr><tr><td>4个子网位</td><td>255.255.240.0</td><td>11111111 11111111 11110000 00000000</td></tr><tr><td>5个子网位</td><td>255.255.248.0</td><td>11111111 11111111 11111000 00000000</td></tr><tr><td>6个子网位</td><td>255.255.252.0</td><td>11111111 11111111 11111100 00000000</td></tr><tr><td>7个子网位</td><td>255.255.254.0</td><td>11111111 11111111 11111110 00000000</td></tr><tr><td>8个子网位</td><td>255.255.255.0</td><td>11111111 11111111 11111111 00000000</td></tr><tr><td>9个子网位</td><td>255.255.255.128</td><td>11111111 11111111 11111111 10000000</td></tr><tr><td>10个子网位</td><td>255.255.255.192</td><td>11111111 11111111 11111111 11000000</td></tr><tr><td>11个子网位</td><td>255.255.255.224</td><td>11111111 11111111 11111111 11111100</td></tr><tr><td>12个子网位</td><td>255.255.255.240</td><td>11111111 11111111 11111111 11111100</td></tr><tr><td>13个子网位</td><td>255.255.255.248</td><td>11111111 11111111 11111111 11111100</td></tr><tr><td>14个子网位</td><td>255.255.255.252</td><td>11111111 11111111 11111111 11111100</td></tr><tr><td><strong>C类地址</strong></td><td></td><td></td></tr><tr><td>默认掩码</td><td>255.255.255.0</td><td>11111111 11111111 11111111 00000000</td></tr><tr><td>1个子网位</td><td>255.255.255.128</td><td>11111111 11111111 11111111 10000000</td></tr><tr><td>2个子网位</td><td>255.255.255.192</td><td>11111111 11111111 11111111 11000000</td></tr><tr><td>3个子网位</td><td>255.255.255.224</td><td>11111111 11111111 11111111 11100000</td></tr><tr><td>4个子网位</td><td>255.255.255.240</td><td>11111111 11111111 11111111 11110000</td></tr><tr><td>5个子网位</td><td>255.255.255.248</td><td>11111111 11111111 11111111 11111000</td></tr><tr><td>6个子网位</td><td>255.255.255.252</td><td>11111111 11111111 11111111 11111100</td></tr></tbody></table><p><strong>注</strong>： </p><blockquote><p>主机ID不能为全1(保留用于广播)或全0（同城不使用）。</p></blockquote><h4 id="5-5、无类别域间路由（CIDR）"><a href="#5-5、无类别域间路由（CIDR）" class="headerlink" title="5.5、无类别域间路由（CIDR）"></a><strong>5.5、无类别域间路由（CIDR）</strong></h4><p>&emsp;&emsp;地址分类系统相对而言不够灵活，需要使用子网划分系统来更细致地控制地址控件。而无类别域路由（CIDR）在<strong>路由表</strong>中定义地址块时容易修改，更具有灵活性。这种技术不依赖于预定义的8位、16位或24位网络ID，而是使用一个名为CIDR前缀值指定地址中作为网络ID的位数。这个前缀有时也被称为<strong>变长子网掩码（VLSM）</strong>。这个前缀可以位于地址空间的任何位置，让管理者能够以更灵活的方式定义子网，以简便的形式指定地址中网络ID部分与主机ID部分。CIDR标记使用一个斜线（/）分隔符，后面跟一个十进制数值表示地址中网络部分所占的位数。例如CIDR地址205.123.196.183/25中，/25表示地址中25位用于网络ID，相应的子网掩码就是255.255.255.128。</p><p>&emsp;&emsp;CIDR前缀表明了IP地址中前面的多少位对于网络里的全部主机说是一样的。CIDR强大的特性不仅仅能够对网络划分子网，还让ISP或管理员能够把多个连续C类网络聚合或组合为一个实体。这种也行极大的简化了网际路由表。</p><p>&emsp;&emsp;例如：一个ISP可以分配204.21.128.0（11001100 00010101 10000000 00000000）~204.21.255.255（11001100 00010101 11111111 11111111）的全部C类地址，这些网络地址的前17位是一样的，因此，超网掩码是11111111 11111111 10000000 0000000即255.255.128.0。<strong>超网掩码</strong>中0对应的为确定了地址块的范围。因此，支持CIDR路由表只是用一条CIDR条目204.21.128.0/17来引用这些地址的全部范围。</p><p><strong><code>超网掩码：</code></strong>一个32位的二进制值，能够把多个连续网络ID聚合为一个整体。</p><h2 id="第6章-传输层"><a href="#第6章-传输层" class="headerlink" title="第6章 传输层"></a>第6章 传输层</h2><p>&emsp;&emsp;TCP/IP传输层包含很多有用的协议，能够提供数据在网络传输所需要的必要<strong>寻址</strong>信息。但<strong>寻址</strong>和<strong>路由</strong>只是传输层的部分功能。网际层上添加另一层，这层提供的额外必须要特性来使用IP。<br>传输层协议需要提供以下功能：</p><blockquote><ul><li><strong>为网络应用程序提供接口：</strong>也就是为应用程序提供访问网络的途径。设计者希望不仅能够向目的计算机传递数据，还能够向目的计算机上的<code>特定应用</code>传递数据。</li><li><strong>多路复用/多路分解机制：</strong>这里的多路复用表示从不同的应用程序和计算机接收数据，再把数据传递到目的计算机上的接收程序。换句话说，传输层必须 能够同时支持多个网络程序和管理传递给网际层的数据流。在接收端，传输层必须能够从网际层几首数据，把它转发给多个程序，这种功能被吃呢改为多路分解，它可以让一台计算机同时支持多个网络程序，比如一个Web浏览器、一个Email客户端和一个文件共享应用程序。多路复用/多路分解的另一个作用是可以让一个应用程序同时保持与多台计算机的连接。</li><li><strong>错误检查、流量控制和验证：</strong>协议系统需要一种全面机制来确保发送端与接收端之间的数据传输。</li><li><strong>传输控制协议（TCP）：</strong> TCP提供了完善的错误控制和流量控制，能够确保数据正确传输，它是一个面向连接的协议。</li><li><strong>用户数据报协议（UDP）：</strong> UDP只提供了非常基本的错误检查，用于不锈奥TCP精细控制功能的场合，它是一个无连接的协议。</li></ul></blockquote><h4 id="6-2、传输层概念"><a href="#6-2、传输层概念" class="headerlink" title="6.2、传输层概念"></a><strong>6.2、传输层概念</strong></h4><p><strong>6.2.1 面向连接的协议和无连接协议</strong><br>&emsp;&emsp;针对不同情况提供不同程度的质量保证，传输层提供了两种不同的协议原型。</p><ul><li><strong>面向连接的协议：</strong>会在通信计算机之间建立并维护一个连接，并且在通信过程中监视连接状态。换句话说，通过网络传输的每个数据包都会有一个确认，发送端就是那几会记录状态信息来确保每个数据包都被正确无误的接收，并且在需要时会重发数据。当数据传输结束之后，发送端和接收端计算机会已适当的方式关闭连接。</li><li><strong>无连接的协议：</strong>以单向方式向目的发送数据报，不承担通知目的计算机关于数据发送的职责。目的计算机接收到数据后也不需要向源计算机返回状态信息。</li></ul><p><strong>6.2.2、端口和套接字</strong><br>&emsp;&emsp;传输层冲到了网络应用程序与网络之间的接口，并且能够网络数据传递给特定的应用程序。<br>在TCP/IP系统中，应用程序可以使用端口号通过TCP或UDP指定数据目的地。<strong><code>端口</code></strong>是一个预定义的内部地址，充当从<code>应用程序到传输层</code>或是<code>传输层到应用程序</code>之间的通路（如图6.3）。例如，客户端计算机通常利用TCP端口21来访问服务器上的FTP程序。</p><p>&emsp;&emsp;进一步观察传输层这种鱼应用程序相关的寻址体制，就会发现TCP和UDP数据实际是被发送到一个套接字上的。<strong><code>套接字</code></strong>是一个由<code>IP地址和端口号</code>组成的地址。例如，套接字地址111.121.131.141:21指向IP地址为111.121.131.141的计算机端口21.<br>图6.4所示TCP的计算机在建立连接时如何交换套接字信息。</p><p>下例展示一台计算机如何通过套接字访问目的计算机上的一个应用程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.计算机A通过一个熟知的端口向计算机B上的一个应用程序发起连接，熟知端口是互联网数字分配机构（IANA）分配给特定程序的端口。表6.1和6.2列出一些熟知的TCP和UDP端口。熟知的端口与IP地址组合之后就构成了计算机A的目的套接字。连接请求包含着一个数据字段，告诉计算机B使用什么套接字程序计算机A返回信息，这也就是计算机A的源套接字地址。</span><br><span class="line">2.计算机B通过熟知端口接收来自计算机A的请求，向作为计算机A源地址的套接字发送一个响应。这个套接字就称为计算机B上的应用程序向计算机A上的应用程序发送消息的目的地址。</span><br></pre></td></tr></table></figure><p>表6.1熟知的TCP端口</p><table><thead><tr><th>服务</th><th>TCP端口</th><th>简要描述</th></tr></thead><tbody><tr><td>tcpmux</td><td>1</td><td>TCP端口服务多路复用</td></tr><tr><td>compressnet</td><td>2</td><td>管理工具</td></tr><tr><td>echo</td><td>3</td><td>压缩工具</td></tr><tr><td>discard</td><td>7</td><td>回显</td></tr><tr><td>systat</td><td>11</td><td>用户</td></tr><tr><td>daytime</td><td>13</td><td>时间</td></tr><tr><td>netstat</td><td>15</td><td>网络状态</td></tr><tr><td>qotd</td><td>17</td><td>每日引用</td></tr><tr><td>chargen</td><td>19</td><td>字符说呢过程器</td></tr><tr><td>ftp-data</td><td>20</td><td>文件传输协议数据</td></tr><tr><td>ftp</td><td>21</td><td>文件传输协议控制</td></tr><tr><td>ssh</td><td>22</td><td>安全Shell</td></tr><tr><td>telnet</td><td>23</td><td>终端网络连接</td></tr><tr><td>smtp</td><td>25</td><td>简单邮件传输协议</td></tr><tr><td>new-fe</td><td>27</td><td>NSW用户系统</td></tr><tr><td>time</td><td>37</td><td>时间服务程序</td></tr><tr><td>name</td><td>42</td><td>主机名称服务程序</td></tr><tr><td>domain</td><td>53</td><td>域名服务程序（DNS）</td></tr><tr><td>gopher</td><td>70</td><td>Gopher服务</td></tr><tr><td>finger</td><td>79</td><td>Finger</td></tr><tr><td>http</td><td>80</td><td>WWW服务</td></tr><tr><td>link</td><td>87</td><td>TTY链接</td></tr><tr><td>supdup</td><td>95</td><td>SUPDUP协议</td></tr><tr><td>pop2</td><td>109</td><td>邮局协议2</td></tr><tr><td>pop3</td><td>110</td><td>邮局协议3</td></tr><tr><td>auth</td><td>113</td><td>身份验证服务</td></tr><tr><td>uucp-path</td><td>117</td><td>UUCP路径服务</td></tr><tr><td>nntp</td><td>119</td><td>USENET网络新闻传输协议</td></tr><tr><td>nbsession</td><td>139</td><td>NetBIOS会话</td></tr></tbody></table><p>表6.2 熟知的UDP端口</p><table><thead><tr><th>服务</th><th>UDP端口号</th><th>描述</th></tr></thead><tbody><tr><td>echo</td><td>7</td><td>回显</td></tr><tr><td>discard</td><td>9</td><td>抛弃或空</td></tr><tr><td>systat</td><td>11</td><td>用户</td></tr><tr><td>daytime</td><td>13</td><td>时间</td></tr><tr><td>qotd</td><td>17</td><td>每日引用</td></tr><tr><td>chargen</td><td>19</td><td>字符生成器</td></tr><tr><td>time</td><td>37</td><td>时间服务程序</td></tr><tr><td>domain</td><td>53</td><td>域名服务程序(DNS）</td></tr><tr><td>bootps</td><td>67</td><td>引导程序协议服务DCHP</td></tr><tr><td>bootpc</td><td>68</td><td>引导程序协议客户端DCHP</td></tr><tr><td>tftp</td><td>69</td><td>简单文件传输协议</td></tr><tr><td>ntp</td><td>123</td><td>网络时间服务</td></tr><tr><td>nbname</td><td>137</td><td>NetBIOS名称</td></tr><tr><td>snmp</td><td>161</td><td>简单网络管理协议</td></tr><tr><td>snmp-trap</td><td>162</td><td>简单网络管理协议trap</td></tr><tr><td><strong>6.2.3、多路复用/多路分解</strong></td><td></td><td></td></tr><tr><td>&emsp;&emsp;套接字寻址系统使用TCP和UDP能够执行传输层另一重要任务：<strong><code>多路复用</code></strong>和<strong><code>多路寻址</code></strong>;<code>多路复用</code>是指多个来源的数据导向一个输出，而<code>多路分解</code>是把从一个来源接收的数据发送多个输出。</td><td></td><td></td></tr></tbody></table><p>&emsp;&emsp;<code>多路传输/多路分解</code>让TCP/IP协议栈较低层的协议不必关系哪个程序在传输数据。与应用程序相关的操作都由传输层完成了，数据通过一个与应用程序无关的管道在传输层与网际成传递。<br>&emsp;&emsp;多路复用和多路分解的关键在于<code>套接字地址</code>。套接字地址包含了IP地址与端口号，为特定计算机上的特定应用程序提供了已个唯一的标识。参见图6.6中FTP服务器。所有客户端计算机使用熟知的TCP端口21连接到FTP服务器，但针对没太个人计算机的目的套接字是不同的。类似地，运行于这台FTP服务器上全部网络应用程序都使用服务器的IP地址，但只有FTP服务程序使用由IP地址和TCP端口号21组成的套接字地址。</p><h4 id="6-3、理解TCP和UDP"><a href="#6-3、理解TCP和UDP" class="headerlink" title="6.3、理解TCP和UDP"></a><strong>6.3、理解TCP和UDP</strong></h4><p><strong>6.3.1、TCP：面向连接的传输协议</strong><br>包括以下重要特性：</p><blockquote><ul><li><strong>面向流的处理：</strong> TCP以流的方式处理数据。换句话说，TCP可以一个字节一个字节地接收数据，而不是一次接收一个预定义格式的数据块.TCP把接收到的数据组成长度不定的段，再传递到网际层。</li><li><strong>重新排序：</strong>如果数据以错误的顺序到达目的，TCP模块能够对数据重新排序来恢复原始恢复。</li><li><strong>流量控制：</strong> TCP的流量控制特性能够确保传输不会超过目的计算机接收能力。由于现实世界里会有各种不同的应用环境，处理器速度和缓存区大小的差别也可能很大，所以这种流控制能力是非常重要的。</li><li><strong>优先级与安全：</strong>国防部对TCP的规范要求可以为TCP连接设置可选的安全级别和优先级，但很多TCP实现并没有提供这些安全和优先级特性。</li><li><strong>适当的关闭：</strong> TCP像重视建立连接一样重视关闭连接的工作，以确保在连接被关闭之前，所有的数据段都被发送和接收了。</li></ul></blockquote><p>&emsp;&emsp;仔细观察TCP，就会发现它是一个由通告和确认组成的复杂系统，用以支持TCP面向连接的功能。</p><p>&emsp;&emsp;TCP/IP这样的分层协议系统在发送端计算机上某一层与接收端计算机<code>相应的层进行数据交换</code>;换句话就说，发送端计算机的网络访问层与接收端计算机的网络访问层进行通信，发送端计算机上的网际层和接收端计算机上的网际层通信，以此类推。</p><p>&emsp;&emsp;典型的网络环境中（图6.7），数据从源子网经过路由器传递到目的子网。这些路由器通常工作于网际层，也就是传输层下面的层。这其中的重点在于路由器不关心传输层的消息，他们只是把传输层数据当做IP数据报的内容进行传递。封装在TCP分段中的这些控制和校验信息支队目的的计算机上的TCP软件有意义。这种工作方式能够加快TCP/IP网络之间的路由过程（因为路由器不参与TCP细致的质量保证），同时让TCP能够满足由端节点进行校验的要求。</p><ol><li><p><strong>TCP数据格式</strong><br> TCP数据格式如图6.8。其复杂的结构揭示了TCP的复杂性和功能多样性。TCP格式中的字段如下：</p><blockquote><ul><li><strong>源端口（16位）：</strong>分配给源计算机上的应用程序的端口号</li><li><strong>目的端口（16位）：</strong>分配给目的计算机上的应用程序的端口号。</li><li><strong>序列号（32位）：</strong>当SYN标记不为1时，这是当前数据分段第一个字节的序列号；如果SYN的值是1，这个字段的值就是初始序列值(ISN),用于对序列号进行同步，这时第一个字节的序列号比这个字段的值大1（也就是ISN+1）</li><li><strong>确认好（32位）：</strong>用于确认已经接收到的数据分段，其值是接收计算机即可接收下一个序列号，也就是下一个接收到的字节的序列号+1</li><li><strong>数据偏移（4位）：</strong>这个字段表示报头的长度，也就是告诉接收端的TCP软件数据从何开始，这个值得单位是32位的字</li><li><strong>保留（6位）：</strong>保留字段，为TCP将来的发展预留空间，目前全部为0</li><li><strong>控制标记（分别占用1位）：</strong>控制标记用于表示数据分段的特殊消息。</li><li><strong>URG：</strong>为1时表示当前数据分段是紧急的，也会让“紧急指针”字段值有意义。</li><li><strong>ACK：</strong>为1时表示“确认号”字段是有意义的。</li><li><strong>PSH：</strong>为1时让TCP软件把目前收到的全部数据都通过管道传递给接收应用程序。</li><li><strong>RST：</strong>为1时会重置连接。</li><li><strong>SYN：</strong>为1时表示序列号将被同步，说明这是一个连接的开始，详见三次握手</li><li><strong>FIN：</strong>为1时表示发送端计算机已经没有数据需要发送了，这个标记用于关闭一个连接。</li><li><strong>窗口（16位）：</strong>用于流量控制的参数。它定义了发送端计算机的发送序列号可以超过最后一个已确认序列号的数量。也就是说，发送方不必等待每个数据段被确认接收之后才发送下一个数据分段，允许已经确认接收的序列号与正在发送的序列号有一定差别，但必须在适当范围之内。</li><li><strong>校验和（16位）：</strong>用于校验数据分段的完整性，接收端计算机会根据接收到的数据分段计算校验和，并且把结构与这个字段的值进行比较。TCP和UDP在计算校验和时包含一个具有IP地址的伪报头。</li><li><strong>紧急指针（16位）：</strong>这是一个偏移量指针，指向标记紧急信息开始的序列号。</li><li><strong>选项：</strong>指定一些可选设置中的某一项</li><li><strong>数据：</strong>数据分段中的数据</li></ul></blockquote></li><li><p><strong>TCP连接</strong><br>TCP的一切连接操作都是在一个连接上下文的环境中完成的。TCP通过连接发送和接收数据，而这个连接必须根据TCP的规则进行请求、打开和关闭。<br> TCP的功能之一是为应用程序提供访问网络的接口。这个接口是通过TCP端口提供的，而为了通过端口提供连接，必须打开TCP与应用程序的接口。TCP支持以下两种打开状态。</p><blockquote><ul><li><strong>被动打开：</strong>某个应用程序进程通知TCP转呗通过TCP端口接收连接，这样就会打开TCP到应用程序的连接，从而为参与连接的请求做准备。</li><li><strong>主动打开：</strong>程序要求TCP发起与另一台计算机（处于被动打开状态）的连接，这就是主动打开状态（实际上，TCP可以对一个处于主动打开状态的计算机触发起连接，以解决两台计算机可能同时尝试建立连接的问题。）</li></ul></blockquote></li></ol><p>&emsp;&emsp;在通常情况下，想接收连接的应用程序（比如FTP服务器）会把自身及其TCP端口置于被动打开状态。在客户端计算机上，FTP客户端的TCP状态一般是关闭的，直到用户发起一个从FTP客户端到FTP服务器的连接，这对于客户端来说就是主动打开。处于主动打开状态的计算机（比如客户端）上的TCP软件就会开始一些用于建立连接诶的信息交换，这种信息交换被称为“三次握手”。</p><p>&emsp;&emsp;TCP发送的数据分段是不定长的。一个数据分段内，每字节数据都分哦诶一个序列号，接收端必须为接收到的每一个字节数据都发送一个确认号。</p><p>&emsp;&emsp;实际中，数据分段中并不是为每个字节都单独编了一个序列号，而是在报文的“序列号”字段制定了数据分段的第一个字节的序列号。<br>这个规则有个例外，如果数据分段是连接初期使用，“序列号”字段里面包含的ISN，它的值比数据分段中第一个字节序列号小1。</p><p>&emsp;&emsp;“确认号”字段中的值是计算机准备接收的下一个序列号。<br>如果发送端计算机没有在指定时间内收到确认消息，它就从已确认的下一个字节重新发送数据。</p><ol start="3"><li><strong>建立连接</strong><br> &emsp;&emsp;为了让序列/确认系统正常工作，计算机必须对序列号进行同步。换句话说，计算机B必须知道计算机A的初始序列号（ISN），计算机A也必须知道计算机B使用什么ISN开始传输数据。<br>这个序列号同步的过程被称为<code>三次握手</code>。三次握手总是发送在TCP建立初期。<blockquote><ol><li>计算机A发送一个数据分段,其中的参数是：<br>SYN=1<br>ACK=0<br>序列号=X(X是计算机A的ISN)<br>处于主动打开状态的计算机（计算机A）发送一个数据分段，其中的SYN为1，ACK位0，SUN是（同步synchronize）。它表示在尝试建立一个连接，第一个数据分段的报头中还包含舒适序列号（ISN），标记了计算机将传输的第一个字节的序列号。也就是说，要发送给计算机B的第1个字节的序列号是ISN+1。</li><li>计算机B接收到计算机A的数据分段，返回一个数据分段，其中的参数是：<br>SYN=1(仍热在同步阶段)<br>ACK=1（“确认号”字段将包含一个值）<br>序列号=Y（Y为计算机B的ISN）<br>确认号=M+1(M是从计算机A接收到的最后一个序列号)</li><li>计算机A向计算机B发送一个数据分段，确认收到计算机B的ISN<br>SYN=0<br>ACK=1<br>序列号=序列中下一个号码（M+1）<br>确认号=N+1(其中N是从计算机B接收到的最后一个序列号)</li></ol></blockquote></li></ol><p>&emsp;&emsp;在这三次握手完成之后，连接就被打开了，TCP模块就利用序列号和确认机制发送和接收数据。</p><ol start="4"><li><strong>TCP流量控制</strong><br>&emsp;&emsp;TCP使用的流量控制方法称为“滑动窗口”方法，TCP报头中“窗口”字段（也被称为“缓存大小”），接收客户端利用“窗口”这个字段来定义一个超过最后一个已确认序列号的序列号“窗口”，只有这个范围内的序列号才被允许发送端计算机发送。发送端在没有接收到下一个确认消息之前，不能发送超过这个窗口的序列号。</li><li><strong>关闭连接</strong><br>&emsp;&emsp;当需要关闭连接时，计算机开始关闭过程，A(FIN:1)-&gt;B，之后进入“结束-等待（fin-wait）”状态，A的TCP软件继续接收数据分段，并处理意见在序列中的数据分段，但不在从应用程序接收数据了。当B接收到FIN数据分段时，它返回对FIN的确认信息，然后发送剩余的数据分段，通知本地应用程序接收到了FIN消息,B(FIN)-&gt;A，A返回确认消息，连接就被关闭了。</li></ol><p><strong>6.3.2、UDP:无连接传输协议</strong><br>&emsp;&emsp;UDP具有有限的错误检验功能，数据报中包含一个校验和，接收端计算机利用它来校验数据的完整性。（一般，这个校验和是可选的，而且能被接收端禁用以加快接收数据处理）。UDP数据报中有一个伪报头，包含数据报的目的地址，从而提供了发送数据报的错误传输手段。 另外，如果UDP接收模块接收到一个发给未激活或未定义的UDP端口的数据报，它会返回一个ICMP消息。通知源计算机这个端口不可达。<br>&emsp;&emsp;UDP没有重新排序的功能，但一般不会导致不可靠的接收。</p><p><strong>注意：</strong> UDP和广播</p><blockquote><p>UDP的简单、无连接设计让它成为网络广播所使用的协议，广播是会被子网全部计算机接收和处理的单个消息。</p></blockquote><p>&emsp;&emsp;UDP协议的主要用途是<code>把数据报传递给应用层</code>。<br>&emsp;&emsp;UDP头包含4个16位字段，如图6.9</p><blockquote><ul><li><strong>源端口：</strong>占UDP报头的前16位，通常包含发送数据报的应用程序所使用的UDP端口。接收端应用程序利用该字段作为发送响应的目的地址，这个字段可选，不写其端口号，字段全部置0。这种情况适用于单向消息，无需响应。</li><li><strong>目的端口：</strong>这16位子弹包含的端口地址，是接收端计算机上UDP软件使用的端口。</li><li><strong>长度：</strong>这16字段以字节为单位表示UDP数据报的长度。这个长度包含UDP报头和UDP数据载荷。因为UDP报头长度是8字节，所以这个值最小8</li><li><strong>校验和：</strong>这16为字段可以检验数据在传输过程中是否损坏。校验和是对二进制数据串指向特殊计算而得到的结果。对于UDP来说，校验和是基于伪报头、UDP报头、UDP数据和填充的0而计算。源计算机生成校验和，目的计算机对它进行校验，让可客户端用用程序能够判断数据报是否完整。<br>由于UDP报头中不包含源IP或目标IP地址，数据报可能会被传输到错误的计算机或服务。校验和使用的部分数据来自于从IP报头（被称为伪报头）提取的值，这个伪报头包含了目的IP地址的信息。让接收端计算机能够判断UDP数据报是否被错误交付。</li></ul></blockquote><p><strong>注意：</strong>其他传输层协议</p><blockquote><p>DCCP(数据报拥塞控制协议)  SCTP（流控制传输协议）提供TCP和UDP不具备的增强特性。<br>RTP(实时传输协议)提供了传输实时硬盘和视频的结构。</p></blockquote><p><strong>问：</strong>为什么路由器不向发起连接的计算机发送TCP连接确认？<br><strong>答：</strong>路由器工作于网际层（传输层之下），因此不处理TCP信息。</p><h2 id="第8章-路由选择"><a href="#第8章-路由选择" class="headerlink" title="第8章 路由选择"></a>第8章 路由选择</h2><p>IP转发<br>直接路由和间接路由<br>路由协议<br>本章将介绍网络上的路由器如何经过一个复杂的通信过程来决定数据传递到目的地址的最佳路径，内容包括<code>路由器</code>、<code>路由表</code>和<code>路由协议</code>;</p><h4 id="8-1-TCP-IP中的路由选择"><a href="#8-1-TCP-IP中的路由选择" class="headerlink" title="8.1 TCP/IP中的路由选择"></a><strong>8.1 TCP/IP中的路由选择</strong></h4><p>&emsp;&emsp;大多数基本形式中，路由器是负责<code>根据逻辑地址对通信流量进行过滤的设备</code>。路由器一本工作于网际层（OSI模型的网络层）也建成为OSI的第三层，因此路由器也称为第3层设备。<br>近年来，硬件厂商已经开发出了可以工作在OSI协议栈更高层的路由器。本章会介绍第4到第7层的路由器，就目前而言只考虑工作于网际层（第3层，和IP寻址位于同一层）的路由器。</p><p>&emsp;&emsp;当路由器将数据从一个网络传输到下一个网络时，它会<code>替换</code>网络访问层报头信息,因此路由器可以连接不同类型的网络。很多路由器还维护关于最佳路径的详细信息，这是根据<code>距离</code>、<code>带宽</code>和<code>时间</code>综合考虑而得到的。<br><strong>8.1.1 什么是路由器</strong><br>&emsp;&emsp;路由器看上去就像一台具备两款网络适配器的计算机。早期的路由器实际上就是具有两块或多块网络适配器的计算机（也成多宿主计算机）。如图8.1<br>IP地址属于网络适配器的，不属于计算机。图8.1的计算机有两个IP地址，一个适配器各一个。实际上，这两个适配器可以具有完全不同的IP子网对应于完全不同的的物理网络。多宿主计算机上的协议软件能够从网段A接收数据，查看IP地址信息来判断数据是否属于网段B。如果是，就将其中的网络访问层<code>报头信息</code>替换为<code>包含网段B物理地址</code>信息的报头,再把数据传递网路B。</p><p>&emsp;&emsp;路由器的复杂特性：</p><blockquote><ul><li>路由器的端口（适配器）超过两个，也就是同时连接两个以上的网络。决定向那哪里转发数据就变得更复杂了，而且很可能增加冗余路由（事实上，终端用户在大多数LAN中见到的路由器用于连接两个网段，但是在Internet结构内可以存在更为复杂的场景）</li><li>由路由器连接起来的网络还分贝与其他网络连接。换句话说，路由器观察到的网络地址可能并不属于它直接连接的网络，它必须具备某种策略把数据转发到这些非直接网络上。</li><li>路由器网络提供了冗余的路由，每台路由器必须能够以某种方式决定使用哪个路径。</li></ul></blockquote><p>&emsp;&emsp;图8.1所示的简单配置加上前面的这几条复杂性。就可以得到路由器功能更详细的描述。如图8.2。</p><p><strong>8.1.2 路由选择过程</strong><br>&emsp;&emsp;对路由器功能的全面介绍如下所述：</p><blockquote><ol><li>路由器从所连接的网络之一接收数据。</li><li>路由器把数据传递到协议栈的网际层。换句话说，路由器抛弃网络访问层层报头信息，并重组IP数据报（如果有必要）。</li><li>路由器检查IP报头中的目的地址。</li><li>如果数据的目的在其他网络，路由器就根据路由表决定向哪里转发数据。</li><li>在路由器决定了它的哪个适配器要接收这个数据后，就把数据传递给适当的网络访问测软件，让数据通过适配器进行传输。</li></ol></blockquote><p>&emsp;&emsp;这个路由选择如图8.3，有人觉得第4步是关键。但事实上<code>路由表</code>和<code>建立路由表的协议</code>是路由器具有的两个显著特性。对于路由器的大多数讨论都是关于<code>建立路由表</code>、<code>汇集路由表的路由协议</code>如何让所有的路由器像一个整体一样提供服务。</p><p>&emsp;&emsp;路由的类型主要有两种，它们的名称就源自于其从何处获取路由表信息。</p><blockquote><p><strong>静态路由：</strong>要求网络管理员手动输入路由信息。<br><strong>动态路由：</strong>根据使用路由协议获取的路由信息来动态建立路由表。</p></blockquote><p><strong>注意：</strong>预配置路由</p><blockquote><p>大多数动态路由器允许路由器覆盖动态路由，并且对特定的地址配置静态路径。预配置的静态路由有时可以用于网络排错，有时也可以用于强制使用快速网络连接或平衡网络流量。</p></blockquote><p><strong>8.1.3 路由表的概念</strong><br>&emsp;&emsp;路由表和网际层其他路由元素的用途在于把数据传递到正确的本地网络。当数据到达本地网络之后，网络访问协议就会知道它的目的地。因此路由表不需要存储完整的IP地址，只需要列出网络ID即可。<br>&emsp;&emsp;图8.4为一个非常基本的路由表内容。从本质上讲，路由表就是把<code>目的网络ID映射到下一跳的IP地址</code>，即数据报通往目的网络的下一站。路由表会区分直接连接到路由器本身的网络和通过其他路由器间接连接过来的网络。下一跳可以是目的网络（如果是直接连接），也可以是通向目的网络的下一个下游路由器。图8.4中路由器端口接口是指转发数据的路由器端口。<br>&emsp;&emsp;路由表中的“下一跳”条目是理解动态路由的关键，在复杂的网络中，可能存在着通向目的的多条路径，路由器必须决定下一跳沿着哪条路径前进。动态路由器就与使用路由协议获取的信息来做出决定。<br><strong>注意：路由表</strong></p><blockquote><p>主机计算机可以向像路由器一样具有路由表，但由于主机不需要执行路由功能，它的路由表通常不会那么复杂。主机通常会使用默认路由或默认网关。当数据报不能再本地网络上传输或传递到另一台路由器时，它会被传递到充当默认网关的路由器。</p></blockquote><p><strong>8.1.4 IP转发</strong><br>&emsp;&emsp;主机和路由器都有路由表，相对于路由器，主机路由表简单多了，可能只包含两行，一个条目用于本地网络，另一个用于默认路由（处理不能在本地网段上传输的数据包）</p><p>&emsp;&emsp;第4章，TCP/IP软件利用ARP将IP地址解析成本地网段上的物理地址，如果IP地址不在本地网段上会怎么样？IP不在本地网段，主机会把数据报发送到路由器。实际上不是这么简单。<br>&emsp;&emsp;IP报头（图4.3）只包含了源和目的IP地址，它没有足够空间来列出传输数据报的中间路由器地址。<br>&emsp;&emsp;IP转发过程实际上不会再IP报头中写入路由器地址，而是由主机把数据报和路由器的IP地址向下传递到网络访问层，该层的协议软件会使用一个独立的查询过程把数据报封装到一个帧中，通过本地网段传递给路由器。换句话说，被转发的数据报里的IP地址指向最终要接收数据的主机。而被转发数据报的帧中的物理地址指向路由器上的本地适配器地址。<br>&emsp;&emsp;下面介绍整个过程（图8.5）</p><blockquote><ol><li>以太主机准备放一个IP数据报，它查看自己的路由表</li><li>如果数据报不能再本地网络上发送，主机就会从路由表里获取与目的地址相关联的路由器的IP地址（对于本地网段上的主机来说，这个路由器的IP地址一般都是默认网关的地址）。路由器的IP地址被ARP协议解析为物理地址。</li><li>数据报（目的是远程主机）和路由器的物理地址一起被传递给网络访问层。</li><li>路由器的网络适配器会接收到这个帧，因此帧的目的物理地址与路由器的物理地址相匹配。</li><li>路由器对帧进行拆包，把数据报传递给网际层。</li><li>路由器查看数据报的IP地址，如果这个地址匹配路由器自己的IP地址，就表示数据是要发给路由器本身；否则，路由器会查看自己的路由表，找到与数据报目的地址相关联的路由器，尝试转发这个数据报。</li><li>如何不能把数据报发送到与路由器相连接的任何网段，路由器就把数据报发送给另一台路由器，上述过程就会车功夫进行（从第1步开始），知道最后一个路由器就能过把数据报直接传输给目的主机。</li></ol></blockquote><p>&emsp;&emsp;此过程的第6步是路由器的一个重要特性。需要记住的是，并不是具有两块网卡的设备就能充当路由器。如果没有必要的软件来支持IP转发，就不能把数据从一个接口传递到另一个。当不具备IP转发功能的计算机接收到目标是其他计算机的数据报时，它只会忽略收到的数据。</p><p><strong>8.1. 直接路由与间接路由</strong><br>&emsp;&emsp;如果一台路由器只连接了两个子网，路由表就会相对简单。图8.6所示的路由器不会看到没有与其端口相关联的IP地址，而且它是直接连接在全部子网上。换句话说，图中的路由器能够直接利用直接路由传递任何数据报。</p><p>&emsp;&emsp;再来看图8.7，更复杂一点的网络。路由A没有连接到网段3,而且在没有任何帮助的情况下也不能发现网段3，这种情况为间接路由。大多数路由式网络都在某种程度上依赖于间接路由。关于图8.7,最大的问题是路由器A如何发现网段3？路由器A如何知道发往网段3的数据报应该转发给路由器B而不是路由器C呢？</p><p>&emsp;&emsp;路由器了解间接路由器的方式有两种：从系统管理员和从其他路由器。<br>&emsp;&emsp;这两种方式分别对应静态路由和动态路由。系统管理员可以直接从路由表中输入网络路由（静态路由），或者路由器B可以直接告诉路由器A关于网段3的信息（动态路由）。动态路由具有一个优点，首先，它不需要人工干预。其次，它可以对网络的改变做出相应。如果一个新的网段连接到了路由器B，路由器B就能把这个改变通知路由器A。</p><p><strong>注意：</strong>静态路由和动态路由</p><blockquote><p>路由器有时会同时使用静态路由和动态路由。系统管理员可以配置一些静态路由，让其他路径动态分配。静态路由有时可以用于强制流量经过特定路径。例如：系统管理员通过配置路由器可以把流量导向带宽较大的链接。</p></blockquote><p><strong>8.1.6 动态路由算法</strong><br>&emsp;&emsp;路由器的行为完全依赖于路由表。目前使用的路由协议有很多种，其中很多是围绕着这两种路由方法之一设计的。这两种方法分别是<code>距离矢量路由</code>和<code>链路状态路由</code>。<br>这令中方法其实就是路由器<code>相互通信</code>和<code>收集路由信息</code>所采用的不同方法。<br>使用两种方法的一堆路由协议：<code>RIP</code>(距离矢量路由协议)和<code>OSPF</code>(链路状态路由协议)<br><strong>说明：</strong>协议和实现<br>距离矢量和链路状态是路由协议的累呗，实际协议的具体实现还包括其他特定和细节。另外，很多路由器支持启动脚本，静态路由条目等功能，使对距离矢量和链路状态路由的理想化描述变得非常复杂。</p><h4 id="1、距离矢量路由"><a href="#1、距离矢量路由" class="headerlink" title="1、距离矢量路由"></a><strong>1、距离矢量路由</strong></h4><p>&emsp;&emsp;距离矢量路由（也称为贝尔曼-福特路由）是一种高效、简单的路由方法，被很多路由协议所采用。它曾经在路由界占统治地位，虽然最近几年一些更复杂的路由方法（比如链路状态路由）逐渐流行起来，但距离矢量路由仍然相当常见。<br>&emsp;&emsp;距离矢量路由设计目标：路由器之间所需通信最少，路由表中必须保留的数据最少。这种设计理念认为路由器不必知道通向每个网段的完整路径，而是只需知道向哪个方法方数据报即可（这也是术语“矢量”的由来）。网段之间的距离以数据报在两个网络之间传输必须经过的路由器的数量来表示，而使用距离矢量路由的路由器优化路径的方式是让数据报必须经过的路由器达到最少。这个距离参数被称为“跳数”、<br>&emsp;&emsp;距离矢量路由的工作方式如下：</p><blockquote><ol><li>当路由器A初始化时，它感知到直接连接的网段，并把这些网段写入到自己的路由表中。这些直连网段的跳数为0，因此数据报从这台路由器到达这些网段不需要经过其他路由器，</li><li>在周期性的时间间隔中，路由器器接收到来自邻居路由器的报告，其中包含了邻居路由器所感知的网段和相应的跳数。</li><li>当路由器A从邻居路由器收到报告后，按照如下方法把新的路由信息添加到自己的路由表中。</li></ol><ul><li>如果路由器B的信息中包含一个路由器A目前还不知道的网段，路由器A就把这个网段添加到自己的路由表中。去往这个新网段的路由就是路由器B，也就是说，如果路由器A收到发向这个新网段的数据报，它会转发给路由器B。对于路由器A来说，这个新网段的跳数是路由器B的信息中列出的跳数再加1，因此它与路由器B相比，到达这个网段需要多一跳。</li><li>如果路由器B的信息中包含的网段已经存在路由器A的路由表中，路由器A就会把收到的跳数+1，把得到的值与自己路由表中的值相比较，如果经过路由器B的路由比路由器A已经掌握的路径更有效率（跳数更小），路由器A就更新自己的路由表，把路由器B作为通向相应网段的路径。</li><li>如果通过路由器B的跳数比路由器A路由表中的当前路由跳数大，经过路由器B的路由就不会被使用，路由器A继续使用自己路由表中保存咋路径。</li></ul></blockquote><p>&emsp;&emsp;随着每一轮路由表的更新，路由器对网络的了解越来越全面。关于路由的信息逐渐散步到只整个网络。假设网络不发生改变，路由器就会最终了解到通向每个网段的最高效的路径。</p><p>&emsp;&emsp;图8.8所示为一个距离矢量路由更新的例子。主要到在这一时刻，已经发生一些更新。因为路由器A和路由器B都已经了解到没有直接的网段。在这种情况下，路由器B具有通向网络14的更优路径。所以路由器A就会更新自己的路由表，把发往网络14的数据转发给路由器B。对于网络7来说，路由器A已经掌握的路径更好，所以表中相应内容没有改变。</p><h4 id="2、链路状态路由"><a href="#2、链路状态路由" class="headerlink" title="2、链路状态路由"></a><strong>2、链路状态路由</strong></h4><p>&emsp;&emsp;在假设路径效率等同于经过路由器数量时，距离矢量路由是个很好的方法。这种假设的初衷很多啊，但在有些情况下过于简单了（即使在跳数一样的情况下，经过低速链路的路由也会比经过高速链路的慢）。另外，距离矢量路由并不特别使用与具有大量路由器的环境，因为没太路由器为每个目的网关都必须维护一个路由条目，而这些条目不过是矢量和跳数。路由器无法充分利用对网络结构的更多了解来提高其效率。而且，即使在大量信息都不必要的情况下，包含距离和跳数的完整表格必须在路由器之间进行传输。计算机科学开始思考能否做的更好，由此诞生了链路状态路由，而且它已经成为距离矢量路由器的主要对手。</p><p>&emsp;&emsp;连接状态路由背后的理念在于每个路由器都尝试建立关于网络拓扑的内部映射。每台路由器定期向网络发送状态信息，其中列出了自己直连的其他路由器以及链路的状态（链路在当前是否可用）。路由器利用从其他路由器收到的状态消息建立网络拓扑的映射，当它需要转发数据报时，会根据现有条件选择最佳路径。<br>&emsp;&emsp;连接状态路由在每台路由器上都需要更多的处理时间。但带宽消耗减少，因为没太路由器不需要传播完整的路由表。另外通过网络追踪故障更容易了，因为特定路由器发出的状态消息在网络上传输时不会被改变（而在另一方面，即使距离矢量路由方法的路由器会在收到路由器消息时修改其中的跳数）。</p><h4 id="8-2-复杂网络上的路由"><a href="#8-2-复杂网络上的路由" class="headerlink" title="8.2 复杂网络上的路由"></a><strong>8.2 复杂网络上的路由</strong></h4><p>&emsp;&emsp;大型网络上包含数以百计的路由器，Internet则包含数以千计的路由器。在像Internet这样的大型网络上，让全部路由器都共享前面所述路由方法的所有信息是不可能的。如果每台路由器都处理Internet上其他路由器的路由信息，路由协议的流量和路由表的规模很快就会让整个系统崩溃。<br>&emsp;&emsp;对于Internet上的路由器，并不是每一台路由器都需要知道其他所有路由器的信息。<br>&emsp;&emsp;在网络有效组织环境下，大多数路由器只需要与相邻路由器交互协议信息即可。</p><p>&emsp;&emsp;在孕育了Internet的ARPAnet系统中，一小组核心路由器作为网络互联的中央骨干网，把自动配置和管理的独立网络连接在一起。核心路由器了解每个网络。但不必知道每个子网。只要数据报能够找到到达核心路由器的路径，就能够到达整个网络的任何位置。附属网络的路由器不必了解世界的全部网络。这个系统的发展为复杂的现代Internet(详见第17章)。</p><p>&emsp;&emsp;Internet由各个独自管理的网络组成，这些网络成为<code>自治系统</code>。自治系统可以是个公司网络，但目前更常见的是与Internet服务供应商（ISP）相关联的网络。自治系统的所有者管理每台路由器的配置细节。大多数路由器按照如下的通用分类进行指责划分，尽管以太路由器可以充当多重职责，但是路由器所使用的硬件，尤其是协议，确定了它在网络中的职责。</p><blockquote><p><strong>外部路由器：</strong>外部路由器在自治网络之间交换路由信息，他们维护自己及邻居自治网络的路由信息。边界路由器传统上使用外部网关协议（EGP）,实际的RGP现在已经过时，但外部路由器使用新路由协议一般也称为EGP。现在流行的一种EGP是边界网关协议（BGP）。外部路由器通常也作为自治网络的内部路由器。<br><strong>内部路由器：</strong>自治网络内部<code>共享路由信息</code>的路由器被称为<code>内部网关</code>，它们使用被称为内部网关协议（IGP）的一组路由协议，包括路由信息协议（RIP）、开放最短路经优先（OSPF）。详见本章后续。<br><strong>核心路由器：</strong>尽管最初APRAnet骨干网不再作为Internet的中心而出现，但是自治系统有时会构建自己的骨干结构，以细分和隔离流量。核心路由器支持骨干系统。核心路由器使用的路由协议包括网关到网关协议（GGP），以及新出现的SPREAD协议。</p></blockquote><p>说明：自治网络内部的路由器也可能分层次进行配置，一个大型自治网络可能包含多组内部路由，并利用内部路由器传递这些内部组之间的路由信息。自治网络管理者可以根据需要设计路由器配置，并且相应地选择路由协议。</p><h4 id="8-3-内部路由器"><a href="#8-3-内部路由器" class="headerlink" title="8.3 内部路由器"></a><strong>8.3 内部路由器</strong></h4><p>&emsp;&emsp;内部路由器工作于自治网络的内部，它会掌握自己组内全部路由器所连接的网段信息，但不需要完整了解自治系统之外的网络。<br>&emsp;&emsp;内部路由协议有多种，网络管理员必须根据网络情况和网络硬件兼容性选择内部路由协议。<br>&emsp;&emsp;两种重要的内部路由协议：路由信息协议（RIP）和开放最短路由优先（OSPF）；<br>RIP是一种距离矢量协议，而OSPF是一种链路状态协议。实际的协议实现都需要解决一些细节问题。<br><strong>注意：</strong>多协议</p><blockquote><p>当今大多数路由器都支持多种路由协议。</p></blockquote><p><strong>8.3.1 路由信息协议（RIP）</strong><br>&emsp;&emsp;RIP是一种距离矢量协议，这表示它根据跳数来判断到达目的的最佳路径。RIP曾经非常流利，虽然现在有些过时，但仍然被广泛使用。RIP Ⅱ标准的出现解决了RIP Ⅰ的一些问题。现在很多都有其都支持RIP 和RIP Ⅰ。RIPⅡ 针对于IPv6网络的扩展被称为RIPng。</p><p><strong>注意：</strong> RIP路由</p><blockquote><p>RIP在UNIX和Linux上是通过routed daemon实现的。</p></blockquote><p>&emsp;&emsp;作为一种距离矢量协议，RIP需要路由器收听和集成来自其他路由器上的路由和跳数信息。RIP的参与者被划分为主动和被动两种。<br>&emsp;&emsp;主动RIP节点通常是参与正常的距离矢量数据交换过程的路由器，它会把自己的路由表发送给其他路由器，并且收听来自其他路由器的更新信息。<br>被动RIP节点只收听路由更新信息。不传播自己的路由表，其典型代表就是普通计算机（主机也需要路由表）。</p><p>&emsp;&emsp;如果接收到的跳数进行处理后正好和路由表中保存的跳数一样，会如何处理?对于RIF来说，如果到达同一目的的两个路径具有相同的跳数，则会使用路由表现有的路径。这样会避免由于跳数相同而导致路由表条目不断被修改。</p><p>&emsp;&emsp;RIP路由器每30秒广播一次更新消息，它还可以要求立即更新。像其他距离矢量协议一样，当网络处于平衡状态时，RIP工作效果最好。如果路由器数量变得非常大。路由表的缓慢收敛可能导致问题。处于这个原因，RIP设置了从第一台路由器到达目的的最大跳数限制，其值是15,。这个规定限制了路由组的数量，但如果以层级方式组织路由器，15跳范围之内也可以组成大型网络。</p><p>&emsp;&emsp;虽然距离矢量发方没有特别考虑线路速度和物理类型的问题，但RIP允许网络管理员以手动方式把低俗路径的跳数设置得很大，从而影响事假的路由选择。<br>古老的RIP协议逐渐被新的路由协议所取代，比如OSFP</p><p><strong>8.3.2 开发最短路径优先（OSPF）</strong><br>&emsp;&emsp;OSPF比较新的内部协议，正在逐步取代RIP，OSPF是链路状态协议。<br>&emsp;&emsp;OSPF路由器组中的没太路由器都被指定一个路由器ID,通常是与路由器相关联的最大IP地址（如果路由器使用了一个环回接口，路由器ID就是最大的回环地址）<br>&emsp;&emsp;本章前面讲过，链路状态路由器会建立网络拓扑的一个内部映射，利用路由器ID来鉴别拓扑里的路由器。每台路由器都把网络描绘为一个树形，自己位于树的根部。这个网络树被称为最短路径树(SPT)，通过网络的路径就对应于通过SPT的路径，路由器计算每一个路由的开销。开销度量包括跳数和其他一些因素，比如链路速度和链路的可靠性。</p><h4 id="8-4、外部路由器：BGP"><a href="#8-4、外部路由器：BGP" class="headerlink" title="8.4、外部路由器：BGP"></a><strong>8.4、外部路由器：BGP</strong></h4><p>&emsp;&emsp;Internet是由大量的自治系统的内部路径，自治系统之间的路径，以及穿越自治系统的冗余路径组成即可。</p><p>&emsp;&emsp;外部路由在自治系统网络中传输流量时发挥了重要的作用。如今Internet上的外部路由器所以使用的最常见协议是边界网关协议（BGP）。<br>&emsp;&emsp;实际上，BGP用途很广泛，可以用作自治系统内的内部协议，将网络细分为更小的区域，在自治系统的边缘使用的BGP版本被称为外部边界网关路由协议（eBGP）,它将消息从一个自治系统传输到另外一个自治系统。在自治系统内部使用的BGP称为内部边界网关协议（iBGP）。<br>&emsp;&emsp;IANA为每一个自治系统分派了一个唯一的数值，称之为AS号或ASN。BGP使用这些AS号来构建Internet的映射，并将基于CIDR的无类别IP地址与穿越自治系统的路由关联起来。ASN提供了一种方法来识别网络是否独立于特定的IP地址（或地址范围）。该方法提供了去往自治系统的冗余路径（与通过IP地址控件的单条路径相对）但是由于ASN不是分层次的，因此BGP路由器必须知道网络中的所有其他BGP路由器。</p><p><strong>注意：公共ASN和私有ASN</strong></p><blockquote><p>iBGP主要用于在自治系统的内部来路由流量，它不需要IANA分配的公共ASN。内部BGP路由器使用私有ASN来转发流量，因此不会将流量转发到自治系统之外。</p></blockquote><p>&emsp;&emsp;BGP路由器使用可靠地TCP连接来传递与地址范围相关的信息，并构建用来买搜狐网络路径的ASN链。BGP协议包括大量用于路径发现的条款，以及从多个选择中选取最高效路径的技术。</p><h4 id="8-5-无类别路由"><a href="#8-5-无类别路由" class="headerlink" title="8.5 无类别路由"></a><strong>8.5 无类别路由</strong></h4><p>&emsp;&emsp;TCP/IP路由系统是围绕网络ID的概念设计的，而网络ID时基于IP地址的地址类别（A、B和C）。在第5章讲到，这个地址分类系统有一些局限性，有时并不能有效的把一段地址指定给一个供应商。“无类别域间路由（CIDR）”提供了指定地址和确定路由的另一种方法。CIDR系统利用地址/掩码对来指定主机，比如204.24.128.0/17,掩码数字表示地址中多少位属于网络ID。<br>&emsp;&emsp;如果路由协议支持CIDR，它会提供更有效的路由，CIDR让路由器能把多累网络同等对待，从而减少了路由器之间要传输的信息。最近一些路由协议，比如OSPF和BGP4，都支持无类别寻址。最初RIP不支持CIDR,随后的RIP II 更新支持了CIDR。</p><h4 id="8-6-协议栈中的更高层"><a href="#8-6-协议栈中的更高层" class="headerlink" title="8.6 协议栈中的更高层"></a><strong>8.6 协议栈中的更高层</strong></h4><p>&emsp;&emsp;协议占中的每一层都提供了不同的服务，并且在其包邮中封装了不同的信息。能够访问更高层协议的路由器可以根据更多的信息来决定路由。例如：工作于传输层的路由器能够根据源端口和目的端口推断数据的特性，而工作于应用成的路由器可以更详细的了解发送数据的应用程序和应用程序所使用的协议。</p><p>&emsp;&emsp;工作于更高层的路由器有很多优点，比如更好的安全型，使用这种技术的另一个重要原因是服务质量（Qos）的概念。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">自治系统：参与到更大网络的网络，由自治实体进行维护</span><br><span class="line">边界路由协议（BGP）：用来在自治系统之间路由流量的协议。BGP也用作自治系统内的内部协议。</span><br><span class="line">动态路由：一种路由技术，路由器基于该技术获得的信息来构建路由表。</span><br><span class="line">外部路由器：自治系统中的一种路由器，与其他自治系统传递路由信息。</span><br><span class="line">非直连路由：位于两个不能直接连接的网络中的路由。</span><br><span class="line">内部路由器：自治系统内部的路由器，与系统内的其他路由器交换路由信息。</span><br><span class="line">IP转发：把IP数据报从同一台设备的一个网络接口传递到另一网络接口的过程。</span><br><span class="line">OSPF(开发最短路径优先)：一种常见的链路状态内部路由协议。</span><br><span class="line">RIP(路由信息协议)：一种常见的距离失灵内部路由协议。</span><br><span class="line">路由协议：路由器用于汇聚路由信息的协议。</span><br><span class="line">SPT(最短路径树)：OSFP路由器生成的一种树形网络映射。</span><br><span class="line">静态路由：需要网络管理员手动输入路由信息的一种路由技术。</span><br></pre></td></tr></table></figure><h2 id="第9章-连网"><a href="#第9章-连网" class="headerlink" title="第9章 连网"></a><strong>第9章 连网</strong></h2><p>拨号连接<br>宽带技术，比如电缆和DSL<br>广域网<br>无线网络连接<br>连接设备</p><p>&emsp;&emsp;网络访问层管理与物理网络的接口，但是物理网络到底是什么？在位、字节、端口和协议层这些概念之后，Internet连接需要某种形式的设备把计算机或本地网段连接到更大的网络上。本章介绍访问TCP/IP网络所用到的一些设备和过程。</p><h4 id="9-1-拨号连接"><a href="#9-1-拨号连接" class="headerlink" title="9.1 拨号连接"></a><strong>9.1 拨号连接</strong></h4><p>&emsp;&emsp;以前，连接TCP/IP网络（比如Internet）的一种最常的方式是通过电话线，二在最近几年，像电缆调制解调器和DSL这样的宽带技术降低了拨号连接的重要性，但很多计算机仍然支持拨号连接，而且电话调制解调器在很多领域仍然是重要的连接工具，<br>调制解调器（modem）通过电话线提供网络访问，它是Modulate/DEMoudlate(调制器和解调器)，调制解调器的作用在于把来自于计算机的数字传输转化为能够通过电话系统的端口进行传输的模拟信号，同时也把来自电话线的模拟信号转化为计算机能够理解的数字信号。</p><p><strong>9.1.1 点到点连接</strong><br>&emsp;&emsp;第3章讲过，像以太网这样的局域网使用精致的访问策略让计算机共享互联网介质。与之相反的是，电话线两端的计算机不需要与其他计算机争用传输介质，它们只需彼此之间共享介质就可以了。这种连接方式被称为点到点连接（图9.1）</p><p>&emsp;&emsp;点到点连接比局域网的配置简单，因为它不需要具备让多台计算机共享传输介质的方法。同时，通过电话线的连接也有一些局限性，最大的局限之一是电话连接的传输速率比局域网（比如以太网）要低得多，这导致他使用的协议相当简单,越简单越好。但是，随着调制解调器的速度越来越高，调制解调器的协议应急承担了额外的职责。</p><p>&emsp;&emsp;拨号协议的另一巨大挑战是要支持大量不同类型的硬件和软件配置。在局域网上，系统管理员监视和控制每台计算机的配置，协议系统依赖于通信设备之间的高度一致性。拨号连接却与之不同，它几乎可能发生在世界上的任何地点，拨号协议必须适应通信设备的硬件和软件更广泛的差异性。</p><p><strong>9.1.2 调制解调器协议</strong><br>&emsp;&emsp;这种只涉及两台计算机的点到点连接也需要复杂的TCP/IP栈来建立连接吗？答案是“不”。</p><p>&emsp;&emsp;早期的调制解调器协议只不过是一种在电话线传输信息的方法，在这种情况下，TCP/IP的逻辑寻址和网间错误控制就是没有必要的。随着局域网和Internet的出现，工程师开始考虑让拨号连接作为提供网络访问的一种方式。这样远程网络访问概念的第一个是实现是对早期调制解调器协议的扩展，在这种最初的主机拨号方案中，连接到网络的计算机负责为网络准备数据。无论和显示的还是隐式的，远程计算机都像是个终端（图9.2），通过一个完整的独立的过程让连网主机利用调制解调器线路执行连网任务、发送和接收数据。</p><p>&emsp;&emsp;然而，这些早期主机拨号方案有一些局限性。它们反应了早期的中心化计算机模式，对提供网络连接的计算机要求过多，（图9.2配置中，想象如果多台计算机同步连接到拨号服务器会怎么样），而且也不能充分发挥远程计算机的处理能力。<br>随着TCP/IP和其他路由器协议的实现，设计人员构想出另一种解决方案，让远程计算机负责更多的连网任务，而让拨号服务器发挥类似路由器的作用，这种方案（图9.3）与新式的、弱中心画的计算机网络模式更一致，也接近与TCP/IP的本质特征。在这种安排下，远程计算机运行自己的协议栈，让调制解调器协议工作于网络访问层，拨号服务器接收数据并路由到更大的网络。</p><p>&emsp;&emsp;这样一来，拨号协议直接与TCP/IP配合工作，并成为协议中的集成部分。最常见的两个TCP/IP调制解调器协议如下所示：</p><blockquote><p><strong>串行线路网际协议（SLIP）：</strong>基于TCP/IP的早期调制解调器的协议，相对简单，有很多局限性。<br><strong>点到点协议（PPP）：</strong>最初当前用于调制解调器连接的最流行协议，是对SLIP的细化，具有SLIP所不具备的很多重要特定。</p></blockquote><p>PPP已经取代SLIP成为拨号Internet连接的协议。</p><blockquote><p><strong>注意：</strong>底层协议<br>SLIP和PPP都建立与更低级的串行通信协议上，后者负责信号调制和解调的具体细节。这些串行通信协议提供了OSI模型中物理层的功能。</p></blockquote><p><strong>9.1.3 点到点协议（PPP）</strong><br>&emsp;&emsp;PPP设计目标是解决SLIP存在的一些缺点。<br>&emsp;&emsp;PPP设计人员还希望PPP能够在连接建立初期进行动态协商配置，并且能够在会话过程中管理通信计算机之间的链路。<br>&emsp;&emsp;PPP实际上式交互作用的一组协议，实现基于调制解调器连网所需的全部功能。RFC 1661把PPP组件划分为3大类：</p><blockquote><p><strong>封装多协议数据报的方法：</strong> SLIP和PPP都接受数据报，转换为适合Internet的形式。但PPP与SLIP不同的是，它还必须准备接受来自不同协议系统的数据报。<br><strong>建立、配置和测试连接的链接控制协议（LCP）：</strong> PPP能够通过协商方式进行配置，从而消除了SLIP连接遇到的兼容问题。<br><strong>支持高层协议系统的网络控制协议（NCP）簇：</strong> PPP可以包含不同的子层，从而为TCP/IP和其他网络协议提供单独的接口。</p></blockquote><p>PPP的大部分功能来自于建立、管理和终止连接的LCP功能。<br><strong>1. PPP数据</strong><br>&emsp;&emsp;PPP（以及SLIP）的主要用途是转发数据报，其难点在与它必须能够转发多重类型的数据报，也就是说，数据报可能是IP数据报或OSI模型中网络层的其他数据报。</p><blockquote><p><strong>注意：</strong>数据包<br>&emsp;&emsp;PPP RFC使用术语“数据包（packet）”来描述在PPP帧中传输的数据。数据包可以有IP（或其他高层协议）数据报组成，也可以由通告PPP进行操作的额其他按协议的数据组成。“数据包”这个词在整个网络界用于表示经过网络传输的数据，它并不是很严密的术语。本书中爱不分内容会使用更精确的术语，比如“数据报（datagram）”。但是，并不是所有的PPP数据包都是数据报，所以为与RFC保持一致，本章课程用术语“数据包”表示经过PPP传输的数据。</p></blockquote><p>&emsp;&emsp;PPP也要转发与自己协议相关的信息，这些协议的作用是建立和管理调制解调器连接。通信设备在PPP连接过程中，会交换多重类型的消息和请求。通信计算机必须交换用于建立、管理和关闭连接的LCP数据包，支持PPP身份验证功能（可选）的验证数据包，与各种协议簇通信的NCP数据包。在连接初期交换LCP数据配置用于全部协议共同的连接参数，NCP协议配置与特定协议簇相关的参数。<br>PPP帧的数据格式如图9.4</p><blockquote><p><strong>协议：</strong> 1或2字节的字段，提供代表被封装数据包协议类型的标识号。可能的类型包括LCP数据包、NCP数据包、IP数据包和OSI模型网络层协议数据包。ICANN负责规定各种协议类型的标准标识号码。</p></blockquote><blockquote><p><strong>封装的数据（零或多个字节）：</strong>帧中传输的控制数据包或高层数据报。<br><strong>填充（可选，长度不定）：</strong>协议字段指定的协议所需的额外字节。每个协议自己负责区分填充字节与被封装的数据报。</p></blockquote><p><strong>2 PPP连接</strong><br>PPP连接的过程如下：</p><blockquote><ol><li>使用LCP协商过程建立连接。</li><li>如果第1步的协商过程指定了身份验证要求，通信计算机就进入身份验证阶段。RFC 1661提供了密码验证协议（PAP）和挑战握手验证协议（CHAP）这两个可选的验证选项。PPP还支持其他身份验证协议。</li><li>PPP利用NCP数据包指定与特定协议相关的配置信息。</li><li>PPP传输从高层协议接收到的数据。如果第1步的协商过程指定了链接质量监视，监视协议就会传输监视信息。NCP还可能传输与特定协议相关的信息。</li><li>PPP交换LCP终止数据包来关闭连接。</li></ol></blockquote><h4 id="9-2-电缆宽带"><a href="#9-2-电缆宽带" class="headerlink" title="9.2 电缆宽带"></a><strong>9.2 电缆宽带</strong></h4><p>&emsp;&emsp;Internet服务的要求，以及不断增强计算机系统的能力，促进业界寻找新的连接方式来取代速度慢的电话调制解调器。处于成本的考虑，服务提供商并不是提供一个全新的布线体系，而是利用现有线路提供Internet服务。<br>一种分布到每家每户兵器嗯可以支持Internet服务的布线系统就是优先电视网络。基于电缆的宽带目前在世界很多地方都很常见了，典型的电缆调制解调器连接如图9.5所示。</p><p>&emsp;&emsp;电缆调制解调器直接连接到一条同轴电缆，后者被连接到有线电视服务网络上。这个调制解调器通常具有一个以太网接口，可以连接到单台计算机或小型局域网中的交换机或者路由器。<br>&emsp;&emsp;前面讲到，术语“调制解调器”是由“调制器”和“解调器”的缩写。与电话调制解调器相同，电缆调制解调器实现数字数字信号与模拟信号的转换，从而让数据能够通过电缆连接高速运行。<br>&emsp;&emsp;名为电缆解调器终端系统（CMTS）的设备，在优先电视提供商网络的接口，接收来自电缆调制解调器的订好，把它转换回数字形式。有线电视提供商再从上游ISP租用宽带线路，利用路由器把用于与Internet连接起来。提供商还可以提供其他服务，比如用DHCP给网络上的用户动态分配IP地址。<br>&emsp;&emsp;虽然电缆调制解调器起到了两种不同传输介质的接口和作用，但它并不是一个指针的路由器，更像是一个网桥。电缆调制解调器根据物理（MAC）地址在网络访问层过滤通信。然而近几年来，有些厂商在一些家用路由器设备中内置了电缆调制解调器，所以我们可能会看到一些组合设备，它们同时具有路由器和电缆调制解调器的功能。</p><p>&emsp;&emsp;为防止盗用服务，有线电视公司通常要求用户预先注册电缆调制解调器的MAC地址才能连接网络。</p><h4 id="9-3-数字用户线路（DSL）"><a href="#9-3-数字用户线路（DSL）" class="headerlink" title="9.3 数字用户线路（DSL）"></a><strong>9.3 数字用户线路（DSL）</strong></h4><p>&emsp;&emsp;另一种适合实现家用宽带传输介质电话网。当然，传统的电话调制解调器使用的就是电话网。但电话公司认为使用不同的方法可以得到更好的性能，这就是数字用户线路（DSL）。<br>&emsp;&emsp;事实上，电话网使用的而双绞线能够提供的容量远超过语音通信的需求。DSL收发器作为局域网与电话网的接口，其工作频率不会影响线路的语音通信，因此DSL工作时不会占用线路或影响电话服务。<br>&emsp;&emsp;与电缆网络一样的是，DSL网络要求在线路另一端也有一台设备接收信号，并且通过服务提供商的网络连接到Internet，这种设备就是“数字服务线路访问多路复用（DSLAM）”,该设备充当DSL连接的另一端（图9.6）。与电缆网络上一个网段的全部用户共享介质不同，每个DSL用户在收发器与DSLAM之间都是专线连接，所以性能受通信量的影响比较小。读者可能觉得，电缆网络和LAN类似，而DSL线路则是点对点电话连接类似。</p><p>&emsp;&emsp;DSL具有多种形式，包括ADSL（非对称DSL，用于小型办公室和家庭的最流行方式）、HDSL（高速DSL）、VDSL（甚高速DSL）、SDSL(对称DSL上下行带宽相等)和IDSL（基于DLS的ISDN）。从协议层来看，DSL根据装置和实现有多种变化。有些DSL设备集成到了交换机或路由器。有写则充当了网桥（类似于电缆调制解调器），在网络访问层根据物理（MAC）地址过滤流量。DSL设备通常用点到点协议（比如PPP）封装数据，比如最流行的基于以太网的PPP（PPPoe）协议。</p><h4 id="9-4广域网"><a href="#9-4广域网" class="headerlink" title="9.4广域网"></a><strong>9.4广域网</strong></h4><p>&emsp;&emsp;大量计算机的公司和大型机构对网络访问的需求不能像拨号和DSL这样的小型技术所满足的，关键问题在于如何利用专有连接把分散在不同地点的分支部门连接起来，还有具有类似于局域网的私密性，并且在高级应用层面提供足够的性能。这个问题促进了广域网的发展。</p><p>&emsp;&emsp;广域网技术能够在远距离提供高速率带宽连网。虽然广域网的性能不是像局域网那样快，但通常比利用标准连网技术通过Internet连接远程主机的速度要快（而且更安全）。广域网风格的连接通常会以某种方式提供对大容量公司网络的访问，从某种意义上来说，广域网就是Internet本事的核心。</p><p>广域网的一些形式包括：</p><blockquote><p>帧中继<br>综合业务数字网（ISDN）<br>高级数据链路控制（HDLC）<br>异步传输模式（ATM）</p></blockquote><p>&emsp;&emsp;虽然这些看上去非常复杂，有些吓人（实际上也是），但实际上它们也是由于工作于TCP/IP网络访问层协议进行管理的物理网络规范的另一种形式（广域网协议几乎一直是OSI模型的中心，所以一定记住网络访问层对应OSI模型的物理层和数据链路层，也就是所谓的第1层和第2层）。</p><p>&emsp;&emsp;典型的广域网场景如图9.7所示。服务提供商运行一个广域网，提供对Internet的访问，也提供对用户分支机构的访问。一个本地环路把服务商的办公室连接到所谓的边界点，也就是客户连接到网络的点。客户提供路由器过其他必要的专用设备，从而通过局域网连接到广域网。</p><p>&emsp;&emsp;提供商确保从边界点之后的专用宽带和服务级别。服务的安排是多种多样的，可以用租借线路组成，也可以基于电路或包交换计量收费。</p><h4 id="9-5-无线网络连接"><a href="#9-5-无线网络连接" class="headerlink" title="9.5 无线网络连接"></a><strong>9.5 无线网络连接</strong></h4><blockquote><p>802.11网络<br>移动IP<br>蓝牙</p></blockquote><p>这些技术<code>集成</code>到<code>产品</code>和<code>服务的方式</code>取决于厂商。<br><strong>9.5.1 802.11网络</strong><br>&emsp;&emsp;物理网络的细节存在于TCP/IP协议栈的网络访问层。对无线TCP/IP网络的最简单理解就是在网络访问层使用无线方式连接到普通网络。流行的IEEE &emsp;&emsp;802.11规范为网络访问层进行无线网络连接提供了一个模型。<br>&emsp;&emsp;802.11协议栈如图9.8所示。网络访问层的无线组件与以前学习的其他网络体系是同等的。事实上，802.11因为与IEEE 802.3以太网标桩的相似性和兼容性，经常被称为无线以太网。</p><p>&emsp;&emsp;从图看出，802.11规范位于OSI参考模型的MAC子层。MAC子层属于OSI模型的数据联络层。从第2章中可以知道，OSI模型数据联络层和物理层对应于TCP/IP的网络访问层。物理层的各种选项分别代表了不同的无线广播形式，包括跳频扩频（FHSS）、直接序列扩频（DSSS）、正交频分复用（OFDM）和高速率直接序列复用（HR/DSSS）。<br>&emsp;&emsp;无线网络与优先网络的主要区别就是节点时移动的，换句话说，网络必须能够适应设备位置的改变。但前面的学习可以知道，TCP/IP网络的原始传输系统是建立在这样一种假设上：每台设备都位于固定位置。如果一台计算机移动到另一个网段，它必须配置为不同的地址，否则将无法工作。但无线网络上的设备会持续移动，而且在这个环境中虽然保留了以太网的很多传统，但情况可定会复杂的多，要求使用新的不同策略。<br><strong>注意：</strong>802.11家族</p><blockquote><p>&emsp;&emsp;802.11实际上是一系列标准的统称，最初的802.11标准（1997）支持在2.4GHz频率范围内最高速率2Mbit/s。802.11a标准支持5GHz频率范围内最高速率54Mbit/s。802.11b标准支持2.4GHz频率范围内传输速率5.5Mbit/s和11Mbit/s。最后出现的标准有802.11g(在2003年被采纳)和802.11n（2009）。</p></blockquote><p><strong>1. 独立网络和网络基础</strong><br>&emsp;&emsp;无线网络的最简单形式就是两台或多台具有无线王珂的而蛇币直接相互通信，这种类型的网络的正式名称为独立基本服务集（独立BBS或IBBS），通常被称为ad hoc网络。独立BSS对于小范围内少量计算机来说就够用了。独立BSS网络。独立BSS网络有一定局限性，因为它主要依赖参与连网的计算机，没有提供管理连接的基础设备，也就不能链接更大的网络，比如局域网或Internet。<br>&emsp;&emsp;另一种无线网络被称为基础基本服务集（基础BBS），在公司网络和其他机构是很常见的。基础BBS依赖于一个被称为访问点（Acess Point,AP）的固定设备与无线设备实现通信（图9.10）。AP利用无线广播与无线网络通信，它还通过传统连接方式连接到普通以太网。无线设备通过AP进行通信。如果一台无线设备想与同一区域中的其他无线设备进行通信，它把帧发送给AP，让AP把消息转发给目的。对于与传统网络的通信，AP就充当网桥的作用，把发给传统网络上设备的帧进行转发，并且把无线网络的通信隔离在无线区域中。<br>&emsp;&emsp;图9.10所示的网络让计算机像有线以太网络上那样工作。而且多个访问点通过传统以太网连接在一起来为较大区域提供服务时（见图9.11）基础BBS的配置也有很多好处。<br>&emsp;&emsp;802.11d的设计目标就是满足图9.11所示的网络需求，其里面是让移动设备在网络服务区域中漫游时保持连接。首先说明：如果设备需要接受全部网络传输，网络必须知道通过哪个AP能到达该设备，这当然要考虑到设备是可移动的，而且适合的AP也可能为未加提示的情况下发送改变。另外要说明的是，源地址和目的地址的传统概念对于在无线网络传输数据来说已经不够用了，802.11帧具有如下4中地址：</p><blockquote><p><strong>目的地址：</strong>帧传输的目的设备。<br><strong>源地址：</strong>发送帧的设备。<br><strong>接收者的地址：</strong>应该处理这个802.11帧的无线设备。如果帧要传输到无线设备，接收者地址就与目的地址是一致的。如果帧要传输到无线网络之外，接收者地址就是某个AP的地址，该AP会接收这个帧并且把它转发给以太网络。<br><strong>发射者地址：</strong>把帧转发给无线网络的设备地址。</p></blockquote><p>802.11的帧格式如图9.12所示，其中一些重要字段如下所示：</p><blockquote><p><strong>帧控制：</strong>一些较小字段的集合，描述了协议版本、帧类型和解释帧内容所需的其他值。<br><strong>期限/ID：</strong>设置传输大致应该持续多长的时间。还可以请求AP缓存的帧。<br><strong>地址字段：</strong>48位的物理地址。由于802.11有时需要最多4中不同的地址，所有会根据不同类型的帧使用不同的地址字段。第1个字段通常是接收者地址，第2个字段通常是发射者的地址。<br><strong>序列控制：</strong>片选序列（用于重组片选）以及帧的序列号。<br><strong>帧主体：</strong>帧中传输的数据。第2章中已经介绍过，帧中传输的数据还包括上层协议的报头歇息。<br><strong>帧校验序列（FCS）：</strong>一个循环冗余校验值，用于检查传输错误并验证帧在传输过程中没有改变。</p></blockquote><p>由于802.11是个网络访问层的协议集，所以802.11帧中使用的地址是48位物理地址，而不是IP地址。当设备在无线网络中移动时，它会向最近可用的P进行注册（从技术上讲，它会向信号最强、干扰性最小的AP注册）。这个注册过程被称为关联（association）。当设备漫游到另一个访问点附近时，它会重新关联到新的AP。这个关联过程让网络能够知道到达任何一设备应该使用哪个AP.</p><p><strong>注意：</strong> WiFi联盟</p><blockquote><p>为了确保802.11设备的兼容性，名为无线以太网兼容联盟（WECA成立于1991年）的组织提供了一个针对无线产品的认证项目。该组织后来将其名字命名为WiFi联盟，如果想得到Wi-Fi（无线保真）认证，必须对产品进行测试，已验证它与其他无线设备之间具有互操作性。有关WiFi联盟的更多信息，请访问<a href="http://www.wi-if.org。" target="_blank" rel="noopener">www.wi-if.org。</a></p></blockquote><p><strong>2. 802.11安全</strong><br>&emsp;&emsp;很明显，没有保护的无线网络时很不安全的。在对传统网络进行窃听时，至少需要连接到传输介质上。而对于无线网络来说，在其广播范围之内就可以进行攻击。如果网络没有设党的保证措施，不仅容易被窃听，而且很容易就让非法用户进入网络。<br>为了解决这些问题。IEEE制定了一个可选的安全协议标准用于802.11；有线等效保密（Wired Equivalent Privacy,WEP）标准，其目的是提供与传统优先网络大致相同的保密界别。<br>WEP的目标在于解决如下问题：</p><blockquote><p><strong>机密性：</strong>防止窃听<br><strong>完整性：</strong>仿真数据被篡改<br><strong>身份验证：</strong>对连接团队进行验证，确保他们有操作网络的必要权限。</p></blockquote><p>WEP使用RC4算法进行加密来实现<code>机密性</code>和<code>完整性</code>的目标。发送设备会生成一个完整性校验值（Integrity Check Value,ICV）,这个值是基于帧内容进行标准计算而得到的，它使用RC4算法进行加密，传输给接收方。接收设备对帧进行解密，计算ICV的值，如果计算后的ICV值与帧中传输的数值相同，就表示帧没有被修改。<br>&emsp;&emsp;然而,WEP受到了安全专家们的反对。大多数转接任务WEP是无效的。有些对于WEP的之一实际上是反对RC4加密算法的实现。WEP在理论上使用64为密钥，但其中24位是用于初始化的，只有40位用作共享密钥。专家认为40位的密钥太短了，所以WEP不能实现有效的宝华。专家还执泥密钥管理系统和用于启动加密的24位初始化矢量。<br>&emsp;&emsp;WEP2是对WEP的升级，把初始化矢量增加的128位，并且使用Kerberos身份验证来管理密钥的使用与分发。然而，WEP2并没有解决WEP的全部问题，因此出现了其他一些协议，比如可扩展身份验证协议(Extensible Authentication Protocol,EAP),可以解决WEP面临的难题。<br>&emsp;&emsp;作为一个更好的无线安全协议，802.11i标准草案出现于2004年，并在2007年收入802,11标准。这个新方法也被吃呢改为WiFi保护访问2(WiFi Protected AcessII,WPA2),使用AES块密码而不是RC4进行加密，而且具有更安全的身份验证和密码分发过程，WPA2是无线安全领域的一大进步，而且作为无线网络连接使用的首选安全方法对WEP进行替换。</p><p>&emsp;&emsp;其他安全方法：无线路由器设置允许访问网络计算的MAC地址。可有效的防止邻居盗用带宽，但有经验的入侵者能够绕过这种控制。</p><p><strong>9.5.2 移动IP</strong><br>&emsp;&emsp;世界各地移动设备给应答机制提出了一个问题。Internet 寻址系统是分级组织的，其前提是目标设备位于由IP地址定义的网段中。由于移动设备可能位于任何一个位置，所以通信规则就变得复杂多路。为了维护一个TCP连接，设备必须具有固定IP地址，这意味着漫游设备不能简单地使用一个由最近发射器分配的地址。另外由于这个问题与Internet寻址相关，它不能网络访问层得以解决，需要对网际成的IP协议进行拓展。移动IP拓展在RFC 3220中定义，之后又进行过多次更新，最新的IPv4移动标准是RFC5944。<br>&emsp;&emsp;移动IP给固定IP地址关联上一个辅助地址来解决寻址问题。移动IP环境如图8.13所示，设备具有属于家乡网络的固定地址。家乡网络上有一个被称为“家乡代理（Home Agent）”的专用路由器，它维护一个表格，把设备的当前位置与固定地址绑定。当涉笔进入到一个新网络时，它将注册到该网络中运行的外地代理（Foreign Agent）中。外地代理就把移动设备添加到访问者列表，并且把设备当前位置的信息发送给家乡代理，家乡代理就会用设备当前位置信息更新自己的移动性绑定表。当发往这台设备的数据报到达家乡网络时，它被封装到一个目标为外地网络的数据包，最终到达该设备。</p><p><strong>9.5.3 蓝牙</strong><br>&emsp;&emsp;蓝牙协议是无线设备的另一种规范。与802.11一样，蓝牙标准定义了OSI模型中数据链路层的物理层（等效于TCP/IP网络访问层）。在某种情况下802.11可以代替蓝牙，但是蓝牙的支持者总是很愿意表明蓝牙没有802.11的一些安全问题，然而蓝牙和802.11被看做是互补技术。802.11是为提供与以太网同等的无线网络，而蓝牙致力于在短距离范围之内为无线设备提供可靠的，高性能的环境。蓝牙的设计目标是实现一个小工作区域内一组无线交互设备的通信。在蓝牙的规范中，这个小区域被称为个域网（Personal Area Netwoek,PAN）.<br>&emsp;&emsp;像其他无线形式一样，蓝牙使用AP把无线网络连接到传统网络（在蓝牙属于中，这个AP被称为“网络AP”或NAP）。蓝牙封装协议能够对进行TCP/IP数据包进行封装，从而在蓝牙网络进行传输。<br>&emsp;&emsp;当然，如果一个蓝牙设备可以通过Internet访问，则它必须能通过TCP/IP访问。厂商预想生产一类兼容Internet的蓝牙设备，通过具有蓝牙功能的Internet网桥连接到Internet(图9.14)。蓝牙NAP设备充当网桥，通过具有蓝牙功能的Internet网桥，接收输入的TCP/IP数据，然后用蓝牙网络访问协议替换输入的网络访问层协议。从而把数据传输到接收设备。</p><h4 id="9-6-连接设备"><a href="#9-6-连接设备" class="headerlink" title="9.6 连接设备"></a><strong>9.6 连接设备</strong></h4><p>&emsp;&emsp;前面介绍了TCP/IP网络中与路由器相关的重要主题，虽然路由器时非常重要和基础的概念，但TCP/IP网络还有其他很多连接设备。<br>&emsp;&emsp;各种各样的连接设备都在TCP/IP网络<code>流量管理</code>中扮演不同的角色，下面将分贝介绍网桥、HUB和交换机。</p><p><strong>9.6.1 网桥</strong><br>&emsp;&emsp;网桥是根据物理地址过滤和转发数据包的连接设备，它工作于OSI模型的数据链路层（对应于TCP/IP网络的网络访问层）。近些年来，网络倾向于使用功能更强的设备，比如交换机，所以网桥的使用越来越少。但网桥的集散单性敲好适合作为讨论连接设备的触发点。<br>&emsp;&emsp;虽然网桥不是路由器，但仍然被使用一个路由表作为传输信息的根据。这个机遇物理地址的路由表与后面要介绍的路由表相比，不仅具有不同的形式，而且也简单得多。<br>&emsp;&emsp;网桥监听它所连接的每一个网段，建立一个表来反应物理地址位于哪个网段。当数据在一个网段上传输时，网桥会查看数据的目的地址，与路由表进行比较。如果目的地址属于发送数据的网段，网桥就忽略这个数据。如果目的地址在不同的网段，网桥就把数据转发到是的网段。如果目的地址不在路由表中，网桥就会把数据转发到除网段之外的全部网段。<br><strong>注意：</strong>网络地址 vs 逻辑地址</p><blockquote><p>要记住，网桥使用在基于硬件d物理地址与逻辑IP地址不同，这两者之前的去呗，详见第1~第4章，</p></blockquote><p>&emsp;&emsp;网桥层作为局域网上过滤流量的一种廉价设备大量使用，用于增加网络上能够融安的计算机数量。前面已经介绍过，现在一些网络访问设备都集成了网桥的功能。比如电缆调制解调器和某些DSL设备。由于网桥值使用网络访问层的物理地址，不检查IP数据报头的逻辑地址信息，所以不适合连接非同类网络。网桥也不能用于在大型网络（比如Internet）上实现数据转发的IP路由和传输方案。</p><p><strong>9.6.2 HUB</strong><br>&emsp;&emsp;以太网出现的早期，大多数网络的连接方式是用一条连续的同轴电缆把计算机连接起来，然而，随后几年，工程师看到了使用中心设备将计算机连接在一起所具有的优势（图9.15）。<br>&emsp;&emsp;在第3章讲过，经典的以太网概念是让全部计算机共享传输介质。每次传输都会被全部网络适配器监听。以太网HUB作为一个物理设备<code>从一个端口接收数据，然后把数据重复到区域全部端口</code>(见图9.15)。换句话说，全部计算机都好像是被一条连续线路连接在一起的。HUB不会过来或路由任何数据，只是接收和重新发送信号。<br>&emsp;&emsp;智能HUB，比如检测线路故障和关闭端口。目前HUB基本上已经被交换机取代了。<br><strong>9.3 交换机</strong><br>&emsp;&emsp;基于HUB的以太网，仍然面临传统以太网的问题：性能岁流量的上升而下降。只有当线路空闲时，计算机才能进行传输。而且每个网络适配器都必须接受和处理网络上的每个帧。为解决这个问题比HUB更智能的设备—交换机—出现了。在其最基本形式下，交换机类似于图9.15中所示的HUB，每台计算机也是通过一条线路连接到交换机。但是，交换机知道应该接收到发送给哪个端口。大多数叫交换机把端口与所连接设备器的物理地址关联起来。当一个端口所连接的计算机发送数据帧时，交换机会查看帧的目的地址。把帧发送给与目的地址相关联的端口。换句话说，交换机只向应该接收数据的适配器发送数据帧。这样一来，每个适配器就不需查看网络上传输的全部帧。因此交换机减少了多余的传输。从而改善了网络性能。</p><p>&emsp;&emsp;注意，前面描述的1类交换机制操作物理地址，不处理IP地址。交换机不是路由器，实际上他更像网桥，准确地说像多个网桥结合在一起。交换机对每个网络连接进行隔离，从而只让针对特定计算机的数据进行特定线路（图9.17）。<br>&emsp;&emsp;现在的交换方式有多种，最常见的两种交换方法如下所示：</p><blockquote><p><strong>直通式：</strong>交换机一获得目的地址就转发帧。<br><strong>存储转发：</strong>叫混迹在转发之前接收整个帧。这种法法会减缓转发过程，但有时可以改善整体性能。因为可以过滤出碎片和其他无效的帧。</p></blockquote><p>&emsp;&emsp;交换机在今年来变得非常流行。公司局域网通常会使用分层式的交换机和互连式的交换机来优化性能。</p><p><strong>注意：</strong>交换机和分层</p><blockquote><p>&emsp;&emsp;厂商现在把前面介绍这种基础交换机概念看做是一个更大类别交换设备的俄译中特例。更负责的交换机工作于更高的协议层，能够根据各种参数决定如何转发。更复杂的交换机工作于更高的协议层，能够根据各种参数决定如何转发，载这种更通用的交换方法中，设备根据其工作的OSI协议层进行分类。前面介绍的基本交换机工作于OSI模型的数据链路层，被称为第2层交换机。根据IP地质信息进行转发的交换机工作于OSI模型的数据链路层，被称为第2层交换机。根据IP地质信息进行转发的额交换机工作于OSI模型的网络层，被称为第3层交换机（显然，第3层交换基础上就是某种路由器）如果本节没有明确说明交换机是工作于哪一层的，它一般就是工作于第2层的，根据物理（MAC）地址进行过滤。</p></blockquote><h2 id="第10章-名称解析"><a href="#第10章-名称解析" class="headerlink" title="第10章 名称解析"></a><strong>第10章 名称解析</strong></h2><p>&emsp;&emsp;最初的名称解析是在每台主机上保存一份host或host.txt数据表。需要手动更新，比较负责。之后出现DNS服务器，所有的名称由专门的DNS服务器，进行解析名称，DNS服务器并且进行分层。另外DNS名称空间是个多次排序的域名（图10.4）。TLD(Top Level Domain)顶级域名，是世界上最著名的DNS名称空间。域名可以包含主机名,这种域名被吃呢改为完全限定域名（FQDN）。<br>&emsp;&emsp;NetBIOS Microsoft网络中常用的名称解析系统。<br>&emsp;&emsp;DNS实现，DNS必须被实现为服务或后台程序。Windows服务器自带一个DNS服务，当然，有些管理员会倾向于使用第三方的DNS实现。在UNIX/Linux上则很多DNS实现，其中最长用的Berkeley Internet Name Domain(BIND)。</p><p><strong>DNS安全扩展（DNNSEC）</strong><br>&emsp;&emsp;DNS数据是公共的，在这种情况下，安全型不在意味着私密性。但是客户端仍然需要一些方法来确保对DNS请求的<code>答复是来自于真实的DNS服务器</code>,而且这个服务器应该由区域进行监管。攻击者已经开发了集中技术来针对DNS查询发送伪造的响应。截获了DNS请求的攻击者可以发送伪造的响应，将可短端重定向到秘密的DNS服务器，该服务器充当启动攻击的一种手段。只是伪造的回复先于真是的回复达到DNS客户端，则该客户端就落入了圈套。这个问题的解决方案是提供一种方式来<code>验证返回的DNS数据源的有效性</code>。DNS安全扩展（DNSSEC）提供了验证DNS数据有效性的系统，如今很多操作系统都提供了DNSSEC选项，但是该DNSSEC仍然没有大范围的实现。但是有些高性能（high-profile）的域已经全面支持DNSSEC，是的DNSSEC慢慢被公众所接收。DNSSEC使用<code>加密密钥</code>和<code>数字签名</code>来提供安全。详见（第11章）。DNSSEC需要支持DNS扩展机制（EDNS）。ENDS的DO报头位表示一个DNSSEC查询。<br>&emsp;&emsp;DNSSEC添加了一个验证过程来确保DNS查询的结果是可信的。与基本的DNS名称解析过程相似，DNSSEC从一系列步骤到达与给定查询中的名称相关联的区域。但是DNSSEC增加了一个信任链(chain-of-trust)类型的验证，其理念是<code>从一个受信任的来时，将球球沿着一系列一直的和验证过的步骤向下传输，直到到达这样一个服务器；该服务器拥有一个用用来验证DNS数据来源的签名。</code>为了实现该目标，DNSSEC添加了4个新的NDS资源记录类型。</p><blockquote><p>DNSKEY: 用来签名和验证DNS资源记录集的公共密钥。<br>DS:指向（并验证）子区域DNSKEY的资源记录。</p></blockquote><p><strong>DNS 工具</strong><br>&emsp;&emsp;1.使用ping检查名称解析<br>&emsp;&emsp;2.使用NSLookup检查名称解析<br>使用NSLookup工具查询NDS服务器，查看资源记录等信息。在需要对DNS问题进行<code>排错</code>时这个工具也十分有用，NSLookup工具可以按照下面两个模式进行操作。</p><blockquote><p><strong>批处理模式：</strong>在壁橱里模式中，用户可以启动NSLookup提供一些输入参数，NSLookup会根据参数执行被请求的功能，显示结果，最终关闭自己。<br><strong>交互式模式：</strong>在交互式模式下中，用户启动NSLookup时不需要提供输入参数。NSLookup会提示用户输入参数。在用户输入参数后，NSLookup将执行被请求的操作，显示结构并重新返回提示符状态，等待接下来被输入的参数。大多数管理员都会使用交互式模式，这是因为在需要执行一系列操作时，这种模式更方便。</p></blockquote><p><strong>域名信息搜索(DIG)</strong><br>&emsp;&emsp;Linux（在服务器机房中很常见）上一个留学的DNS命令工具是域名信息搜索（Domain Information Groper，DIG）许多管理员认为DIG要比NSLookup更灵活。（dig ）</p><p><strong>动态DNS</strong>：<br>&emsp;&emsp;上述所介绍的DNS都是用于主机名和IP地址永久（半永久）关联情况下。计算机每次启动时，DHCP都会分配一个新的IP地址。这意味着,DNS服务器必须通过某种法法获悉该计算机正在使用的IP地址。<br>&emsp;&emsp;由于动态IP地址的逐渐流行，DNS厂商必须加以适应，现在，一些IP实现（包括BIND）提供了动态更新DNS记录的功能。在图10.9所示典型场景中，主机从DHCP服务器获得IP地址，必须使用这个新地址更新DNS服务器。（DHCP详见第12章）<br>&emsp;&emsp;企业目录系统（比如Microsoft的活动目录）在目录结构中使用动态DNS来管理DHCP客户端系统。懂台DNS服务在Internet上也是常见。有些在线服务提供了一种方法，可以让使用动态地址的计算机注册一个永久的DNS名称。用户可以访问这些服务，来远程连接到使用DNS名称的家庭网络中，或者是运行没有静态地址的个人站点。<br><strong>注意：</strong> DNS服务发现</p><blockquote><p>&emsp;&emsp;DNS最近的另外一个创新是DNS服务发现，有关DNS服务发现的详情觉其他零配置技术介绍，详见12章。</p></blockquote><p><strong>NetBIOS名称解析</strong><br>&emsp;&emsp;NetBIOS是一个API和名称解析系统，最初是由IBM开发，如今在Microsoft的Windows网络中很常见。NetBIOS被开发出来的目的是将其用于不使用TCP/IP的网络。，流行和Samba文件服务和其他独立的工具也都支持NetBIOS名称解析。<br>1.NetBIOS名称的解析方法<br>&emsp;&emsp;在TCP/IP网络上，NetBIOS名称即系的最终目的是为一个给定的NetBIOS名称提供IP地址。<br>&emsp;&emsp;NetBIOS名称是由15个字符组成的。例如Workstation1、HBServer和CorpServer。NetBIOS不允许在网络上由重复的计算机名。<br><strong>注意：</strong>NetBIOS名称</p><blockquote><p>&emsp;&emsp;从技术角度讲，NetBIOS名称由16个字符。但是，第16个字符是由底层应用程序使用的，通常不用用户直接配置。随扈的内容将讨论这些字符。</p></blockquote><p>&emsp;&emsp;NetBIOS名称与主机名类似，没有层次。集中将NetBIOS名称解析为相应IP地址的方法：</p><blockquote><p>基于广播的名称解析<br>LMHosts文件名称解析<br>WINS名称解析</p></blockquote><p>（1）、基于广播的名称解析<br>&emsp;&emsp;NetBIOS名称解析可以通过广播完成。计算机会使用广播与本网段中其他所有机器联系，要求返回特定计算机的地址。网段上的计算机监听到广播后，只有指定的计算机才会响应这个请求。这种名称解析的方法被称为B-Node名称解析。它可以在LAN环境中很好工作，但如果网络不仅仅局限于LAN，这种方法就无法工作（由于路由器会阻止广播传递）。<br>（2）、LMHosts文件名称解析<br>&emsp;&emsp;Windows系统还可以使用LMHosts文件将NetBIOS名称解析成IP地址。LMHosts文件与主机文件很相似，会将NetBIOS名称与IP地址关联。</p><h2 id="第11章-TCP-IP-安全"><a href="#第11章-TCP-IP-安全" class="headerlink" title="第11章 TCP/IP 安全"></a><strong>第11章 TCP/IP 安全</strong></h2><h5 id="1-什么是防火墙"><a href="#1-什么是防火墙" class="headerlink" title="1. 什么是防火墙"></a><strong>1. 什么是防火墙</strong></h5><p>&emsp;&emsp;早期的防火墙只是包过滤，许多包过滤防火墙会查看封装在传输层报头中的TCP和UDP端口号。因为大多数Internet服务都与端口号相关联，因此通过检查数据包的目的端口号可以确定数据包的企图。这种形式的数据包过滤可以让管理员声称“外部的客户端无法访问内部往来上的Telnet服务”。存在问题，端口重置配置<br>&emsp;&emsp;在防火墙的进化过程中，出现了另外一种称之为有状态防火墙的设备。有状态防火墙不仅仅是单独价差每一个数据包，还会检查数据包包含在哪个通信会话新序列中。这种状态敏感性有助于有状态防火墙监视诸如无效数据包、会话劫持企图，以及某些拒绝服务攻击这样的攻击手段。<br>&emsp;&emsp;应用层防火墙是最新一代防火墙。在TCP/IP应用层。可以更全面地理解与协议和服务相关联的数据报。</p><p><strong>DMZ</strong><br>&emsp;&emsp;防火墙为内部网络提供了一种受保护的空间，是网络很难从外部进行访问，这个概念对于Web客户端工作组（其中包含烧录满足内部需要的文件服务器）是很适合的。不过在很多情况下，一个公司通常不会禁止外部网络访问自己的所有资源。例如，需要从外部访问公共Web服务器，许多公司还安装了FTP服务器、E-mail服务器和其他需要从Internet访问的系统。尽管从理论上讲，只要开发防火墙的端口就可以允许外部客户访问特定系统上的特定服务，但是，这也就是说，服务器可以从外部进行操作，其结果是导致一系列网络管理员不希望看到的流量和安全型问题。<br>&emsp;&emsp;一种方法是将服务器放在防火墙之外（Internet—-服务器—-防火墙）（图11.2）。使之与内部网络的客户端隔离。另外替换方案（相对于图11.2所示方案）图11.3。使用两个防火墙。另个防火墙之前的空间被称为DMZ(一种军事术语—-Demilitarized Zone非军事地带)。与开放的Internet相比，DMZ可能提供更好的安全性，但是其安全性比内部网络低<br>&emsp;&emsp;图11.3所示的场景还可能出现下面的情况；只使用一个能够连接多个网段中的防火墙，如图11.4所示，如果防火墙/路由器有3个或更多的接口，可以将内部网络和DMZ分别连接到这些接口上，同时为每个接口应用不同的过滤规则。</p><p><strong>防火墙规则</strong><br>&emsp;&emsp;通常允许网络管理员创建的内容包括：</p><blockquote><p>资源地址或地址范围<br>目的地址范围<br>服务<br>行为</p></blockquote><p>这些参数提供了大量选项，用户可以关闭所有来自获取网特定地址范围的流量。可以关闭来自于特定地址的特定服务，例如Telnet或FTP。</p><p><strong>代理服务</strong><br>&emsp;&emsp;所有用来保护和简化内部网络，将潜在不安全Internet活动限制在边界之外的技术中心，防火墙是核心技术。另一种相关的技术是<code>代理服务</code>。代理服务器可以接货对Internet资源的请求，并替换客户端转发这些请求，它在客户端和请求目的的服务器之间扮演了一个中介的角色（图11.6）。尽管代理服务器不足以通过自己包含网络，但是它通常被用于与防火墙联合使用（尤其是在网络地址转换环境中）。<br>&emsp;&emsp;代理服务器可以使得客户端免于直接与恶意网站联系。一些代理还可以执行<code>内容过滤</code>。查看信息是否来自于<code>黑名单的服务器</code>，或者内容是否带有潜在的危险。代理服务器还常被用来<code>限制</code>内部网络客户端的<code>浏览范围</code>。<br>&emsp;&emsp;在很多情况下，使用代理服务器的主要目的是<code>性能</code>，而非安全性。代理服务器还可以执行对服务器的<code>内容缓存</code>。内容缓存代理服务器会保存被访问过网页的拷贝。对这些网页的再次请求将直接用本地拷贝响应。</p><p><strong>逆向代理</strong><br>&emsp;&emsp;传统意义上的代理服务器（在一节中描述）代理的是对向外发送到Internet上的请求。另一种形式的代理服务器被称为<code>逆向代理</code>，它接收来自外部资源请求，将这些请求转发给内部网络。与常规代理服务器相同，逆向代理也提供缓存和内容过滤特性。因为逆向代理主要用于<code>保证</code>计算机能够在<code>Internet上提供服务</code>，因此<code>安全性</code>特别重要。</p><h4 id="2-攻击技术"><a href="#2-攻击技术" class="headerlink" title="2. 攻击技术"></a><strong>2. 攻击技术</strong></h4><p>&emsp;&emsp;有若干个方法来获得入口和取得足够的权限，尽管不可能描述全它们，但是可以把这些技术分为3个基本的类别。</p><blockquote><p>&emsp;&emsp;<strong>证书攻击：</strong>这些高攻击集中在获得证书以正常进入系统。在本质上，这些攻击甚至发生在入侵者渗入安全系统之前。这一技术 的一种变型是权限提升，即攻击者先获得低级别的访问权，然后再设法获得更高的权限级别。<br>&emsp;&emsp;<strong>网络层攻击：</strong>攻击者通过找到一个开放的端口、无保护的服务或者是防火墙中的缺口偷偷进入。其他网络层攻击技术利用TCP/IP协议系统的席位差别，以获得信息或重新路由连接。<br>&emsp;&emsp;<strong>应用层攻击：</strong>攻击者利用系统上运行的某个应用程序（例如Web服务器）的代码中的已知缺陷，欺骗该应用程序执行任意命令，或者是以一种程序设计人员从未想到的方式运行。</p></blockquote><p>&emsp;&emsp;一次全面的而忘了入侵，通常组合使用这些攻击技术。典型情况下，攻击者可能会使用应用层攻击作为最初的图片，然后把权限逐步提升至管理员级地位，再接着打开一个隐藏的后门，以便无限制的访问整个系统。”后门”常用的技术是安装一个rootkit来在系统上找到一个立足点，然后再掩盖入侵。<br>1、证书攻击：<br>常用的密码攻击方法包括：</p><blockquote><p>看看机箱外面；<br>特洛伊木马<br>猜测<br>窃听</p></blockquote><p>2、特洛伊木马<br>&emsp;&emsp;早期的特洛伊木马是，伪造登录屏幕。这种偷取密码的技术针对公共设置而设计。并不是所有的特洛伊木马都捕捉密码，而且并不是所有密码特洛伊都像本节所描述的那个示例那样木马张胆。许多木马程序，有些表现为游戏或假的系统工具。<br>3、猜测<br>4、窃听<br>&emsp;&emsp;包嗅探器（Packet Sniffer）和其他监视网络流量的工具，可以轻松地捕获以明文形式在网络上传输的密码。许多经典的TCP/IP实用程序；例如Telnet和r*工具，或者是SNMP,都被设计为明文形式传输密码。加密SSL和IPSec。</p><p><strong>网络层攻击</strong><br>&emsp;&emsp;通过端口来进行攻击。一般使用Nmap和Nessus之类的扫描工具，可以自动完成查找开发端口的过程。<br><strong>应用层攻击</strong><br>&emsp;&emsp;缓存区溢出。如果用户的而输入溢出该缓冲区，奇怪的事就会发生。如果输入没有被适当管理，那么溢出缓冲区的数据就可能边长为驻留在CPU的执行区域中，那以为这经过缓冲区溢出发送给计算机的命令，可能会被实际执行（图11.8）。避免缓冲区溢出问题，应用程序必须提供一种方法，在将数据写入应用程序一出去之前，接收并检查数据的大小。较好的解决办法是在养成良好的程序设计习惯。<br><strong>root访问</strong><br>&emsp;&emsp;在入侵者进入网络之后，首要任务是上传一个rookit,用于在系统上建立一个更加稳固的立足点。rootkit还具有额外特性，Key loggers能够捕获和记录键盘输入。<br><strong>网络钓鱼</strong><br>&emsp;&emsp;超文本链接，以指向一个不同的网站。不仔细检查URL，很容易上当。最好策略，不要点击不明链接。还有一种被称为<code>跨站脚本策略</code>，利用代码注入，绕过浏览器安全措施，以发起用户正在查看的页面不易追踪的某个恶意脚本。<br><strong>拒绝服务攻击</strong><br>&emsp;&emsp;进来，一种狂热的Internet入侵是拒绝服务（Denial of Service,DoS）攻击。DoS一旦发起，几乎不可能停止，因为它并不要求攻击者在系统上拥有特定权限。DoS攻击的关键是用大量的请求阻塞系统，使系统资源全部耗尽，性能降低。最危险的DoS攻击是分布式DoS攻击。在分布式DoS攻击中，攻击者利用若干台远程计算机，只会其他远程计算机发起一场协同攻击。有时，几百台或几千台计算机可能参与到针对某个IP地址的攻击。</p><p><strong>防范措施</strong></p><blockquote><p>使用正确配置的防火墙<br>使用安全的密码。尽管具体策略不同，但是大多数专家都建立密码的最短长度为6~8个字符，而且面中要包含字符、数字和标点符号。<br>不要单击可疑的链接<br>使用最低的权限来操作<br>windows系统，安装病毒防护软件<br>关闭不需要的服务<br>如果必须要访问内部网络，请使用VPN来进行加密通信。<br>使用防火墙，关闭所有端口，关闭所有网络服务，除非你是真的需要的这些服务。<br>在沙箱环境中运行服务，<br>无线网络中使用加密<br>经常安全更新</p></blockquote><h4 id="4-加密和保密"><a href="#4-加密和保密" class="headerlink" title="4. 加密和保密"></a><strong>4. 加密和保密</strong></h4><p>&emsp;&emsp;本节先讨论了机密性的目的（确保数据的秘密）。安全系统还必须满足如下需求：</p><blockquote><p><strong>身份验证：</strong>确保数据来自产生它的源头。<br><strong>完整性：</strong>确保数据在传输过程中未被篡改。</p></blockquote><p>本章后续内容重点关注如何保护TCP/IP免受<code>窃听</code>、<code>截获</code>和<code>操纵</code>。</p><p><strong>算法和密钥</strong><br>对称加密，非对称加密，数字签名，数字证书。<br><strong>保护TCP/IP</strong><br>（1）、SSL和TLS<br>&emsp;&emsp;安全套接层（Secure Sockets Layer,SSL）是美国Netscape公司为保护Web通信而引入的一个TCP/IP安全协议集。SSL的<code>目的</code>，在<code>传输层</code>的<code>套接字</code>和<code>提供那些套接字访问网络的应用程序</code>之间提供一层安全。<br>图11.15显示了SSL在TCP/IP协议栈中的位置。理念是，在SSL被激活时，网络服务（例如FTP和HTTP）便将受到安全的SSL协议的保护，以免遭攻击，传输层安全（Transport Layer Security TLS）。以SSL3.0为基础，所以通常被认为是SSL的后续产品，现在它已成为业界标准。但是，在产品名称和真是的软件中，仍然称其为SSL。TLS协议与SSL类似。<br>&emsp;&emsp;仔细查看SSL层，可以发现它包含两个子层（见图11.16）。SSL记录协议（Record Protocol）是访问TCP的一个标准库。在这个记录协议之上，是一组执行特定服务的SSL相关协议。</p><blockquote><p>SSL握手协议（Handshake Protocol）：用来访问TCP的基础协议。<br>SSL更改密文规范协议（Change Cipher Spec Protocol）:支持对加密套件设置的更改。<br>SSL告密协议（Alert Protocol）：发出告警。</p></blockquote><p>SSL采用公开密钥加密，并提供对数字证书的支持，带有SSL加密的HTTP Web协议版本被称为HTTPS。SSL在传输层之上。</p><blockquote><p><strong>注意：</strong> SSL和TLS都是用于面向连接的TCP连接，称之为数据报报传输协议安全（Datagram Transport Protocol Security,DTLS）的另外一种协议提供了类似于TLS的安全，它可以支持使用UDP的无连接通信。</p></blockquote><p>（2）IPSec<br>&emsp;&emsp;IP安全（IPSec）是TCP/IP网络上使用的另一种安全协议系统。。IPSec在TCP/IP协议栈中运行，位于传输层之下。IPSec提供对<code>机密性</code>、<code>访问控制</code>、<code>身份验证</code>和<code>数据完整性</code>支持。IPSec还可<code>防护重放攻击</code>。相互通信的两台计算机的协议栈都必须支持IPSec。IPSec非常适用于为像路由器和防火墙之类的网络设备提供安全。IPSec可以以下面两种模式之一运行。</p><blockquote><p>传送模式为IP数据包的载荷提供加密。该载荷然后被封装进一个正常的IP数据包中进行传送。<br>隧道模式加密整个IP数据包。加密后的数据包，然后被作为载荷封装到进另一个外部数据包。</p></blockquote><p>IPSec隧道模式通常用于虚拟专用网络（VPN)产品,它们用来在公共网络中创建一个完全专用的通信隧道。<br>&emsp;&emsp;IPSec使用许多加密算法和密钥分发技术，数据使用像AES、RC5或Blowfish这样的常规加密算法进行加密，身份验证后密钥分发可能会使用公开密钥技术。</p><p>（3）、虚拟专用网络（VPN）<br>&emsp;&emsp;虚拟访问这个问题实际上已经是贯穿TCP/IP发展的一个重要问题。如何连接距离不是很近，不够采用LAN样式电缆连接的计算机呢？系统管理员总是依赖以下两种重要的方法进行远程连接。</p><blockquote><p>拨号：远程用用通过调制解调器连接到某个拨号服务器，后者充当到网络的一个网关。<br>广域网（WAN）：两个网络通过租用电话公司或Internet服务提供商的专用线路连接在一起。</p></blockquote><p>&emsp;&emsp;这两种方式都有缺点。拨号连接速度慢，而且他们依赖于电话连接的质量。WAN连接有时也比较慢，最重要的是，构建和维护WAN会比较昂贵，而且它不可移动。针对这些问题的一种解决方法是：通过开放式的Internet直接连接到远程网络。这个方法快速、方便，但是Internet上充满敌意和不安全因素，如果不提供某种防止窃听的方式，那么这样的选择完全不可行。专家考虑是否有某种方式可以利用加密工具来创建一个穿过公用网络的专用隧道。这个解决方便便形成了我们现在所知道的虚拟专用网络（Vitural Private Network,VPN）。VPN建立一个横穿网络的点对点“隧道”。</p><blockquote><p><strong>注意：</strong> VPN协议<br>&emsp;&emsp;本章前面所讲的IPSec是一种支持安全网络连接的协议，而VPN就是连接的本身。VPN应用程序就是创建和维护这些专用远程连接的程序。有些VPN工具利用IPSec进行加密，有些则依赖于其他SSL或其他加密技术。Microsoft的系统通过“点对点隧道协议”（源自PPP调制解调器协议）提供VPN隧道功能；比较新的Microsoft系统为VPN会话采用“第2层隧道协议”（L2TP）。</p></blockquote><p>&emsp;&emsp;如果传输链中的每一台路由器都需要知道加密密钥，那么本章前面所描述的加密技术将无法很好地发挥作用。加密是<code>针对点对点连接的</code>。这里的理念是：远程服务器上VPN客户端软件与一台充当所有网络网关的VPN服务器建立连接（图11.17）。VPN客户端和服务器交换通过Internet政策传递的、可路由的明文TCP/IP数据报。不过，通过VPN连接发送的载荷（即数据），实际上就是加密后的数据报。加密后的数据报（在开发的Internet上是不可读的）被封装入可读取明文的数据报中，在转发给VPN服务器。VPN服务器软件接着提取加密后的数据报，利用加密密钥解密该数据报，然后将封装数据转发至受保护网络上的目的地址。</p><p>（4）、Kerberos<br>&emsp;&emsp;Kerberos是一种基于网络的<code>身份验证</code>和<code>访问控制</code>系统。用于支持<code>跨敌意</code>网络的安全访问。对于敌意网络的安全通信问题，较简洁的回答就是加密。较长的回答则是提供一种手段，来保护加密密钥的安全。Kerberos提供一种系统的方法，用于向通信主机分发密钥，并检验情书访问某一服务的客户端的证书。<br>&emsp;&emsp;Kerberos系统使用被称为<code>密钥分发中心（Key Distribution Center,KDC）</code>的服务器来管理密钥分发过程。Kerberos身份验证过程涉及以下<code>3个实体的关系</code>。</p><blockquote><p><strong>客户端：</strong>请求访问服务器的计算机<br><strong>服务器：</strong>在网络上提供服务的计算机<br><strong>KDC：</strong>指定为网络通信提供密钥的计算机</p></blockquote><p>&emsp;&emsp;Kerberos身份验证过程如图11.18，<code>注意</code>,这个过程假设KDC已经有一个共性的密钥可以用来与这里的客户端进行通信，还有一个共享的密钥可以用来与这里的服务器进行通信。这些密钥用来加密一个新的会话密钥，客户端和服务器将使用它进行相互通信。KDC用来为客户端和服务器加密数据的那两个单独密钥被称为<code>长期密钥</code>。长期密钥通常产生于KDC和另一台计算机共享的一个秘密。一般而言，客户端长期密钥尝试与客户端和KDC都知道的用户登录密码的一个哈希。<br>                            图11.18<br>&emsp;&emsp;具体过程如下。记住，Kerberos一般<code>使用</code>常规的<code>（对称）加密</code>技术，而不是公开密钥的（非对称）加密技术。</p><blockquote><ol><li>这里的客户端想要访问服务器A上的额某个服务。它向KDC放放松一个请求来访问服务器A上的服务（在某些情况下，客户端已经经过身份验证，并接收到一个单独的会话密钥，用于加密与KDC上票证授予服务的通信）。</li><li>这里的KDC执行以下步骤</li></ol><ul><li>a. KDC生成一个会话密钥，该密钥用于加密客户端和服务器A之间的通信。</li><li>b. KDC创建一个会话票证（session ticket）,它包括步骤2a中所生成的会话密钥的一个副本。该票证还包含时间戳信息以及有关正在请求访问的客户端的信息，例如客户端安全设置。</li><li>c. KDC使用服务器A的长期密钥加密刚创建爱你的会话票证</li><li>d. KDC为客户端绑定加密后的会话票证、会话密钥的一个副本以及其他响应参数，并使用客户端的密钥加密整个数据包。该响应然后被发送给客户端。</li></ul><ol start="3"><li>客户端接收来自KDC的响应并解密。客户端将获得与服务器A通信所需的会话密钥。它所接收的密钥加密整个数据包，还包括KDC创建的会话票证，那是使用所请求的服务器的长期密钥加密的。客户端无法读取该会话票证，但是它知道必须将此票证发送给相应的服务器，才能通过身份验证，客户端创建一个鉴别码（一串身份验证参数），并使用这里的会话票证对它进行加密。</li><li>客户端向服务器A发送一个访问请求。该请求包括上述会话票证（已使用所情书服务器的长期密钥进行加密）和鉴别码（已使用会话密钥进行加密）。这里的鉴别码包括用户的名称、网络地址和时间戳信息等。</li><li>服务器A接收上述请求。服务器A使用其长期密钥解密上述会话票证（见步骤2c）。服务器A从会话票证中提取会话密钥，并使用该会话密钥解密鉴别码。服务器A检验鉴别码中的信息是否与包括在会话票证中的信息相匹配。如果是，则授予对所请求服务的访问权。</li><li>作为可选的最后一步，如果客户端想要检验服务器A的整数，服务器A将用会话密钥加密一个鉴别码，并将这个鉴别码返回客户端。</li></ol></blockquote><p>作为一种为网络提供统一标准登录系统的手段，Kerberos系统正越来越流行。Kerberos 4使用DES加密技术，前面讲过，许多加密领域的专家认为该技术不安全。Kerberos 5则支持AES和其他加密类型。</p><blockquote><p><strong>注意：</strong> 3个头?<br>&emsp;&emsp;Kerberos（也称Cerberus）。三个头就是Kerberos身份验证过程的3个要素（客户端、服务器和KDC）。Kerberos系统最初设计使用身份验证、账户管理和审核这三个头，守护网络的入口，但是其中的后两个头（账户管理和审核）从未实施。安全界很轻易地发现。相对于把相应的协议重新命名为相当单头犬来说。</p></blockquote><p>关键术语：<br><strong><code>高级加密标准（Advanced Encryption Standard,AES）:</code></strong>一种对称加密，支持128,192和256为密钥长度<br><strong><code>非对称加密：</code></strong>使用不用密钥进行加密和解密的加密方法<br><strong><code>后门：</code></strong>可以进入计算机系统的一条隐藏路径。<br><strong><code>Blowfish：</code></strong>一种对唱加密算法，支持最多448位密钥长度<br><strong><code>缓冲区溢出：</code></strong>一种攻击方法，攻击者向系统发生恶意的命令，从而导致应用程序的缓冲区超出限度。<br><strong><code>认证中心（Certificate Authority,CA）:</code></strong>监视证书床啊进和递送过程的中央权威。<br><strong><code>拒绝服务攻击（Denial of Service,DOS）:</code></strong>通过消耗系统资源来使受害者的系统无法提供政策服务的一种攻击手段。<br><strong><code>数字证书：</code></strong>一种加密的额数据结构，用来分发公安密钥。<br><strong><code>数字签名：</code></strong>用来校验发送方身份和数据完整性的加密字符串。<br><strong><code>DMZ：</code></strong>安置Internet服务器的一个中间地带，位于前端防火墙之后，但是在具有更严格限制的而后段防火墙（用于保护内部网）之前。<br><strong><code>加密：</code></strong>系统地修改数据的万国城，使得未授权的用户无法读取它们。<br><strong><code>加密密钥：</code></strong>和加密算法一起用来加密或解密数据的一个值（通常秘密保管）。<br><strong><code>防火墙：</code></strong>一种用于限制网络访问内部网段额设备或应用程序。<br><strong><code>IPSec(IP安全)：</code></strong>一种有多个IP协议扩展组成的安全协议系统。<br><strong><code>KDC（密钥分发中心）：</code></strong>在Kerberos网络上管理密钥分发过程的服务器。<br><strong><code>Kerberos：</code></strong>一种网络身份验证系统，用来保证通过第一网络访问服务的安全性。<br><strong><code>包过滤器：</code></strong>一种防火墙，可以通过端口号或洽谈能够标明包目的的协议信息过滤数据包。<br><strong><code>网络钓鱼：</code></strong>利用某个伪造的链接、消息或网页来诱使用户主动连接到某个欺诈网站。<br><strong><code>私有密钥：</code></strong>非对称加密中使用的一种密钥，它被秘密保管，并且不在网络上分发。<br><strong><code>代理服务器：</code></strong>用于代表客户端对服务发出请求的计算机或应用程序。<br><strong><code>公开密钥：</code></strong>非对称加密中使用的一种密钥，它在网络上分发。<br><strong><code>Rootkit：</code></strong>入侵者永凯扩展和伪造其对某一系统的控制的一组工具。<br><strong><code>会话劫持：</code></strong>一种攻击方法，允许攻击者在现有TCP会话中插入恶意数据包。<br><strong><code>SSL（安全套接字）：</code></strong>一种最初由Netscape公司开发的安全协议系统，它在TCP协议的上方运行。SSL已经被TLC正式取代。<br><strong><code>有状态防火墙：</code></strong>能够感知连接状态的防火墙。<br><strong><code>TLS(传输层安全)：</code></strong>基于SSL的一种安全的传输层协议。<br><strong><code>X.509：</code></strong>一种描述数字证书过程和格式的标准。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2018/05/13/%E7%AC%94%E8%AE%B0/02%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/05/13/%E7%AC%94%E8%AE%B0/02%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近比较空闲，之前收藏了很多文章，一直保存在收趣上，最近对其进行了分类，然后工作中有整理了一些笔记(.md)，一直想自己写个网站保存一下。然后最近刚好接触了一下将markdown文章转为html，又在网上搜了一些资料，对其整理一下供大家学习。</p><p>这里主要使用的Hexo博客框架。开始配置的是linux环境，不知怎么一直没有成功。启动服务后，web一直出错。在解决问题时无意看到windows环境，以下介绍给大家。</p><p>本文windowns环境搭建参考：<a href="https://blog.csdn.net/AinUser/article/details/77609180" target="_blank" rel="noopener">https://blog.csdn.net/AinUser/article/details/77609180</a></p><h2 id="一、下载工具（git-node-js-hexo"><a href="#一、下载工具（git-node-js-hexo" class="headerlink" title="一、下载工具（git  node.js hexo)"></a>一、下载工具（git  node.js hexo)</h2><p><strong>window 下环境搭建：</strong></p><h3 id="1、git"><a href="#1、git" class="headerlink" title="1、git"></a>1、<code>git</code></h3><p>(1)下载<br>官网：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br>(2)安装</p><div align="left"><p><img src="/img/note_02/01.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_02/02.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_02/03.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_02/04.png" alt></p></div><p></p><p>中间未说明安装过程，按照默认选择。</p><h3 id="2、node-js"><a href="#2、node-js" class="headerlink" title="2、node.js"></a>2、<code>node.js</code></h3><p>(1)、下载<br>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>(2)、安装<br>nodejs的安装不需要注意任何问题，最多修改安装路径，其他一直点击next，直到finish。</p><h3 id="3、hexo"><a href="#3、hexo" class="headerlink" title="3、hexo"></a>3、<code>hexo</code></h3><p>hexo 安装不同于git和node.js，这里使用git命令行模式下安装<br>首先创建一个文件夹<code>Hexo</code></p><div align="left"><p><img src="/img/note_02/05.png" alt></p></div><p></p><p>点击<code>Git Bash Here</code>之后，出现命令行模式窗口，命令行窗口安装hexo;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>如下图：</p><div align="left"><p><img src="/img/note_02/06.png" alt></p></div><p></p><p>以上基本的需要的软件就安装完成了，接下来就开始使用<code>hexo</code>建站了.</p><p>** ubuntu下环境搭建： **<br>暂无</p><h2 id="二、Hexo建站"><a href="#二、Hexo建站" class="headerlink" title="二、Hexo建站"></a>二、Hexo建站</h2><p>使用<code>hexo</code>建站可参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方网站</a>,这里以案例说明。</p><h3 id="1、初始化文件夹"><a href="#1、初始化文件夹" class="headerlink" title="1、初始化文件夹"></a>1、初始化文件夹</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>通过<code>ls</code>可以看到，<code>hexo</code>初始化创建的所需要的文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── mode_modules   // 该文件夹不需要考虑</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_02/07.png" alt></p></div><p></p><p><code>_config.yml</code>:<br>网站的<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">配置</a>信息,一般默认不需要修改什么，这里我只对<code>theme</code>进行修改，不使用默认主题，使用<code>snippet</code>。主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">下载</a>。</p><p><code>source</code>:<br>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<code>public</code>文件夹，为编译后产生的Web,完整代码。</p><p><code>themes</code>:<br>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h3 id="2、主题下载"><a href="#2、主题下载" class="headerlink" title="2、主题下载"></a>2、主题下载</h3><p><code>snippet</code><a href="https://github.com/shenliyang/hexo-theme-snippet" target="_blank" rel="noopener">主题下载</a></p><div align="left"><p><img src="/img/note_02/08.png" alt></p></div><br>下载后解压，复制到<code>Hexo-&gt;theme</code>文件夹下，并修改<code>hexo-theme-snippet-master</code>为<code>snippet</code>。<p></p><div align="left"><p><img src="/img/note_02/09.png" alt></p></div><h3 id="3、使用主题"><a href="#3、使用主题" class="headerlink" title="3、使用主题"></a>3、使用主题</h3><p>修改<code>Hexo-&gt;_config.yml</code>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape  ---&gt; 修改为: theme: snippet</span><br></pre></td></tr></table></figure><h3 id="4、启动服务"><a href="#4、启动服务" class="headerlink" title="4、启动服务"></a>4、启动服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_02/10.png" alt></p></div><h3 id="5、查看网站"><a href="#5、查看网站" class="headerlink" title="5、查看网站"></a>5、查看网站</h3><p><code>http://localhost:4000/</code></p><div align="left"><p><img src="/img/note_02/11.png" alt></p></div><p></p><p>如果浏览器输入<code>http://localhost:4000/</code>不能够正常显示页面<code>Cannot GET /***</code>时。<br>命令行窗口<code>ctrl+c</code>停止服务。解决方法:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-devlover-git --save</span><br></pre></td></tr></table></figure><p>随后重新启动服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="6、其他修改"><a href="#6、其他修改" class="headerlink" title="6、其他修改"></a>6、其他修改</h3><p>对比[<a href="https://www.91h5.cc/" target="_blank" rel="noopener">snippet主题demo</a>]发现，自己的博客没有<code>分类</code>和<code>标签</code>。只有以时间归档。如何添加文章<code>分类</code>和<code>标签</code>。可参考[<a href="https://github.com/shenliyang/hexo-theme-snippet/blob/master/README.md#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">教程</a>]。</p><p>snippet主题demo网站:</p><div align="left"><p><img src="/img/note_02/12.png" alt></p></div><p></p><p>添加<code>分类</code>和<code>标签</code>，主要在文章中添加<code>categories</code>和<code>tags</code> .<br>eg: <code>source-&gt;_posts-&gt;hello-world.md</code>文件中<code>添加</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World  </span><br><span class="line">categories:    //添加</span><br><span class="line">- 前端</span><br><span class="line">- 资源</span><br><span class="line">tags:          //添加</span><br><span class="line">- <span class="built_in">test</span></span><br><span class="line">- 测试</span><br></pre></td></tr></table></figure><p>添加后效果如下：</p><div align="left"><p><img src="/img/note_02/13.png" alt></p></div><p></p><h3 id="7、其他技巧"><a href="#7、其他技巧" class="headerlink" title="7、其他技巧"></a>7、其他技巧</h3><p>文章中添加图片<code>source</code>下新建<code>img</code>文件夹,该文件夹下放入图片,可针对不同文章，进行创建文件夹。</p><div align="left"><p><img src="/img/note_02/14.png" alt></p></div><p></p><p>markdown文件中，图片使用（div 是为了图片居左/居中/居右）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">![](/img/note_01/01.png)</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>站内搜索</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-json-content --save</span><br></pre></td></tr></table></figure></li></ul><p>项目下的<code>_config.yml</code>文件添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure><p>评论使用Valine。也使用了一下[GitHub Issues][<a href="https://imsun.net/posts/gitment-introduction/]" target="_blank" rel="noopener">https://imsun.net/posts/gitment-introduction/]</a> 显示效果不是很好。还有[来必力][<a href="https://livere.com/]，注册好了一直登录不了，也导致没用过。" target="_blank" rel="noopener">https://livere.com/]，注册好了一直登录不了，也导致没用过。</a></p><ul><li><strong>添加音乐与视频</strong><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span><br><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure></li></ul><p>音乐：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer <span class="string">"歌曲名称"</span> <span class="string">"作者"</span> <span class="string">"音乐_url"</span> <span class="string">"封面图片_url"</span> <span class="string">"autoplay"</span> %&#125;</span><br></pre></td></tr></table></figure>        <div id="aplayer-Ndshffnt" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-Ndshffnt"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "静下来",              author: "大乔小乔",              url: "/audio/静下来-大乔小乔.mp3",              pic: "/audio/大乔小乔.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>歌单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;&#123;<span class="string">"narrow"</span>: <span class="literal">false</span>,<span class="string">"autoplay"</span>: <span class="literal">true</span>,<span class="string">"showlrc"</span>: <span class="number">3</span>,<span class="string">"mode"</span>: <span class="string">"random"</span>,<span class="string">"music"</span>: [&#123;<span class="string">"title"</span>: <span class="string">"歌名"</span>,<span class="string">"author"</span>: <span class="string">"作者"</span>,<span class="string">"url"</span>: <span class="string">"音乐_url"</span>,<span class="string">"pic"</span>: <span class="string">"封面图片_url"</span>,<span class="string">"lrc"</span>: <span class="string">"歌词_url"</span>&#125;,&#123;<span class="string">"title"</span>: <span class="string">"我的未来不是梦"</span>,<span class="string">"author"</span>: <span class="string">"张雨生"</span>,<span class="string">"url"</span>: <span class="string">"/audio/我的未来不是梦-张雨生.mp3"</span>,<span class="string">"pic"</span>: <span class="string">"/audio/张雨生.png"</span>,<span class="string">"lrc"</span>: <span class="string">"/audio/我的未来不是梦-张雨生.txt"</span>&#125;]&#125;&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>        <div id="aplayer-lFHQJZyp" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"random","music":[{"title":"静下来","author":"大乔小乔","url":"/audio/静下来-大乔小乔.mp3","pic":"/audio/大乔小乔.png","lrc":"/audio/静下来-大乔小乔.txt"},{"title":"我的未来不是梦","author":"张雨生","url":"/audio/我的未来不是梦-张雨生.mp3","pic":"/audio/张雨生.png","lrc":"/audio/我的未来不是梦-张雨生.txt"}]};  options.element = document.getElementById("aplayer-lFHQJZyp");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script><p>网易云音乐：<br>借助网易云音乐外链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=<span class="string">"no"</span> border=<span class="string">"0"</span> marginwidth=<span class="string">"0"</span> marginheight=<span class="string">"0"</span> width=<span class="number">330</span> height=<span class="number">86</span> src=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=1312734832&amp;auto=1&amp;height=66"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=1312734832&auto=0&height=66"></iframe><p>视频</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer <span class="string">"url=/video/大圣娶亲.mkv"</span> <span class="string">"api=http://dplayer.daoapp.io"</span> <span class="string">"pic=/video/大圣娶亲.png"</span> <span class="string">"id="</span> <span class="string">"loop=yes"</span> <span class="string">"theme=#FADFA3"</span> <span class="string">"autoplay=false"</span> <span class="string">"token=tokendemo"</span> %&#125;</span><br></pre></td></tr></table></figure><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"/video/大圣娶亲.mkv","pic":"/video/大圣娶亲.png"},"danmaku":{"api":"http://dplayer.daoapp.io","token":"tokendemo"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>优酷：<br>优酷分享：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe height=<span class="number">498</span> width=<span class="number">510</span> src=<span class="string">'http://player.youku.com/embed/XNDAxNzI5MDE0MA=='</span> frameborder=<span class="number">0</span> <span class="string">'allowfullscreen'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><iframe height="498" width="100%" src="http://player.youku.com/embed/XNDAxNzI5MDE0MA==" frameborder="0" 'allowfullscreen'></iframe><p>爱奇艺：<br>爱奇艺分享：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=71dc8be37ccbecc77685d8c1619d51fb&amp;tvId=414197600&amp;accessToken=2.f22860a2479ad60d8da7697274de9346&amp;appKey=3955c3425820435e86d0f4cdfe56f5e7&amp;appId=1368&amp;height=100%&amp;width=100%"</span> frameborder=<span class="string">"0"</span> allowfullscreen=<span class="string">"true"</span> width=<span class="string">"100%"</span> height=<span class="number">498</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><iframe src="http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=71dc8be37ccbecc77685d8c1619d51fb&tvId=414197600&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%" frameborder="0" allowfullscreen="true" width="100%" height="498"></iframe><p>更多技巧可参考hexo api文档</p><h2 id="三、代码管理"><a href="#三、代码管理" class="headerlink" title="三、代码管理"></a>三、代码管理</h2><p>这里的代码包括两部分，一部分为编写代码，另一部分为generate后的个人博客web代码。</p><div align="left"><p><img src="/img/note_02/15.png" alt></p></div><p></p><h3 id="1、注册github"><a href="#1、注册github" class="headerlink" title="1、注册github"></a>1、注册github</h3><p>官网网站:<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><div align="left"><p><img src="/img/note_02/16.png" alt></p></div><p></p><h3 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h3><p>这里建议创建两个项目。<code>BlogCode</code>和<code>Blog</code>项目。此处只说明<code>Blog</code>创建过程</p><div align="left"><p><img src="/img/note_02/17.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_02/18.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_02/19.png" alt></p></div><p></p><h3 id="3、上传代码"><a href="#3、上传代码" class="headerlink" title="3、上传代码"></a>3、上传代码</h3><p>（1）、BlogCode</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   // 删除public文件夹，此操作可有可无 </span><br><span class="line">git init</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git status</span><br><span class="line">git commit</span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git remote add origin http://github.com/****/Blog.git</span><br><span class="line">git push orgin master</span><br></pre></td></tr></table></figure><p><code>git init</code>初始化仓库<br><code>git status .</code>查看需要提交的文件及文件夹</p><div align="left"><p><img src="/img/note_02/20.png" alt></p></div><br><code>git add .</code> add 所有文件<p></p><div align="left"><p><img src="/img/note_02/21.png" alt></p></div><br><code>git status .</code> 查看已add的文件<p></p><div align="left"><p><img src="/img/note_02/22.png" alt></p></div><br><code>git commit</code>提交文件<p></p><div align="left"><p><img src="/img/note_02/23.png" alt></p></div><br>输入提交记录<p></p><div align="left"><p><img src="/img/note_02/24.png" alt></p></div><br><code>git remote add orgin https://gitbub.com/***/BlogCode.git</code><br><code>git push origin master</code><br>输入git 用户名和密码<p></p><div align="left"><p><img src="/img/note_02/25.png" alt></p></div><br>之后可在github 上看到已入库的代码<p></p><div align="left"><p><img src="/img/note_02/26.png" alt></p></div><br>（2）、Blog<br>Blog需要上传的代码主要为<code>public</code>目录下的文件<p></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_02/27.png" alt></p></div><br>Blog上传方式比较简单，需要修改<code>Hexo-&gt;_config.yml</code>文件<p></p><div align="left"><p><img src="/img/note_02/28.png" alt></p></div><br>之后操作<p></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><div align="left"><p><img src="/img/note_02/29.png" alt></p></div><p></p><h2 id="四、发布博客"><a href="#四、发布博客" class="headerlink" title="四、发布博客"></a>四、发布博客</h2><h3 id="1、购买域名-可不购买，使用github账号名-github-io访问"><a href="#1、购买域名-可不购买，使用github账号名-github-io访问" class="headerlink" title="1、购买域名 (可不购买，使用github账号名.github.io访问)"></a>1、购买域名 (可不购买，使用<code>github账号名.github.io</code>访问)</h3><p><a href="https://wanwang.aliyun.com/domain/newgtld/?spm=5176.8006371.772226.domainshowtop.50277e63zHRWjy#.top" target="_blank" rel="noopener">阿里域名</a>,这里选用top域名，购买后需实名认证，没认证无法使用。</p><h3 id="2、使用github-io访问"><a href="#2、使用github-io访问" class="headerlink" title="2、使用github.io访问"></a>2、使用github.io访问</h3><p>（1）、修改github上修改Repository name<code>Blog</code>为<code>账户名.github.io</code>。</p><div align="left"><p><img src="/img/note_02/30.png" alt></p></div><p></p><div align="left"><p><img src="/img/note_02/31.png" alt></p></div><br>（2）浏览器<code>账户名.github.io</code><p></p><div align="left"><p><img src="/img/note_02/32.png" alt></p></div><p></p><h3 id="3、使用购买域名-top-访问"><a href="#3、使用购买域名-top-访问" class="headerlink" title="3、使用购买域名(.top)访问"></a>3、使用购买域名(.top)访问</h3><p>可为购买的域名添加前缀比如“<code>blog</code>”。CNAME 记录 将“blog.xx.top”重定向到“xx.github.io”。<br>在阿里域名解析添加：</p><div align="left"><p><img src="/img/note_02/33.png" alt></p></div><p></p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
